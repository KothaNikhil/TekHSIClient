<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScopeSupportBase</name>
    </assembly>
    <members>
        <member name="T:Tek.Scope.Support.BitsBase">
            <summary>
            This is an abstract class the is used to aid in building IBits class instances. This class is not intended to be used directly.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IBitsEx">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IBits">
            <summary>
            Defines a basic interface for large bit-fields and bit-streams.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRangeIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeIndexer.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Clear">
            <summary>
            Remove any storage set length to 0
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBits.CountWithClockedges(System.Int32)">
            <summary>
            Number of bits and clockedges
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBits.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Find beginning index of the specified range.
            </summary>
            <param name="range">The time range to search</param>
            <returns>The index of the first item in the time range</returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            Find end index of the specified range.
            </summary>
            <param name="range">The time range to search.</param>
            <returns>The index of the last item in the time range.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Find(Tek.Scope.Support.IRange)">
            <summary>
            Create IBits for the specified range.
            </summary>
            <param name="range">The time range to search</param>
            <returns>The bits contained in the specified time range.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.AddMSB(System.Boolean)">
            <summary>
            Adds a bit to the LSB and lengthens the bit value by 1
            </summary>
            <param name="bit">bit value</param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.AddMSB(System.Double,System.Boolean)">
            <summary>
            Adds to the MSB and associates time
            with the bit.
            </summary>
            <param name="time">The time associated with this bit value</param>
            <param name="bit">The boolean state associated with this bit value.</param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Add(System.Double,System.Boolean)">
            <summary>
            Same as AddMSB
            </summary>
            <param name="time">The time associated with this bit value</param>
            <param name="bit">The boolean state associated with this bit value.</param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.AddLSB(System.Boolean)">
            <summary>
            Adds a bit to the LSB and lengthens the bit value by 1
            </summary>
            <param name="bit">The boolean state associated with this bit value.</param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.AddLSB(System.Double,System.Boolean)">
            <summary>
            Add the bit to the LSB and assign the specified
            time location to that bit.
            </summary>
            <param name="time">The time associated with this bit value</param>
            <param name="bit">The boolean state associated with this bit value.</param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Compare(System.Int32,Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.TimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SetAt(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SetAt(System.Int32,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="time"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SubField(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Return a sub-field of the bit starting at the
            "start" location and return the number of bits specified by
            the "length".
            </summary>
            <param name="start">Starting index</param>
            <param name="length">Length of returned bit</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.LSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SubField64(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Returns a sub-feild of the bits start at the "start" location and
            returning the number of bits specified by "length". The total number of
            bits is limited to 64 bits.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="startbit">Optional. Default is SubFieldStartBit.LSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SubFields(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates through all of the specfied sub-fields.
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.LSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.SubField64s(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates throughall of the specified sub-feilds. 
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.LSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Reverse">
            <summary>
            Reverses this IBits value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Commit">
            <summary>
            Calling this method means that the data producer is done
            adding data to this type.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBits.ToHex">
            <summary>
            To Hexidecimal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.ToBinary">
            <summary>
            To Binary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBits.Copy">
            <summary>
            Make a copy of this set of Bits.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IBits.StartTime">
            <summary>
            Begin time for all of the underlying bit information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.StopTime">
            <summary>
            End time for all of the underlying bit information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Duration">
            <summary>
            The time duration of the underlying bit information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.HUnits">
            <summary>
            Horizontal units 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Name">
            <summary>
            Name of this data. 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.SourceName">
            <summary>
            Name of source of this data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Settings">
            <summary>
            Settings used to create bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Count">
            <summary>
            Number of bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.UnitInterval">
            <summary>
            Returns/Set unit interval for each bit.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Item(System.Int32)">
            <summary>
            Get bit at location
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IBits.Value">
            <summary>
            Returns the lowest 64 bits of the bit collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.AddMSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.AddLSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.And(Tek.Scope.Support.IBitsEx)">
            <summary>
            And Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.Or(Tek.Scope.Support.IBitsEx)">
            <summary>
            Or Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.Not">
            <summary>
            Not Operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBitsEx.Xor(Tek.Scope.Support.IBitsEx)">
            <summary>
            Xor Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.IResultCollection">
            <summary>
            Holds an collection of IResults
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRangeCollection">
            <summary>
            Holds an collection of IRanges
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IArrayCollection`1">
            <summary>
            IArrayCollection is used to represent very simple array-like collections. 
            It's much simplier than Generic.ICollection and is the minimal
            implimentation required for most things to work.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Contains(`0)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Add(`0)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Commit">
            <summary>
            Called with creation of ArrayCollection is complete. This allows
            any clean up required at the end of data creation to occur.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Clear">
            <summary>
            Clears the array.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Sort">
            <summary>
            Sort the array.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArrayCollection`1.Sort(System.Func{`0,`0,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IArrayCollection`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IArrayCollection`1.Count">
            <summary>
            Returns/Sets the number of elements
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRange">
            <summary>
            Represents a qualifier time range.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRange.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v">Time to check</param>
            <returns>true if time is within the specified range, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IRange.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v">Time Range to check</param>
            <returns>true if specified range intersects.</returns>
        </member>
        <member name="P:Tek.Scope.Support.IRange.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRange.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRange.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRange.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Finds the first index in the IRangeCollection for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            Finds the last index in the IRangeCollection for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.DescriptionStyle">
            <summary>
            The sets the global DescriptionStyle for the IRangeCollection.
            This can be locally overridden using ToString(DescriptionStyleType).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Settings">
            <summary>
            Used to pass back settings info from a script. This is typically used
            to provide formatting info from a script definition.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IStatistics">
            <summary>
            Contains the standard statisics that can be
            returned for a population of data. This is always
            available on a IResultCollection (or derived) type.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IStatistics.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IStatistics.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IStatistics.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IStatistics.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IStatistics.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Clear">
            <summary>
            Resets the collection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.ToArray">
            <summary>
            Returns values (if compatible with a double) as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollection.Commit">
            <summary>
            Tells the underlying class(es)
            that this set of changes is complete.
            This allows any housekeeping associated with
            a consistant state to be done.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.VUnits">
            <summary>
            Return the vertical units of the underlying value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollection.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IIndexer`1">
            <summary>
            Indexer - This allows properties to be indexers.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IIndexer`1.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IIndexer`1.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IIndexer`1.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IIndexer`1.Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IIndexer`1.Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Dispose">
            <summary>
                                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Clear">
            <summary>
            Remove any storage set length to 0
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Clear">
            <summary>
            Resets the collection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ClearStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.FindIndex(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.RangeItem(Tek.Scope.Support.IRange,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CountWithClockedges(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.TimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SetAt(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SetAt(System.Int32,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="time"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddMSB(System.Boolean)">
            <summary>
            Adds a bit to the LSB and lengthens the bit value by 1
            </summary>
            <param name="bit">bit value</param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddMSB(System.Double,System.Boolean)">
            <summary>
            Adds to the MSB and associates time
            with the bit.
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Add(System.Double,System.Boolean)">
            <summary>
            Same as AddMSB
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddLSB(System.Boolean)">
            <summary>
            Adds a bit to the LSB and lengthens the bit value by 1
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddLSB(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Clear">
            <summary>
            Base Clear
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToByteArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.System#Collections#Generic#IEnumerable{System#Boolean}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IResult}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Find beginning index of the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            Find end index of the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Find(Tek.Scope.Support.IRange)">
            <summary>
            Create IBits for the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SubField(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Return a sub-field of the bit starting at the
            "start" location and return the number of bits specified by
            the "length".
            </summary>
            <param name="start">Starting index</param>
            <param name="length">Length of returned bit</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.MSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SubField64(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Returns a sub-field of the bits start at the "start" location and
            returning the number of bits specified by "length". The total number of
            bits is limited to 64 bits.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="startbit">Optional. Default is SubFieldStartBit.MSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SubFields(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates through all of the specfied sub-fields.
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.MSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.SubField64s(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates throughall of the specified sub-fields. 
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <param name="startbit">Optional. Default is SubFieldStartBit.MSB which means bit under start is considered the LSB.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Reverse">
            <summary>
            Reverses this IBits value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Commit">
            <summary>
            Calling this method means that the data producer is done
            adding data to this type.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToHex">
            <summary>
            To Hexidecimal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToBinary">
            <summary>
            To Binary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Copy">
            <summary>
            Make a copy of this set of Bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Commit">
            <summary>
            Tells the underlying class(es)
            that this set of changes is complete.
            This allows any housekeeping associated with
            a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#ToArray">
            <summary>
            Returns values (if compatible with a double) as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.BinarySearch(System.Double,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="v"></param>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CalcStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Compare(System.Int32,Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CompareTo(System.Object)">
            <summary>
            CompareTo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Equals(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Equals(System.UInt64)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddMSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.AddLSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.And(Tek.Scope.Support.IBitsEx)">
            <summary>
            And Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Or(Tek.Scope.Support.IBitsEx)">
            <summary>
            Or Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Not">
            <summary>
            Not Operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsBase.Xor(Tek.Scope.Support.IBitsEx)">
            <summary>
            Xor Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.UnitInterval">
            <summary>
            Returns/Set unit interval for each bit.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.StartTime">
            <summary>
            Begin time for bit data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.StopTime">
            <summary>
            End time for bit data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.VUnits">
            <summary>
            Return the vertical units of the underlying value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Duration">
            <summary>
            Width of bit data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#HUnits">
            <summary>
            Horizontal units 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Name">
            <summary>
            Name of this data. 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#SourceName">
            <summary>
            Name of source of this data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Settings">
            <summary>
            Settings used to create bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Count">
            <summary>
            Number of bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IBits#Item(System.Int32)">
            <summary>
            Get bit at location
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Value">
            <summary>
            Returns the lowest 64 bits of the bit collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IResultCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Tek#Scope#Support#IRange#Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsHelper.Width(System.UInt64)">
            <summary>
            return minimum number of bits required to represent this value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.BitsExtention">
            <summary>
            Add some operations on the base interface
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.And(Tek.Scope.Support.IBits,Tek.Scope.Support.IBits)">
            <summary>
            And Operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.Xor(Tek.Scope.Support.IBits,Tek.Scope.Support.IBits)">
            <summary>
            Xor Operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.Or(Tek.Scope.Support.IBits,Tek.Scope.Support.IBits)">
            <summary>
            And Operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.Not(Tek.Scope.Support.IBits)">
            <summary>
            Not Operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.Match(Tek.Scope.Support.IBits,System.Int32,Tek.Scope.Support.IBits,System.Boolean)">
            <summary>
            In place compare
            </summary>
            <param name="bits"></param>
            <param name="index"></param>
            <param name="matchValue"></param>
            <param name="bReverse"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsExtention.Append(Tek.Scope.Support.IBits,Tek.Scope.Support.IBits,System.Boolean)">
            <summary>
            Append bits to MSB (or LSB if flag set to true)
            </summary>
            <param name="bits"></param>
            <param name="other"></param>
            <param name="bInsertAtLSB"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.IResult">
            <summary>
            Holds Generic Result Data
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRangeEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRangeEx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Name">
            <summary>
            Name of this result type.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeEx.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IResult.ToString">
            <summary>
            Converts the item into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResult.CompareValue(System.Object)">
            <summary>
            Compare value against the passed
            object. A return value of null means the
            objects weren't compariable.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IResult.Copy">
            <summary>
            Make a copy of this result
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IResult.Value">
            <summary>
            Value. Typically the results of some calculation. But
            if there isn't a tradiontal results, then the Duration is 
            used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IResult.VUnits">
            <summary>
             VUnits for the result
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.CompareTo(System.Object)">
            <summary>
            Compares the item to another IRange item.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.IsNumber(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.CompareValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.Copy">
            <summary>
            Make a copy of this result
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsResults.ToString">
            <summary>
            Override of ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Description">
            <summary>
            A description of the result
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.Value">
            <summary>
            Value. Typically the results of some calculation. But
            if there isn't a tradiontal results, then the Duration is 
            used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsResults.VUnits">
            <summary>
             VUnits for the result
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.BitsSubRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.CalcStartStopTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.CountWithClockedges(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.TimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.SetAt(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.SetAt(System.Int32,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="time"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.AddMSB(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.AddMSB(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.AddLSB(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.AddLSB(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsSubRange.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.Bits">
            <summary>
            Internal Bit Storage
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.Offset">
            <summary>
            Offset into internal bit storage
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.Width">
            <summary>
            Width of Internal bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.StartBit">
            <summary>
            Starting Bit.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsSubRange.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Bits">
            <summary>
            Represents a bit stream that can be wider then 64 bits.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Bits._count">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._bitcount">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._bits">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._clockedges">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._edges">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._hunits">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._max">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._mean">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._min">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._name">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._sourcename">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._stddev">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._ui">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._vunits">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._format">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits._style">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.Bits.bCommited">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor(Tek.Scope.Support.IArrayCollection{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor(System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor(System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.#ctor(System.Int32)">
            <summary>
            Defines a bitfield of a specfied length
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Parse(System.String)">
            <summary>
            Parse a binary text stream
            </summary>
            <param name="binary"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CalcStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CountWithClockedges(System.Int32)">
            <summary>
            Establishes both bits and clockedges size.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ResultsGetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ResultsSetAt(System.Int64,Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.FindIndex(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Tek#Scope#Support#IBits#Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.GetAt(System.Int32)">
            <summary>
            Retreive a bit
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.TimeAt(System.Int32)">
            <summary>
            Gets the time a the beginning of the specified bit.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SetAt(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SetAt(System.Int32,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="time"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.BinarySearch(Tek.Scope.Support.IArrayCollection{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="arrayCollection"></param>
            <param name="v"></param>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(Tek.Scope.Support.IResult,System.Boolean)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="data"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(System.Double,System.Double,System.Double,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="focus"></param>
            <param name="v"></param>
            <param name="data"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddLSB(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Compare(System.Int32,Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToHex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToBinary">
            <summary>
            Converts TestData into a binary string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddMSB(System.Boolean)">
            <summary>
            Append a bit in stream order
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddMSB(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddLSB(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.setByteAt(System.Int32,System.Byte)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.getByteAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SubField(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Returns a chunk of the stream
            </summary>
            <param name="start">start index</param>
            <param name="length">length</param>
            <param name="startbit">optional. Default is SubFieldStartBit.LSB</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SubField64(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Return a chunk of the stream
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="startbit"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SubFieldFast(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            This method is similar to SubField, with the exception that it ignores bit times.  It does set return.StartTime and return.Stoptime
            The assumption is that if the subfield is short enough, the bit times can be determined elsewhere or are not needed
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="startbit"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Clone">
            <summary>
            Clone the current sream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Reverse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Reverse(Tek.Scope.Support.Bits)">
            <summary>
            
            </summary>
            <param name="bitstream"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_RightShift(Tek.Scope.Support.Bits,System.Int32)">
            <summary>
            Shift Left
            </summary>
            <param name="lhs"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_LeftShift(Tek.Scope.Support.Bits,System.Int32)">
            <summary>
            Right shift
            </summary>
            <param name="lhs"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_OnesComplement(Tek.Scope.Support.Bits)">
            <summary>
            Negate the bitstream
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseAnd(Tek.Scope.Support.Bits,Tek.Scope.Support.Bits)">
            <summary>
            Logical And
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseAnd(System.UInt64,Tek.Scope.Support.Bits)">
            <summary>
            Logical And
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseAnd(Tek.Scope.Support.Bits,System.UInt64)">
            <summary>
            Logical And
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseOr(Tek.Scope.Support.Bits,Tek.Scope.Support.Bits)">
            <summary>
            Logical OR
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseOr(System.UInt64,Tek.Scope.Support.Bits)">
            <summary>
            Logical OR
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_BitwiseOr(Tek.Scope.Support.Bits,System.UInt64)">
            <summary>
            Logical OR
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Equality(Tek.Scope.Support.Bits,Tek.Scope.Support.Bits)">
            <summary>
            Test for equality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Equality(System.UInt64,Tek.Scope.Support.Bits)">
            <summary>
            Test for equality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Equality(Tek.Scope.Support.Bits,System.UInt64)">
            <summary>
            Test for equality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Inequality(Tek.Scope.Support.Bits,Tek.Scope.Support.Bits)">
            <summary>
            Test for inequality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Inequality(System.UInt64,Tek.Scope.Support.Bits)">
            <summary>
            Test for inequality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Inequality(Tek.Scope.Support.Bits,System.UInt64)">
            <summary>
            Test for inequality
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.op_Implicit(Tek.Scope.Support.Bits)~System.UInt64">
            <summary>
            
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Equals(Tek.Scope.Support.IBits)">
            <summary>
            Required for IEquatable support
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Equals(System.UInt64)">
            <summary>
            Required for IEquatable support
            </summary>
            <param name="wb"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Equals(System.Object)">
            <summary>
            Required for IEquatable support
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SubFields(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates through the bits starting as the specified offset and of the
            specified size.
            </summary>
            <param name="offset">the starting offset (or index)</param>
            <param name="length">width of the bit field to return as a ulong</param>
            <param name="startbit">select whether the bit at the offset is MSB or LSB. MSB is the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.SubField64s(System.Int32,System.Int32,Tek.Scope.Support.SubFieldStartBit)">
            <summary>
            Iterates through the bits starting as the specified offset and of the
            specified size.
            </summary>
            <param name="offset">the starting offset (or index)</param>
            <param name="length">width of the bit field to return as a ulong</param>
            <param name="startbit">select whether the bit at the offset is MSB or LSB. MSB is the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.System#Collections#Generic#IEnumerable{System#Boolean}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToString">
            <summary>
            String is MSB to LSB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Format(System.String,Tek.Scope.Support.DescriptionStyleType,Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            GetObjectData for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.PRBS(System.Int32,System.Int32,System.Int32)">
            <summary>
            Pseudo Random Bit Sequence Generator. Based on "ITU-T 0.150".
            
            Polynomial definitions are easily converted. For example: 
            G(x) = x^7 + x^6 + 1 is PRBS(7, 7, 6).
            </summary>
            <param name="stages">The number of shift register</param>
            <param name="tap1">The first bit of the xor feedback</param>
            <param name="tap2">The second bit of the xor feedback</param>
            <returns>Returns 2^stages-1 bits</returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Reverse(System.UInt64,System.Int32)">
            <summary>
            A helper functions to reverse bits.
            </summary>
            <param name="bits"></param>
            <param name="bitcount"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Tek#Scope#Support#IBits#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Copy">
            <summary>
            Make a copy of this set of Bits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddMSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.AddLSB(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Bits.And(Tek.Scope.Support.IBitsEx)">
            <summary>
            And Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Or(Tek.Scope.Support.IBitsEx)">
            <summary>
            Or Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Not">
            <summary>
            Not Operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Bits.Xor(Tek.Scope.Support.IBitsEx)">
            <summary>
            Xor Operation
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Bits.ClockEdges">
            <summary>
            Contains the clock edge times for the underlying bits. There is
            a one-to-one mapping of indexes to bits.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.Bits.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Bits.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Bits.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Count">
            <summary>
            Returns the number of bits in the stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Bits.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Bits.UnitInterval">
            <summary>
            Returns/Sets Unit Interval
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.StartTime">
            <summary>
            Begin time for bit data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.StopTime">
            <summary>
            End time for bit data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Duration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Tek#Scope#Support#IBits#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Value">
            <summary>
            Convert to ulong of possible.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS7">
            <summary>
            Return PRBS7 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS9">
            <summary>
            Return PRBS9 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS11">
            <summary>
            Return PRBS11 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS15">
            <summary>
            Return PRBS15 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS20">
            <summary>
            Return PRBS20 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.PRBS23">
            <summary>
            Return PRBS23 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.D102">
            <summary>
            Return PRBS23 Stream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Bits.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CopyHelper">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <exclude/>
             <summary>
             
             </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IBits,Tek.Scope.Support.IBits@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IBitsCollection,Tek.Scope.Support.IBitsCollection@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(System.Object,Tek.Scope.Support.ICategorize@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.ICategorize,Tek.Scope.Support.ICategorize@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(System.Object,Tek.Scope.Support.IPacketCollection@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.IPacketCollection@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IDigitalEvents,Tek.Scope.Support.IDigitalEvents@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IEdges,Tek.Scope.Support.IEdges@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IPin,Tek.Scope.Support.IPin@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IHistogram,Tek.Scope.Support.IHistogram@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(System.Object,Tek.Scope.Support.IHistogram@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IResult,Tek.Scope.Support.IResult@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IResultCollection,Tek.Scope.Support.IResultCollection@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.INormalizedVector@)">
            <summary>
            </summary>
            <param name="src"> </param>
            <param name="dest"> </param>
        </member>
        <member name="M:Tek.Scope.Support.CopyHelper.Copy(Tek.Scope.Support.IWaveformDB,Tek.Scope.Support.IWaveformDB@)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="T:Tek.Scope.Support.OffsetIndexes">
            <summary>
            Used by BitsCollection to find Offsets into individual bits
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OffsetIndexes.CompareTo(Tek.Scope.Support.OffsetIndexes)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Tek.Scope.Support.BCRangeWithOverride">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RangeWithOverride">
            <summary>
            Defines an overrideable IRange to allow CopyRange
            to do a deep copy.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeWithOverride.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Focus">
            <summary>
            Focus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Begin">
            <summary>
            Begin
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.End">
            <summary>
            End
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.SourceName">
            <summary>
            Source name for this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeWithOverride.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BCRangeWithOverride.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.BitsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IBitsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBitsCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IBitsCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBitsCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBitsCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IBitsCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IBitsCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IBitsCollection#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.RangeCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.GetRangeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Add(Tek.Scope.Support.IBits)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Sort">
            <summary>
            Sort the array.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Contains(Tek.Scope.Support.IBits)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.CopyTo(Tek.Scope.Support.IBits[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Remove(Tek.Scope.Support.IBits)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v">Time to check</param>
            <returns>true if time is within the specified range, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v">Time Range to check</param>
            <returns>true if specified range intersects.</returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.BinarySearch(Tek.Scope.Support.IRangeCollection,System.Double,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="arrayCollection"></param>
            <param name="v"></param>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Finds the first index in the IRangeCollection for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            Finds the last index in the IRangeCollection for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.FindIndex(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.CreateOffsets">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.BitsCollection.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IBitsCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IRangeCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Count">
            <summary>
            Returns/Sets the number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.StartTime">
            <summary>
            Begin time for all of the underlying bit information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.StopTime">
            <summary>
            End time for all of the underlying bit information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.HUnits">
            <summary>
            Horizontal units 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.DescriptionStyle">
            <summary>
            The sets the global DescriptionStyle for the IRangeCollection.
            This can be locally overridden using ToString(DescriptionStyleType).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Settings">
            <summary>
            Used to pass back settings info from a script. This is typically used
            to provide formatting info from a script definition.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.Name">
            <summary>
            Name of this data. 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitsCollection.SourceName">
            <summary>
            Name of source of this data.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IHorizontal`1">
            <summary>
             The Normalized Vector Horizontal interface
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IHorizontal`1.IndexToValue(System.Double)">
            <summary>
            Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index">an index into the data array. Non-integer values will use linear interpolation to return a value.</param>
            <returns>A double in the vertical units (usually volts)</returns>
        </member>
        <member name="M:Tek.Scope.Support.IHorizontal`1.ValueToIndex(System.Double)">
            <summary>
            Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv">Horizontal value (usually time)</param>
            <returns>Array index</returns>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.Units">
            <summary>
            Returns the units string.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.Spacing">
            <summary>
            The horizontal value between samples.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.PrechargeCount">
            <summary>
            The number of precharge points. Used as follows: 
            Time = (Index - ZeroIndex) * Spacing + ZeroOffset.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.PostchargeCount">
            <summary>
            The number of postcharge points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.ZeroIndex">
            <summary>
            The index value (which could be fractional) where
            time zero occur. Used as follows: 
            Time = (Index - ZeroIndex) * Spacing.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.IntegerZeroIndex">
            <summary>
            Returns the integer portions of ZeroIndex
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHorizontal`1.FractionalZeroIndex">
            <summary>
            Returns the Fractional portion of the ZeroIndex
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IVertical`1">
            <summary>
            The vertical information for the vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVertical`1.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVertical`1.Spacing">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVertical`1.Position">
            <summary>
            Vertical position
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVertical`1.Units">
            <summary>
            The string value representing the vertical units.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IVector`1">
            <summary>
            A Normalized waveform
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IVector`1.ToArray">
            <summary>
            Raw Array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IVector`1.Commit">
            <summary>
            Tells the underlying class(es)
            that this set of changes is complete.
            This allows any housekeeping associated with
            a consistant state to be done.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVector`1.Vertical">
            <summary>
            The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVector`1.Horizontal">
            <summary>
            The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVector`1.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IVector`1.Item(System.Int64)">
            <summary>
            The normalized data element at the specified location.
            </summary>
            <param name="index">the index in the array for that element</param>
            <returns>a double value in vertical units</returns>
        </member>
        <member name="P:Tek.Scope.Support.IVector`1.SourceName">
            <summary>
            Returns the name of the source for this vector. If this is a type in the
            DataStore, this should return the symbol name associated with the item. If
            it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.INormalizedHorizontal">
            <summary>
             The Normalized Vector Horizontal interface
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedHorizontal.IndexToValue(System.Double)">
            <summary>
            Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index">an index into the data array. Non-integer values will use linear interpolation to return a value.</param>
            <returns>A double in the vertical units (usually volts)</returns>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedHorizontal.ValueToIndex(System.Double)">
            <summary>
            Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv">Horizontal value (usually time)</param>
            <returns>Array index</returns>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.Units">
            <summary>
            Returns the units string.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.Spacing">
            <summary>
            The horizontal value between samples.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.PrechargeCount">
            <summary>
            The number of precharge points. Used as follows: 
            Time = (Index - ZeroIndex) * Spacing + ZeroOffset.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.PostchargeCount">
            <summary>
            The number of postcharge points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.ZeroIndex">
            <summary>
            The index value (which could be fractional) where
            time zero occur. Used as follows: 
            Time = (Index - ZeroIndex) * Spacing.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.IntegerZeroIndex">
            <summary>
            Returns the integer portions of ZeroIndex
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedHorizontal.FractionalZeroIndex">
            <summary>
            Returns the Fractional portion of the ZeroIndex
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.INormalizedVertical">
            <summary>
            The vertical information for an analog waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVertical.Position">
            <summary>
            Vertical position
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVertical.Units">
            <summary>
            The string value representing the vertical units.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.INormalizedVerticalEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVerticalEx.Histogram">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.INormalizedVector">
            <summary>
            A Normalized waveform. This interface represents analog waveforms.
            </summary>
            <code>
             INormalizedVector v = (INormalizedVector) Reader.Read(args[0]);
             for (int i = 0; i &lt; v.Count; i++)
             {
                Console.WriteLine("{0},{1}", v.Horizontal.IndexToValue(i), v[i]);
             }
            </code>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedVector.ToArray">
            <summary>
            Returns Normalized values as an array of doubles
            </summary>
            <returns>The collection as an array of doubles.</returns>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedVector.Commit">
            <summary>
            Tells the underlying class(es)
            that this set of changes is complete.
            This allows any housekeeping associated with
            a consistant state to be done.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVector.Vertical">
            <summary>
            The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVector.Horizontal">
            <summary>
            The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVector.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVector.Item(System.Int64)">
            <summary>
            The normalized data element at the specified location.
            </summary>
            <param name="index">the index in the array for that element</param>
            <returns>a double value in vertical units</returns>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVector.SourceName">
            <summary>
            Returns the name of the source for this vector. If this is a type in the
            DataStore, this should return the symbol name associated with the item. If
            it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.VectorType">
            <summary>
            Type of analog vector
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.Sample">
            <summary>
            Nothing fancy, just the data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.PeakDetect">
            <summary>
            Peak Detect Data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.HiRes">
            <summary>
            High Res Data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.Envelope">
            <summary>
            Envelope Data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.MinMax">
            <summary>
            MinMax Data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorType.Average">
            <summary>
            Average Data
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AccessType">
            <summary>
            How to access MinMax, PeakDetect or Envelope Data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AccessType.Raw">
            <summary>
            Raw data point. Probably in Min/Max order
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AccessType.Min">
            <summary>
            Just the min data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AccessType.Max">
            <summary>
            Just the max data
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AccessType.Average">
            <summary>
            (Min-Max)/2+Min
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.INormalizedVectorEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedVectorEx.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.INormalizedVectorEx.SetArray(System.Double[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVectorEx.Type">
            <summary>
            Type of waveform
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVectorEx.Access">
            <summary>
            Select access type for MinMax, PeakDetect or Envelope Vectors.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVectorEx.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.INormalizedVectorEx.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SummaryFrameType">
            <summary>
            Fast Frame may have a summary frame. This enum
            represents the type of summary frame available.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SummaryFrameType.Off">
            <summary>
             Summary frame is off
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SummaryFrameType.Average">
            <summary>
            Summary Frame is Average
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SummaryFrameType.Envelope">
            <summary>
            Summary Frame is Envelope
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IFastFrame">
            <summary>
            Represents multiple waveforms collected in a single acquisition
            </summary>
            <code>
            </code>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.FrameCount">
            <summary>
            Number for frames in the Fast Frame data set
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.CurrentFrame">
            <summary>
            The frame currently visible 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.SummaryFrame">
            <summary>
            Returns type of summary frame available.
            If this value is not equal None, then
            the last frame is the summary frame.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.GlobalTime">
            <summary>
            Global time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.GMT">
            <summary>
            GMT time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.GMTFractSec">
            <summary>
            GMT Fractional Second
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFastFrame.TTOffset">
            <summary>
            Time offset
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IFastFrameEx">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Range">
            <summary>
            Simple Implimentation of IRange
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Range.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Range.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Range.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Range.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.Range.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Range.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Range.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Range.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Focus">
            <summary>
            Focus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Begin">
            <summary>
            Begin
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.End">
            <summary>
            End
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.SourceName">
            <summary>
            Source name for this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Range.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DescriptionStyleType">
            <summary>
            This enum defines the formatting style for ToString(), ToString(DescriptionStyleType)
            and the Description property of IRangeEx items
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DescriptionStyleType.Short">
            <summary>
            Format using the short form
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DescriptionStyleType.Long">
            <summary>
            Format using the long form
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DescriptionStyleType.EventTable">
            <summary>
            Format targeting the event table.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RangeTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RangeTime.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RangeTime.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RangeTime.End">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RangeCollection">
            <summary>
            An in memory implimentatino of IRangeCollection
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ArrayCollection`1">
            <summary>
            Implements a dynamically sizing
            array collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Tek.Scope.Support.ArrayCollection`1.Shift">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ArrayCollection`1.ChunkSize">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ArrayCollection`1.Mask">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ArrayCollection`1._items">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="shift"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Resize(System.Int32,System.Boolean)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.ToArray">
            <summary>
            ToArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Add(`0)">
            <summary>
            Add new item
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Uncommit">
            <summary>
            We're going to add stuff after a commit has 
            occurred. We need to fix things up for resizing.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Commit">
            <summary>
            Done adding new values
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap Values
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Partition(System.Int32,System.Int32,System.Int32,System.Func{`0,`0,System.Boolean})">
            <summary>
            QuickSort Partition
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.QuickSort(System.Int32,System.Int32,System.Func{`0,`0,System.Boolean})">
            <summary>
            QuickSort (from Wikipedia).
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Sort(System.Func{`0,`0,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Sort">
            <summary>
            Sort values in assending order
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollection`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ArrayCollection`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ArrayCollection`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Needlessly slow, need to fix this
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.RangeItem(Tek.Scope.Support.IRange,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.TimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.StartTime">
            <summary>
            An Alias for Begin
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.StopTime">
            <summary>
            An Alias for End
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Focus">
            <summary>
            Focus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Begin">
            <summary>
            Begin
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.End">
            <summary>
            End
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Tek.Scope.Support.IRangeCollectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollectionCollection.Sort">
            <summary>
            Sort
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRangeCollectionCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollectionCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRangeCollectionCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.RCCRangeProxy">
            <summary>
             Needed to support IRangeCollectionCollection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RCCRangeProxy.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v">Time to check</param>
            <returns>true if time is within the specified range, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.RCCRangeProxy.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v">Time Range to check</param>
            <returns>true if specified range intersects.</returns>
        </member>
        <member name="M:Tek.Scope.Support.RCCRangeProxy.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Name">
            <summary>
            Name of this result type.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RCCRangeProxy.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RangeCollectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.GetCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Order">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Contains(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Add(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Sort(System.Func{Tek.Scope.Support.IRangeCollection,Tek.Scope.Support.IRangeCollection,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.FindStartIndex(Tek.Scope.Support.IRange,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Needlessly slow, need to fix this
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.RangeItem(Tek.Scope.Support.IRange,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.TimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.CompareTo(Tek.Scope.Support.IRangeCollectionCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeCollection}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Duration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RangeCollectionCollection.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IResultCollectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ResultCollectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._mean">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._min">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._max">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._stddev">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._begin">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._end">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionCollection._disposed">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Order">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IResult}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.FindStartIndex(Tek.Scope.Support.IRange,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Needlessly slow, need to fix this
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Sort(System.Func{Tek.Scope.Support.IResultCollection,Tek.Scope.Support.IResultCollection,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swap Values
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Partition(System.Int32,System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            QuickSort Partition
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.QuickSort(System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            QuickSort (from Wikipedia).
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Sort">
            <summary>
            Sort values in assending order
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Add(Tek.Scope.Support.IResultCollection)">
            <summary>
            Add
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Remove(Tek.Scope.Support.IResultCollection)">
            <summary>
            Remove
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Contains(Tek.Scope.Support.IResultCollection)">
            <summary>
            Contains
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.CopyTo(Tek.Scope.Support.IResultCollection[],System.Int32)">
            <summary>
            Copy
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.CalcStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.FindIndex(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.Find(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.RangeItem(Tek.Scope.Support.IRange,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.TimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionCollection.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IResultCollection}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.IsReadOnly">
            <summary>
            IsReadonly
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Duration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Focus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.End">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IResultCollection#SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IRangeCollection#HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionCollection.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IDataCollection`1">
            <summary>
            A Data ArrayCollection to be used by IResultCollectionData
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Tek.Scope.Support.IDataCollection`1.Count">
            <summary>
            Returns the number of elements available
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDataCollection`1.Item(System.Int32)">
            <summary>
            Returns the data type.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.IResultCollectionData`1">
            <summary>
            An IResultCollection that contains additional data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollectionData`1.Add(Tek.Scope.Support.IResult,`0)">
            <summary>
            Adds an IResult and a data element
            </summary>
            <param name="r"></param>
            <param name="d"></param>
        </member>
        <member name="M:Tek.Scope.Support.IResultCollectionData`1.Add(System.Double,System.Double,System.Double,System.Object,`0)">
            <summary>
            Adds indivual elements of an IResult and a data element.
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="focus"></param>
            <param name="v"></param>
            <param name="data"></param>
        </member>
        <member name="P:Tek.Scope.Support.IResultCollectionData`1.Data">
            <summary>
            The collection of additoinal data
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.BitValue">
            <summary>
            Represents the possible bit states
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BitValue.Zero">
            <summary>
            A digital zero
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BitValue.One">
            <summary>
            A digital one
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BitValue.SingleTransition">
            <summary>
            Single Transition (can only occur in stream of Multiple Transitions).
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BitValue.MultipleTransitions">
            <summary>
            Multiple Transitions.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IDigitalEvent">
            <summary>
            An interface representing a Digital Event
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvent.Clone">
            <summary>
            Clone The contents.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvent.Time">
            <summary>
            Time of the event in seconds.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvent.Value">
            <summary>
            Bit values
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvent.Transition">
            <summary>
            Returns one if Multiple transitions occurred on this bit.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvent.NumBits">
            <summary>
            Returns the number of bits
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvent.Item(System.Int32)">
            <summary>
            Value Indexer.
            </summary>
            <param name="index">Index of the bit to return. Values go from 0 to NumBits-1.</param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.IDigitalEvents">
            <summary>
            An interface representing digital events. The data is time ordered. Earliest times
            are first. 
            
            Data may be added out of time order, but the collection will need to be sorted
            because all subsequent clients will assume the collection is time ordered.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Find(Tek.Scope.Support.IRange)">
            <summary>
            Return an IDigitalEvents for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Find(Tek.Scope.Support.IDigitalEvents@,Tek.Scope.Support.IRange)">
            <summary>
            Fill in IDigitalEvents for the specified range.
            </summary>
            <param name="d"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Add(System.Double,System.UInt64)">
            <summary>
            Adds a new element (assumes Transition bits are all 0).
            </summary>
            <param name="time">Time the event occurred (in seconds)</param>
            <param name="bits">Value for the event.</param>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Adds a new element.
            </summary>
            <param name="time">Time the event occurred (in seconds)</param>
            <param name="bits">Value for the event.</param>
            <param name="trans">Transition bits. </param>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Adds a new element.
            </summary>
            <param name="e">Event to add</param>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.RemoveAll">
            <summary>
            Removes all events
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.TimeAtIndex(System.Int64)">
            <summary>
            Returns the time at the specified index
            </summary>
            <param name="index">Index of the event.</param>
            <returns>Returns the time at the event specified by the index.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.IndexAtTime(System.Double)">
            <summary>
            Returns the index at the specified time.
            </summary>
            <param name="t">Time value of the event to find (in seconds)</param>
            <returns>The event index at that time. The time value of the returned index will be less than or equal to t.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Sort">
            <summary>
            Sorts the ArrayCollection. This is used to order the data (which is 
            assumed by virtually all users of this data). 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IDigitalEvents.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.ContainsTransitionEvents">
            <summary>
            Returns true of the collection has multiple transitions in it.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.SampleInterval">
            <summary>
            Only used to recreate sampled file.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.StartTime">
            <summary>
            Returns start time (in seconds) for the digital waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.StopTime">
            <summary>
            Returns the stop time (in seconds) for the digital waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.Name">
            <summary>
            Contains name of the source of this data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.NumBits">
            <summary>
            Returns the number of bits per event.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDigitalEvents.Item(System.Int64)">
            <summary>
            The digital event at the specified index. A set, which changes the stored value,
            implies that events may be combined. For example, if a value is changed such that it is
            same value as the previous event, it is expected that it will be combined with the previous
            event.
            </summary>
            <param name="index">Index of the event</param>
        </member>
        <member name="T:Tek.Scope.Support.IPin">
            <summary>
            This interface is used to allow items to be typed such that they
            get a IDigitalEvents with only one bit. It adds some features of 
            IBits for pulling out fields. This is useful with clocked data.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPin.Find(Tek.Scope.Support.IRange)">
            <summary>
            Returns the items that occur in the
            specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPin.SubField(System.Int32,System.Int32)">
            <summary>
            Return a sub-field of the bit starting at the
            "start" location and return the number of bits specified by
            the "length".
            </summary>
            <param name="start">Starting index</param>
            <param name="length">Length of returned bit</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPin.SubField64(System.Int32,System.Int32)">
            <summary>
            Returns a sub-feild of the bits start at the "start" location and
            returning the number of bits specified by "length". The total number of
            bits is limited to 64 bits.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPin.SubFields(System.Int32,System.Int32)">
            <summary>
            Iterates through all of the specfied sub-fields.
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPin.SubField64s(System.Int32,System.Int32)">
            <summary>
            Iterates throughall of the specified sub-feilds. 
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.EdgeDirection">
            <summary>
            Indicates the Edge Direction
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeDirection.Rising">
            <summary>
            The edge is rising
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeDirection.Falling">
            <summary>
            The edge is falling
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IEdges">
            <summary>
            Represents Edges
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IEdges.Range(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IEdges.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IEdges.ToString">
            <summary>
            Returns a string representing this edge.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IEdges.FirstEdgeDirection">
            <summary>
            Returns/Sets the direction of the first edge
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IEdges.Rise">
            <summary>
            Accesses only the rising edges.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IEdges.Fall">
            <summary>
            Accesses only the falling edges
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IEdges.Direction">
            <summary>
            Accesses the edge directions
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IWaveformDBDirection">
            <summary>
            This interface is used to define both the horizontal and vertical direction of
            a IWaveformDB.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IWaveformDBDirection.IndexToValue(System.Double)">
            <summary>
            Converts an index into a value (usually time in the Horizontal dimension or volts in the Vertical dimension).
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWaveformDBDirection.ValueToIndex(System.Double)">
            <summary>
            Converts a value into an index.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWaveformDBDirection.Histogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Histogram for this Axis
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Spacing">
            <summary>
            The distance between each element.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Offset">
            <summary>
            The index where value is zero.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Position">
            <summary>
            The user position in divisions.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Units">
            <summary>
            The units for this dimension.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDBDirection.Scale">
            <summary>
            Return the Scale for the Axis
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IWaveformDB">
            <summary>
            Represents a Waveform Database (DPO data)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IWaveformDB.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IWaveformDB.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDB.Horizontal">
            <summary>
            The horizontal axis information.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDB.Vertical">
            <summary>
            The vertical axis information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDB.Item(System.Int64,System.Int64)">
            <summary>
            Gets the DPO value as the specified index.
            </summary>
            <param name="vIndex"></param>
            <param name="hIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDB.SourceName">
            <summary>
            The name of the source file
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWaveformDB.WriteCount">
            <summary>
            AcqCount or Repetative Draw Count
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IHistogramHorizontal">
            <summary>
            Information about the Histogram Horizontal Access.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IHistogramHorizontal.IndexToValue(System.Double)">
            <summary>
            Converts an index into a value (usually time in the Horizontal dimension or volts in the Vertical dimension).
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IHistogramHorizontal.ValueToIndex(System.Double)">
            <summary>
            Converts a value into an index.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IHistogramHorizontal.Count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogramHorizontal.Spacing">
            <summary>
            The distance between each element.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogramHorizontal.ZeroIndex">
            <summary>
            The index where value is zero.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogramHorizontal.Units">
            <summary>
            The units for this dimension.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IHistogram">
            <summary>
            Represents a Histogram. Note: histograms don't need vertical axis information
            since all they hold is a count.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IHistogram.ToString">
            <summary>
            Returns a String containing Mean, Mode, Median and Bin Count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IHistogram.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IHistogram.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Horizontal">
            <summary>
            Gets the information on the Horizontal Access.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Item(System.Int32)">
            <summary>
            Access function for the bins
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Count">
            <summary>
            Returns the number of bins
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Mean">
            <summary>
            Returns the Mean of the Histogram
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Mode">
            <summary>
            Returns the Mode of the Histogram
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Median">
            <summary>
            Returns the Median of the Histogram
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Minimum">
            <summary>
            Returns the smallest value in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Maximum">
            <summary>
            Returns the largest value in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.StandardDeviation">
            <summary>
            Returns the standard deviation of the population
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Units">
            <summary>
            Returns the units associated with the returned valu
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IHistogram.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ISymbolTable">
            <summary>
            Symbol Table Interface
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ISymbolTable.Clear">
            <summary>
            Resets Symbol Table to empty
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ISymbolTable.Item(System.String)">
            <summary>
            Sets/Gets symbols in the table.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ISymbolTable.Names">
            <summary>
            Iterate through symbol names
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ISettings">
            <summary>
            Represents an setting symbol table. This is used to communicate
            configuration information to code modules. This allows single entry points
            for common functions, such as Edge Finding or Decoding Bit Streams, while
            still allowing those functions to be configured at runtime.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Push">
            <summary>
            Saves the current state and creates a new context.
            All subsequent assignment of attribute values will happen in this
            new state. 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Push(System.String)">
            <summary>
            This is the same as Push() which causes the current state to be saved,
            but then evaluates the passed string which is applied to the new state.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Push(Tek.Scope.Support.ISettings)">
            <summary>
            Allow existing IAttribute items to have their contents pushed.
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Pop">
            <summary>
            Deletes all of the current state and restores the previous state. This is
            used to allow "scoping" of attributes.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Evaluate(System.String)">
            <summary>
            This method parses the passed string which should contain one or more name value assignements such
            as "MPCT=50%, LPCT=20%, HPCT=80%"
            </summary>
            <param name="s">Attribute string</param>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.WriteCSV(System.String)">
            <summary>
            Writes the current state to the named CSV file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.ReadCSV(System.String)">
            <summary>
            Reads the named CSV file into the current Attribute state.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Contains(System.String)">
            <summary>
            Returns true if the passed argeument is a keyword
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Contains(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.IsNumericDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and it contains a numeric value.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.IsSymbolDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.IsStringDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and it contains a string value.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.IsObjectDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and the field is not a string or double.
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.IsBooleanDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified boolean field exists
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.GetString(System.String,System.String,System.String)">
            <summary>
            This method returns the string value associated with the specified
            symbol name. If the name does not exist, then the passed default value
            is used.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <param name="defaultValue">Default value, returned if the named symbol does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.GetNumber(System.String,System.String,System.Double)">
            <summary>
            This method returns the number value associated with the specified
            symbol name. If the name does not exist, then the passed default value
            is used.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <param name="defaultValue">Default value, returned if the named symbol does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.GetObject(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Warning(System.String,System.Object[])">
            <summary>
            Adds a warning to the warning list using WriteLine-like
            syntax. Duplicates are rejected.
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:Tek.Scope.Support.ISettings.Copy">
            <summary>
            Copy contents
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ISettings.IsEmpty">
            <summary>
            Returns true if the contents are empty
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ISettings.IsAborting">
            <summary>
            Used to indicate that the current operation should be aborted.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ISettings.UseParallel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ISettings.Warnings">
            <summary>
            Warning String List.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SubFieldStartBit">
            <summary>
            Used in IBits.SubField methods
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SubFieldStartBit.MSB">
            <summary>
            Most significant bit at start position
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SubFieldStartBit.LSB">
            <summary>
            Least signficant bit at start position
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRealResults">
            <summary>
            Holds the results of a real calculation
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRealResults.ToString">
            <summary>
            Returns value as a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IRealResults.Name">
            <summary>
            The name of the calculation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRealResults.Units">
            <summary>
            The units of the calculation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRealResults.Value">
            <summary>
            The Value of the calculation
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ArrayCollectionBase`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.GetAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.SetAt(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="t"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.GetCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.SetCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.AddT(`0)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.CommitT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.ClearT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap Values
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Partition(System.Int32,System.Int32,System.Int32,System.Func{`0,`0,System.Boolean})">
            <summary>
            QuickSort Partition
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.QuickSort(System.Int32,System.Int32,System.Func{`0,`0,System.Boolean})">
            <summary>
            QuickSort (from Wikipedia).
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Sort(System.Func{`0,`0,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Sort">
            <summary>
            Sort values in assending order
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.Tek#Scope#Support#IArrayCollection{T}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ArrayCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ArrayCollectionBase`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ArrayCollectionBase`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IBoolean">
            <summary>
            Represents a boolean return type.
            The instance must be an class instance rather
            than a value instance to work correctly.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IBoolean.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IBoolean.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Boolean">
            <summary>
            A class representing the IBoolean interface.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Boolean.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Boolean.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Boolean.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Boolean.Value">
            <summary>
            Sets/Gets the underlying boolean value.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IString">
            <summary>
            This class is needed to allow string assigment ot 
            a non ref/out variable.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IString.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IString.Append(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Tek.Scope.Support.IString.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IString.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Tek.Scope.Support.IString.ToUpper">
            <summary>
            Converts string to upper case.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.ToLower">
            <summary>
            Converts string to lower case;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.op_Implicit(Tek.Scope.Support.IString)~System.String">
            <summary>
            Implicit cast from IString to string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.op_Addition(Tek.Scope.Support.IString,Tek.Scope.Support.IString)">
            <summary>
            Append operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.op_Addition(System.String,Tek.Scope.Support.IString)">
            <summary>
            Append operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.op_Addition(Tek.Scope.Support.IString,System.String)">
            <summary>
            Append operator
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.SubString(System.Int32,System.Int32)">
            <summary>
            SubString
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.SubString(System.Int32)">
            <summary>
            SubString
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IString.ToString">
            <summary>
            Return string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IString.Contents">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IString.Length">
            <summary>
            Length of string
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IString.Item(System.Int32)">
            <summary>
            Index operator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.ParameterID">
            <exclude/>
             <summary>
             Enumaration used to represent legal types for TekScriptable methods.
             </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.None">
            <summary>
            Error condition
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.Void">
            <summary>
            Void Type
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.INormalizedVector">
            <summary>
            INormalizedVector (scalar waveform)
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IRealResult">
            <summary>
            Double result with units and name.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IWaveformDB">
            <summary>
            Waveform Database.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IEdges">
            <summary>
            Edges
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IBoolean">
            <summary>
            Boolean result.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IResultCollection">
            <summary>
            A collection of results.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IBits">
            <summary>
            A bit or bit stream
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IString">
            <summary>
            A string
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IHistogram">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IDigitalEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IDigitalEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IFastFrame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IPacketCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IPacket">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IPin">
            <summary>
            Represents a Single bit wide Digital bus
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IRangeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IPolygon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IResultCollectionCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.INormalizedVectorEx">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IFastFrameEx">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.ICategorize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ParameterID.IBitsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPoint">
            <summary>
            IPoint 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPoint.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPoint.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPoint.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IRect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IRect.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRect.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IRect.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IRect.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRect.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRect.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRect.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRect.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IRect.Top">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AreaRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AreaRectangle.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AreaRectangle.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AreaRectangle.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaRectangle.Top">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AreaPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AreaPoint.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaPoint.X">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AreaPoint.Y">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPolygon">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Add(Tek.Scope.Support.IPoint)">
            <summary>
            Add Point
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Add(System.Double,System.Double)">
            <summary>
            Add Point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            Returns true if point is in the polygon
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Contains(System.Double,System.Double)">
            <summary>
            Returns true if the point is in the polygon.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Intersect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Intersect(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Hit(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.Offset(System.Double)">
            <summary>
            
            </summary>
            <param name="hoffset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPolygon.ToString">
            <summary>
            Returns a descriptive string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPolygon.Count">
            <summary>
            Returns number of points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPolygon.Item(System.Int32)">
            <summary>
            Gets Point at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPolygon.Bounds">
            <summary>
            Returns a bounding rectangle
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Polygon">
            <summary>
             Area
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Add(System.Double,System.Double)">
            <summary>
            Add Point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Add(Tek.Scope.Support.IPoint)">
            <summary>
            Add Point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Rectangle(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            Add Point
            </summary>
            <param name="topleft"></param>
            <param name="bottomright"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            Is Point Contained in IArea. Implimentation from comp.graphics.algorithms FAQ 2.03. 
            This only works with simple ploygons.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Angle2D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.InsidePolygon(System.Double,System.Double)">
            <summary>
            An alternate test.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.InsidePolygon2(System.Double,System.Double)">
            <summary>
            Is Point Contained in IArea. Implimentation from comp.graphics.algorithms FAQ 2.03. 
            This only works with simple ploygons.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Line Intersection Algorithms based on Darel Rex Finley's public
            domain C function.
            </summary>
            <param name="ax"></param>
            <param name="ay"></param>
            <param name="bx"></param>
            <param name="by"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Intersect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks each line segment in the polygon to 
            see if the specified line itersects it. If there
            is an intersection then true is returned. 
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns>True if intersection occurs, false otherwise</returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Intersect(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Hit(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            Check to see if the line segment made from two successive
            sample points is in the current polygon.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.UpdateMinMax">
            <summary>
            Updates Min/Max info for Bounds
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.Offset(System.Double)">
            <summary>
            
            </summary>
            <param name="hoffset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Polygon.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Polygon.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Polygon.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Polygon.Bounds">
            <summary>
            Returns the rectanglar bounds for the
            current polygon.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IArea">
            <summary>
            IArea 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Add(Tek.Scope.Support.IPolygon)">
            <summary>
            Add Point
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            Is Point Contained in IArea
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Contains(System.Double,System.Double)">
            <summary>
            Is Point Contained in IArea
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Intersect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Intersect(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Hit(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.Offset(System.Double)">
            <summary>
            Creates a new area by adding the passed horizontal
            offset.
            </summary>
            <param name="hoffset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IArea.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IArea.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IArea.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IArea.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Area">
            <summary>
             Area
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Area.Add(Tek.Scope.Support.IPolygon)">
            <summary>
            Add Point
            </summary>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Area.Contains(Tek.Scope.Support.IPoint)">
            <summary>
            Is Point Contained in IArea. Implimentation from comp.graphics.algorithms FAQ 2.03. 
            This only works with simple ploygons.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Contains(System.Double,System.Double)">
            <summary>
            Is Point Contained in IArea. Implimentation from comp.graphics.algorithms FAQ 2.03. 
            This only works with simple ploygons.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Intersect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Intersect(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Hit(Tek.Scope.Support.IPoint,Tek.Scope.Support.IPoint)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.Offset(System.Double)">
            <summary>
            Creates a new area by adding the passed horizontal
            offset.
            </summary>
            <param name="hoffset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Area.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Area.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Area.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Area.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ICategoryItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.IsError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.VUnits">
            <summary>
            Return the vertical units of the underlying value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategoryItem.Histogram">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ICategorize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ICategorize.Add(System.String,Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Tek.Scope.Support.ICategorize.Add(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="sum"></param>
        </member>
        <member name="M:Tek.Scope.Support.ICategorize.AddError(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.ICategorize.IsError(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ICategorize.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ICategorize.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ICategorize.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CategoryItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CategoryItem.#ctor(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.IsError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.VUnits">
            <summary>
            Return the vertical units of the underlying value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CategoryItem.Histogram">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Categorize">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.Add(System.String,Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.Add(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="sum"></param>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.AddError(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.IsError(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Categorize.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.Categorize.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Categorize.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Categorize.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IColor">
            <summary>
            DisplayColor information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IColor.Value">
            <summary>
            Combined Value
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DisplayColor">
            <exclude/>
             <summary>
             A generic color class
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.Parse(System.String)">
            <summary>
            Parse the input string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.FromString(System.String)">
            <summary>
            Lookup by Color Name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.FromString(Tek.Scope.Support.IColor@,System.String)">
            <summary>
            Lookup by Color Name
            </summary>
            <param name="result"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DisplayColor.FromUInt32(System.UInt32)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.G">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Tek#Scope#Support#IColor#Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Value">
            <summary>
            Combined Value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.AliceBlue">
            <summary>
            AliceBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.AntiqueWhite">
            <summary>
            AntiqueWhite
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Aquamarine">
            <summary>
            Aquamarine
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Azure">
            <summary>
            Azure
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Beige">
            <summary>
            Beige
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Bisque">
            <summary>
            Bisque
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BlanchedAlmond">
            <summary>
            BlanchedAlmond
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BlueViolet">
            <summary>
            Blue Violet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BurlyWood">
            <summary>
            BurlyWood
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.CadetBlue">
            <summary>
            CadetBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Chartreuse">
            <summary>
            Chartreuse
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Chocolate">
            <summary>
            Chocolate
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Coral">
            <summary>
            Coral
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.CornflowerBlue">
            <summary>
            CornflowerBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Cornsilk">
            <summary>
            Cornsilk
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Crimson">
            <summary>
            Crimson
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkBlue">
            <summary>
            DarkBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkCyan">
            <summary>
            DarkCyan
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkGoldenrod">
            <summary>
            DarkGoldenrod
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkGray">
            <summary>
            DarkGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkGreen">
            <summary>
            DarkGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkKhaki">
            <summary>
            DarkKhaki
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkMagenta">
            <summary>
            DarkMagenta
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkOliveGreen">
            <summary>
            DarkOliveGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkOrange">
            <summary>
            DarkOrange
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkOrchid">
            <summary>
            DarkOrchid
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkRed">
            <summary>
            DarkRed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkSalmon">
            <summary>
            DarkSalmon
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkSeaGreen">
            <summary>
            DarkSeaGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkSlateBlue">
            <summary>
            DarkSlateBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkSlateGray">
            <summary>
            DarkSlateGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkTurquoise">
            <summary>
            DarkTurquoise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DarkViolet">
            <summary>
            DarkViolet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DeepPink">
            <summary>
            DarkPink
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DeepSkyBlue">
            <summary>
            DeepSkyBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DimGray">
            <summary>
            DimGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.DodgerBlue">
            <summary>
            DodgerBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Firebrick">
            <summary>
            Firebrick
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.FloralWhite">
            <summary>
            FloralWhite
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.ForestGreen">
            <summary>
            ForestGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Fuchsia">
            <summary>
            Fuchsia
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Gainsboro">
            <summary>
            Gainsboro
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.GhostWhite">
            <summary>
            GhostWhite
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Goldenrod">
            <summary>
            Goldenrod
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.GreenYellow">
            <summary>
            GreenYellow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Honeydew">
            <summary>
            Honeydew
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.HotPink">
            <summary>
            HotPink
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.IndianRed">
            <summary>
            IndianRed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Indigo">
            <summary>
            Indigo
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Ivory">
            <summary>
            Ivory
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Khaki">
            <summary>
            Khaki
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Lavender">
            <summary>
            Lavender
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LavenderBlush">
            <summary>
            LavenderBlush
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LawnGreen">
            <summary>
            LawnGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LemonChiffon">
            <summary>
            LemonChiffon
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightBlue">
            <summary>
            LightBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightCoral">
            <summary>
            LightCoral
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightCyan">
            <summary>
            LightCyan
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightGray">
            <summary>
            LightGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightGreen">
            <summary>
            LightGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightPink">
            <summary>
            LightPink
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightSalmon">
            <summary>
            LightSalmon
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightSeaGreen">
            <summary>
            LightSeaGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightSkyBlue">
            <summary>
            LightSkyBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightSlateGray">
            <summary>
            LightSlateGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightSteelBlue">
            <summary>
            LightSteelBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LightYellow">
            <summary>
            LightYellow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.LimeGreen">
            <summary>
            LimeGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Linen">
            <summary>
            Linen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Maroon">
            <summary>
            Maroon
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumAquamarine">
            <summary>
            Medium Aquamarine
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumBlue">
            <summary>
            MediumBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumOrchid">
            <summary>
            MediumOrchid
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumPurple">
            <summary>
            MediumPurple
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumSeaGreen">
            <summary>
            MediumSeaGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumSlateBlue">
            <summary>
            MediumSlateBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumSpringGreen">
            <summary>
            MediumSpringGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumTurquoise">
            <summary>
            MediumTurquoise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MediumVioletRed">
            <summary>
            MediumVioletRed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MidnightBlue">
            <summary>
            MignightBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MintCream">
            <summary>
            MintCream
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.MistyRose">
            <summary>
            MistyRose
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Moccasin">
            <summary>
            Moccasin
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.NavajoWhite">
            <summary>
            NavajoWhite
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Navy">
            <summary>
            Navy
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.OldLace">
            <summary>
            OldLace
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Olive">
            <summary>
            Olive
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.OliveDrab">
            <summary>
            OliveDrab
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.OrangeRed">
            <summary>
            OrangeRed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Orchid">
            <summary>
            Orchid
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PaleGoldenrod">
            <summary>
            PaleGoldenrod
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PaleGreen">
            <summary>
            PaleGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PaleTurquoise">
            <summary>
            PaleTurquoise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PaleVioletRed">
            <summary>
            PaleVioletRed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PapayaWhip">
            <summary>
            PapayaWhip
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PeachPuff">
            <summary>
            PeachPuff
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Peru">
            <summary>
            Peru
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Plum">
            <summary>
            Plum
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.PowderBlue">
            <summary>
            PowderBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.RosyBrown">
            <summary>
            RosyBrown
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.RoyalBlue">
            <summary>
            RoyalBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SaddleBrown">
            <summary>
            SaddleBrown
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Salmon">
            <summary>
            Salmon
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SandyBrown">
            <summary>
            SandyBrown
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SeaGreen">
            <summary>
            SeaGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SeaShell">
            <summary>
            SeaShell
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Sienna">
            <summary>
            Sienna
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SkyBlue">
            <summary>
            SkyBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SlateBlue">
            <summary>
            SlateBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SlateGray">
            <summary>
            SlateGray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Snow">
            <summary>
            Snow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SpringGreen">
            <summary>
            SpringGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.SteelBlue">
            <summary>
            SteelBlue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Tan">
            <summary>
            Tan
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Thistle">
            <summary>
            Thistle
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Tomato">
            <summary>
            Tomato
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Turquoise">
            <summary>
            Turquoise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Violet">
            <summary>
            Violet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.WhiteSmoke">
            <summary>
            WhiteSmoke
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.YellowGreen">
            <summary>
            YellowGreen
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusGrey">
            <summary>
            BusGrey
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusBlue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusCyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusGreen">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusPurple">
            <summary>
            Purple/Lavender
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusRed">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusYellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusBrown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusWhite">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusEdge">
            <summary>
            Medium Gray
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusError">
            <summary>
            Tomato Red
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusWarning">
            <summary>
            Orange
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusHigh">
            <summary>
            Bluish Green
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusLow">
            <summary>
            Big Sky Blue
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayColor.BusUnknown">
            <summary>
            Pink
            used for unknown bus and/or unknown states
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DisplayShapeType">
            <exclude/>
            <summary>
            Display ShapeType.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.VerticalLine">
            <summary>
            Draws a vertical line. Typically used for start/stop fields.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.HexBox">
            <summary>
            A hex box. Used in many serial busses.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.RectBox">
            <summary>
            Used in layered serial busses.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.NoDecode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.SOP">
            <summary>
            Start of Packet
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.EOP">
            <summary>
            End of Packet
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.High">
            <summary>
            A Pin is high
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Low">
            <summary>
            A Pin is Low
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Multi">
            <summary>
            A Pin has had multiple transitions
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Single">
            <summary>
            A Pin with a single transition
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Mark">
            <summary>
            Mark items.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.Bit">
            <summary>
            Bits
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DisplayShapeType.None">
            <summary>
            Not Displayed
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DisplayShape">
            <summary>
            Shape of an field/packet. 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DisplayShape.FromString(System.String)">
            <summary>
            Class Factory that creates a DisplayShapeType from a name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DisplayShape.FromString(Tek.Scope.Support.DisplayShapeType@,System.String)">
            <summary>
            Creates a DisplayShapeType from a name.
            </summary>
            <param name="shape"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Nodecode">
            <summary>
            Class Factory for a Verical Line shape (like start/stop in I2C).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.VerticalLine">
            <summary>
            Class Factory for a Verical Line shape (like start/stop in I2C).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.RectBox">
            <summary>
            Class Factory for a Rectangle.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.HexBox">
            <summary>
            Class Factory for a Hex Box (used by most decoders)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.SOP">
            <summary>
            Class Factory for a SOP (Start of packet)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.EOP">
            <summary>
            Class Factory for a EOP (End of packet)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.High">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Low">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Multi">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Single">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.Mark">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayShape.None">
            <summary>
            Class Factory for No defined shape.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IDisplay">
            <exclude/>
            <summary>
            Information used by Display to decide how to
            render the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDisplay.ForegroundColor">
            <summary>
            Foreground color for the shape.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDisplay.ShapeType">
            <summary>
            ShapeType of the field.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IDisplayEx">
            <summary>
             Add support for text color
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RadixType">
            <summary>
            Radix Type: how a packet's or field's value is viewed
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.None">
            <summary>
            no radix specified.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.Mixed">
            <summary>
            Default value for the item.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.Decimal">
            <summary>
            Display numbers in Decimal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.Hex">
            <summary>
            Display numbers as Hex
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.Ascii">
            <summary>
            Display numbers as ASCII
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.RadixType.Binary">
            <summary>
            Display numbers as Binary
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FormatMaskPreassigned">
            <summary>
            FormatMaskPreassigned: preassigned mask bits
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatMaskPreassigned.Packet">
            <summary>
            BusForm: traverse as packets (instead of fields)
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Display">
            <exclude/>
            <summary>
            Heap implmentation of IDisplay.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Display.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Display.#ctor(Tek.Scope.Support.DisplayColor,Tek.Scope.Support.DisplayShapeType)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="shape"></param>
        </member>
        <member name="M:Tek.Scope.Support.Display.#ctor(Tek.Scope.Support.DisplayColor,Tek.Scope.Support.DisplayColor,Tek.Scope.Support.DisplayShapeType)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="textcolor"></param>
            <param name="shape"></param>
        </member>
        <member name="M:Tek.Scope.Support.Display.ToString">
            <summary>
            Formatted string. Helps with the display in of 
            this information in the debugger.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Display.ForegroundColor">
            <summary>
            Sets/Gets the color to display this field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Display.ShapeType">
            <summary>
            Gets/sets the shape to render the field.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FormatStyleType">
            <summary>
            Format Style Type: how a packet or field is formatted
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatStyleType.Long">
            <summary>
            The long version
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatStyleType.Short">
            <summary>
            The short version
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatStyleType.LongNoLabel">
            <summary>
            The long version with no field names
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldFlags">
            <summary>
            This field is used to identify the type of field.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FieldFlags.Normal">
            <summary>
            A typical field
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FieldFlags.Derived">
            <summary>
            A field that is constructed from
            information in a packet rather than 
            strictly representing the underlying data.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FieldFlags.Packet">
            <summary>
            This is the field information assocated at the 
            packet level.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IField">
            <summary>
            Base Field Type that us used by IPacket/IPacketCollection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IField.ToString">
            <summary>
            Default formatted string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IField.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IField.ToStrings">
            <summary>
            Allows other formatting (Long and Short).  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IField.Add(Tek.Scope.Support.IField)">
            <summary>
            Add Field Item. This feature may not be supported
            in all contexts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.IField.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IField.DecoderName">
            <summary>
            Decoder Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.BusName">
            <summary>
            Name of the bus associated with this field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Parent">
            <summary>
            Pointer to the parent (either IPacket or IPacketCollection)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.FullName">
            <summary>
            Full name incluing heirarchy if approprate.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.StartTime">
            <summary>
            StartTime of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.StopTime">
            <summary>
            End time of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Data">
            <summary>
            TestData for the field (null if no data is available).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Attribute">
            <summary>
            Additional info about the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Value">
            <summary>
            The Least Significant 64 bits of the underlying data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IField.Radix">
            <summary>
            Global Radix
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IFieldEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldEx.Root">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldBase">
            <summary>
            Base Implementation of IField
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.#ctor(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Add(Tek.Scope.Support.IField)">
            <summary>
            Add Field Item. This feature may not be supported
            in all contexts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Equals(Tek.Scope.Support.IField)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.GetHashCode">
            <summary>
            
                                Serves as a hash function for a particular type. 
                            
            </summary>
            
            <returns>
            
                                A hash code for the current <see cref="T:System.Object" />.
                            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.ToStrings">
            <summary>
            Allows other formatting (Long and Short).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.DecoderName">
            <summary>
            Decoder Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.BusName">
            <summary>
            Name of the bus associated with this field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Name">
            <summary>
            Name of the decoder field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Tek#Scope#Support#IRangeEx#Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Tek#Scope#Support#IFieldEx#Root">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Radix">
            <summary>
            Sets/Gets the Radix of the Field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.SymbolSubstitutions">
            <summary>
            Sets/Gets the Radix of the Field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.StartTime">
            <summary>
            Field start time.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.StopTime">
            <summary>
            Field stop time.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Data">
            <summary>
            Underlying data for the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Attribute">
            <summary>
            Additional information (often used for to indicate things like Read/Write)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Display">
            <summary>
            Returns display info.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Field">
            <summary>
            Implementation of IField with
            support for Symbol Substitution.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Field.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Field.#ctor(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.Field.#ctor(System.Double,System.Double,System.String,System.String,Tek.Scope.Support.IBits,System.Boolean,System.String,System.Boolean,System.String,Tek.Scope.Support.IDisplay)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="name"></param>
            <param name="attr"></param>
            <param name="data"></param>
            <param name="iserror"></param>
            <param name="errorMsg"></param>
            <param name="iswarning"></param>
            <param name="warnMsg"></param>
            <param name="d"></param>
        </member>
        <member name="M:Tek.Scope.Support.Field.#ctor(System.Double,System.Double,System.Double,System.String,System.String,Tek.Scope.Support.IBits,System.Boolean,System.String,System.Boolean,System.String,Tek.Scope.Support.IDisplay)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="focus"></param>
            <param name="name"></param>
            <param name="attr"></param>
            <param name="data"></param>
            <param name="iserror"></param>
            <param name="errorMsg"></param>
            <param name="iswarning"></param>
            <param name="warnMsg"></param>
            <param name="d"></param>
        </member>
        <member name="M:Tek.Scope.Support.Field.#ctor(System.Double,System.Double,System.Double,System.String,System.String,System.String,Tek.Scope.Support.IBits,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="focus"></param>
            <param name="name"></param>
            <param name="packetname"></param>
            <param name="attr"></param>
            <param name="data"></param>
            <param name="iserror"></param>
            <param name="errorMsg"></param>
            <param name="iswarning"></param>
            <param name="warnMsg"></param>
        </member>
        <member name="M:Tek.Scope.Support.Field.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Field.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Field.Equals(Tek.Scope.Support.IField)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Field.GetHashCode">
            <summary>
            
                                Serves as a hash function for a particular type. 
                            
            </summary>
            
            <returns>
            
                                A hash code for the current <see cref="T:System.Object" />.
                            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.Field.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Field.PacketName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Field.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Field.Display">
            <summary>
            Returns display info.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Field.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldCopy">
            <exclude/>
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Add(Tek.Scope.Support.IField)">
            <summary>
            Add Field Item. This feature may not be supported
            in all contexts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.ToStrings">
            <summary>
            Allows other formatting (Long and Short).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Equals(Tek.Scope.Support.IField)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.GetHashCode">
            <summary>
            
                                Serves as a hash function for a particular type. 
                            
            </summary>
            
            <returns>
            
                                A hash code for the current <see cref="T:System.Object" />.
                            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FieldCopy.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.FormatStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.FormatMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Radix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.DecoderName">
            <summary>
            Decoder Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.BusName">
            <summary>
            Name of the bus associated with this field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Tek#Scope#Support#IRangeEx#Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Parent">
            <summary>
            Pointer to the parent (either IPacket or IPacketCollection)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Tek#Scope#Support#IFieldEx#Root">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.FullName">
            <summary>
            Full name incluing heirarchy if approprate.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.StartTime">
            <summary>
            StartTime of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.StopTime">
            <summary>
            End time of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Data">
            <summary>
            TestData for the field (null if no data is available).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Attribute">
            <summary>
            Additional info about the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Value">
            <summary>
            The Least Significant 64 bits of the underlying data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldCopy.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPacket">
            <summary>
            A packet which contains multiple fields
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.FieldsOfName(System.String)">
            <summary>
            Returns the data associated with a field name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.FieldCount(System.String)">
            <summary>
            Returns the count of the number of fields with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.Field(System.String)">
            <summary>
            Returns the data from this field.
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.Commit">
            <summary>
            PacketBase is completly Filled out
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.ToString(System.String,Tek.Scope.Support.FormatStyleType)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.ToString(System.String,Tek.Scope.Support.FormatStyleType,Tek.Scope.Support.RadixType,System.UInt64)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <param name="radix"></param>
            <param name="formatMask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.ToStrings(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.Sort">
            <summary>
            Puts fields in time order. 
            Avoid calling this is possible.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacket.FieldCountExceeds(System.String,System.Int32)">
            <summary>
            Returns true if number if matching fields > count.
            </summary>
            <param name="fieldname"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.Count">
            <summary>
            The number of fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.Fields">
            <summary>
            Enumerates all fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.FieldNames">
            <summary>
            Enumerate through the packet's field names.  Each name is only given once.
            
            If the decoder has an appropriate SymbolFile the field names are enumerated
            in column order provided the field name exists within the packet. If the decoder
            does not have a SymbolFile entry then the field names are enumerated in the order
            they occur in the packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.ContainsError">
            <summary>
            Returns true if Packet or Field within is Error, false otherwise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacket.ContainsWarning">
            <summary>
            Returns true if Packet or Field within is Warning, false otherwise
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPacketEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketEx.Contains(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketEx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.PacketBase">
            <summary>
            Base implimentation of IPacket. It is intended to be derived from to 
            create a Packet implimentation. Don't use this class directly.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketBase._index">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ExtractFieldInfoString(System.String,System.Boolean,System.String,System.String@,System.Int32@,System.String@,System.String@)">
            <summary>
            Helper method to ErrorWarningInfo to extract a field's error or warning string and 
            adds it to the infoString object given.
            </summary>
            <param name="fieldName">Name of the field being added</param>
            <param name="fieldError">Does the field have error or warning?</param>
            <param name="fieldInfoString">Error or warning for the field</param>
            <param name="infoString">Current info string</param>
            <param name="count">Number of previous matching error/warning strings</param>
            <param name="previousName">Previous error/warning field name found</param>
            <param name="previousInfo">Previous error/warning info string found</param>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.AddFieldInfoTail(System.String,System.Int32,System.String,System.String)">
            <summary>
            Helper method to ErrorWarningInfo to assist in putting together the error/warning string.
            </summary>
            <param name="s"></param>
            <param name="count"></param>
            <param name="previousName"></param>
            <param name="previousInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToString(System.String,Tek.Scope.Support.FormatStyleType)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToString(System.String,Tek.Scope.Support.FormatStyleType,Tek.Scope.Support.RadixType,System.UInt64)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <param name="radix"></param>
            <param name="formatMask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToStrings(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Sort">
            <summary>
            Puts fields in time order. 
            Avoid calling this is possible.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IRangeEx#ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.RangeToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IPacketEx#ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.PacketToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.FieldCountExceeds(System.String,System.Int32)">
            <summary>
            Returns true if number of matching fields > count.
            </summary>
            <param name="fieldname"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToStrings">
            <summary>
            Allows other formatting (Long and Short).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IFieldEx}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IFieldEx}#Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Contains(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Add(Tek.Scope.Support.IField)">
            <summary>
            Adds an IField
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.FieldsOfName(System.String)">
            <summary>
            Find Fields of the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.FieldCount(System.String)">
            <summary>
            Returns the count of the number of fields with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Contains(System.String)">
            <summary>
            Checks to see if field name exists
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Field(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Commit">
            <summary>
            PacketBase is completly Filled out
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Equals(Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.Equals(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketBase.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.ErrorWarningInfo">
            <summary>
            Text description of the error/warning for packet or fields within the packet.
            The order is:
                1) Check packet for error.
                2) Check fields for error.
                3) Check packet for warning.
                4) Check fields for warning.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Display">
            <summary>
            Display information - this handles both the case where data is copied (or set directly)
            and when it's connected to a bus formatter by a decoder.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.DecoderName">
            <summary>
            Decoder Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.BusName">
            <summary>
            Name of the bus associated with this field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IRangeEx#Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IFieldEx#Root">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Radix">
            <summary>
            Sets/Gets the Radix of the Field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.StartTime">
            <summary>
            StartTime of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.StopTime">
            <summary>
            End time of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Data">
            <summary>
            TestData for the field (null if no data is available).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Attribute">
            <summary>
            Additional info about the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Value">
            <summary>
            The Least Significant 64 bits of the underlying data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Count">
            <summary>
            The number of fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IFieldEx}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IFieldEx}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IPacket#Fields">
            <summary>
            Enumerates all fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Fields">
            <summary>
            Enumerate Fieldss
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.ContainsError">
            <summary>
            Returns true if Packet or Field within is Error, false otherwise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.ContainsWarning">
            <summary>
            Returns true if Packet or Field within is Warning, false otherwise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.FieldNames">
            <summary>
            Enumerate through the packet's field names.  Each name is only given once.
            
            If the decoder has an appropriate SymbolFile the field names are enumerated
            in column order provided the field name exists within the packet. If the decoder
            does not have a SymbolFile entry then the field names are enumerated in the order
            they occur in the packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Packet">
            <summary>
            Implementation of IPacket.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Packet.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Packet.#ctor(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.Packet.Compare(Tek.Scope.Support.IField,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Packet.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Packet.Add(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Tek.Scope.Support.Packet.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Packet.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.IDisplayInfo">
            <exclude/>
             <summary>
             
             </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDisplayInfo.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDisplayInfo.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IDisplayInfo.Display">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DisplayInfo">
            <exclude/>
             <summary>
             
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.DisplayInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.DisplayInfo.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayInfo.Attribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DisplayInfo.Display">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FormatType">
            <summary>
            Format Type.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatType.Standard">
            <summary>
            Use ToString.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatType.Time">
            <summary>
            Use Special Time.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FormatType.TimeDelta">
            <summary>
            Use Special Time Delta.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IFieldInfo">
            <summary>
            Returns info about a field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.Name">
            <summary>
            Name given to Field or Property.  Might be used as Column
            name in a grid.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.IsField">
            <summary>
            True if Field, False if Packet property.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.FieldName">
            <summary>
            Name of Field or Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.Format">
            <summary>
            How to format Field or Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.Radix">
            <summary>
            Column specific Radix
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.FormatMask">
            <summary>
            Column specific Format Mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.IsHidden">
            <summary>
            True if Hidden, False otherwise.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IFieldInfo.IsDetail">
            <summary>
            True if Detail view, False otherwise.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FieldInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.Name">
            <summary>
            Name given to Field or Property.  Might be used as Column
            name in a grid.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.IsField">
            <summary>
            True if Field, False if Packet property.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.FieldName">
            <summary>
            Name of Field or Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.Format">
            <summary>
            How to format Field or Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.Radix">
            <summary>
            Column specific Radix
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.FormatMask">
            <summary>
            Column specific Format Mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.IsHidden">
            <summary>
            True if Hidden, False otherwise.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FieldInfo.IsDetail">
            <summary>
            True if Detail view, False otherwise.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolFlags">
            <summary>
            Symbol Flags: ways a packet's or field's contents will be mapped and/or formatted
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolFlags.Symbols">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolFlags.Annotations">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolFlags.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPacketCollection">
            <summary>
            The base decoder interface
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.Find(System.Double)">
            <summary>
            Returns a Packet for the given time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.TimeToIndex(System.Double)">
            <summary>
            Returns the index of the packet at the specified time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.FindTraceIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.Add(Tek.Scope.Support.IPacket)">
            <summary>
            Add a new IPacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.Commit">
            <summary>
            DecoderBase is completly written.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollection.CopyRange(System.Int32,System.Int32)">
            <summary>
            Copies the specified range into a new IPacketCollection.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.BusName">
            <summary>
            Name of the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.BusLabel">
            <summary>
            Label associated with the bus.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.DecoderName">
            <summary>
            Name of the decoder.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.StartTime">
            <summary>
            Start time of the first field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.StopTime">
            <summary>
             Start time of the last field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.Radix">
            <summary>
            Global Radix
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.FieldInfo">
            <summary>
            Returns info about the fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.DisplayInfo">
            <summary>
            Field info.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.Count">
            <summary>
            Number of IPacketCollection.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.Item(System.Int64)">
            <summary>
            Get/Set underlying data
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.Packets">
            <summary>
            Enumerates through Packets
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollection.Fields">
            <summary>
            Enumerates all fields.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IPacketCollectionEx">
            <summary>
            This is an update to IPacketCollection to Add IRangeCollection support
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.DeleteAt(System.Int32)">
            <summary>
            Delete at a specific location
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.InsertAt(System.Int32,Tek.Scope.Support.IPacket)">
            <summary>
            Insert at a specific location
            </summary>
            <param name="index"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.CopyRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IPacketCollectionEx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollectionEx.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollectionEx.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollectionEx.Item(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollectionEx.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IPacketCollectionEx.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketRange.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.PacketRange.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketRange.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketRange.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketRange.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.HUnits">
            <summary>
            Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketRange.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketCollectionBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionBase.m_offsets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionBase.m_symbols">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionBase._format">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Initialize">
            <summary>
            Must be called by any derived classes
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.CreatorInitialize">
            <summary>
            This initialization should only happen when the object is first 
            created.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IField}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IPacketCollectionEx#CopyRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.RangeItem(System.Int32,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Find(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#TimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToStrings">
            <summary>
            Allows other formatting (Long and Short).  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Add(Tek.Scope.Support.IField)">
            <summary>
            Add Field Item
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetIsError">
            <summary>
            Needs to be overridden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.SetIsError(System.Boolean)">
            <summary>
            Needs to be overridden
            </summary>
            <param name="bIsError"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetErrorInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.SetErrorInfo(System.String)">
            <summary>
            
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetIsWarning">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.SetIsWarning(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bIsWarning"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetWarningInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.SetWarningInfo(System.String)">
            <summary>
            
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToString(System.String)">
            <summary>
            Allows a string to be formatted out of the underlying data.
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToStringShort">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.DisposeManaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.DisposeUnmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindStartIndex(Tek.Scope.Support.IRange,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindFieldStartIndex(Tek.Scope.Support.IRange,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindFieldStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindFieldEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Needlessly slow, need to fix this
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.TimeToIndex(System.Double)">
            <summary>
            Returns the index of the packet at the specified time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IPacket}#FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IPacket}#Find(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IPacket}#TimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Add(Tek.Scope.Support.IPacket)">
            <summary>
            Add a new IPacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.UpdateError(Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Find(System.Double)">
            <summary>
            Returns a Packet for the given time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindPacketIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Given the specified time, this method returns the packet indexes 
            within the time range.
            </summary>
            <param name="range"></param>
            <param name="startPacketIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Commit">
            <summary>
            DecoderBase is completly written.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.InsertAt(System.Int32,Tek.Scope.Support.IPacket)">
            <summary>
            Insert at location (not implimented)
            </summary>
            <param name="index"></param>
            <param name="packet"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.CopyRange(System.Int32,System.Int32)">
            <summary>
            Copies the specified range into a new IPacketCollection.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindFieldIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Given the specified time, this method returns the field indexes 
            within the time range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindTraceIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Given the specified time, this method returns the field indexes 
            within the time range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.EstimatedFieldIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldTimeToIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldStartTime(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldFocusTime(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindFieldIndex(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldGetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldSetAt(System.Int64,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="field"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.MaxCount(System.String)">
            <summary>
            Finds the maximum number of occurances for the specified field name.
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.GetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.SetAt(System.Int64,Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.StartTimeAtIndex(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.StartStopFocusAtIndex(System.Int64,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="starttime"></param>
            <param name="stoptime"></param>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FieldStartStopFocusAtIndex(System.Int64,System.Double@,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="starttime"></param>
            <param name="stoptime"></param>
            <param name="focus"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FocusTimeAtIndex(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindIndex(System.Double,System.Int64,System.Int64,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="rangeTime"> </param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindIndexFocusTime(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindIndexStartTime(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.FindIndexStopTime(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Lookup(System.Int64)">
            <summary>
             
             </summary>
             <param name="offset"></param>
             <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Lookup(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.AddSymbol(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Add(System.Object)">
            <summary>
                                Adds an item to the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
                                The position into which the new element was inserted.
            </returns>
            <param name="value">
                                The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. 
                            </param>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.IList" /> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList" /> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Contains(System.Object)">
            <summary>
                                Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.
            </returns>
            <param name="value">
                                The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.IndexOf(System.Object)">
            <summary>
                                Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.
            </summary>
            <returns>
                                The index of <paramref name="value" /> if found in the list; otherwise, -1.
            </returns>
            <param name="value">
                                The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Insert(System.Int32,System.Object)">
            <summary>
                                Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.
            </summary>
            <param name="index">
                                The zero-based index at which <paramref name="value" /> should be inserted. 
                            </param>
            <param name="value">
                                The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. 
                            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.IList" /> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList" /> has a fixed size. 
                            </exception>
            <exception cref="T:System.NullReferenceException"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Remove(System.Object)">
            <summary>
                                Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">
                                The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. 
                            </param>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.IList" /> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList" /> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.RemoveAt(System.Int32)">
            <summary>
                                Removes the <see cref="T:System.Collections.IList" /> item at the specified index.
            </summary>
            <param name="index">
                                The zero-based index of the item to remove. 
                            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The <see cref="T:System.Collections.IList" /> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList" /> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Format(System.String,Tek.Scope.Support.DescriptionStyleType,Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="type"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Format(System.String,Tek.Scope.Support.DescriptionStyleType,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="type"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IRangeCollection#CopyRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionBase.DeleteAt(System.Int32)">
            <summary>
            Delete at specified location (not currently supported)
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#Count">
            <summary>
            Returns/Sets the number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Fields">
            <summary>
            Enumerates all fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Attribute">
            <summary>
            Additional info about the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Value">
            <summary>
            The Least Significant 64 bits of the underlying data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.BusName">
            <summary>
            Name of the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.BusLabel">
            <summary>
            Label associated with the bus.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IField#BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.DecoderName">
            <summary>
            Name of the decoder.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FormatDescription">
            <summary>
            Contains format string
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Parent">
            <summary>
            Pointer to the parent (either IPacket or IPacketCollection)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FullName">
            <summary>
            Full name incluing heirarchy if approprate.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.StartTime">
            <summary>
            Start time of the first field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.StopTime">
            <summary>
             Start time of the last field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FieldInfo">
            <summary>
            Returns info about the fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.DisplayInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Data">
            <summary>
            TestData for the field (null if no data is available).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Count">
            <summary>
            Number of IPacketCollection.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Item(System.Int64)">
            <summary>
            Get/Set underlying data
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Packets">
            <summary>
            Enumerates through Packets
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Radix">
            <summary>
            Global Radix
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IRangeCollection#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.System#Collections#ICollection#Count">
            <summary>
                                Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
                                The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.SyncRoot">
            <summary>
                                Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
                                An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.IsSynchronized">
            <summary>
                                Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Tek#Scope#Support#IPacketCollectionEx#Item(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.System#Collections#IList#Item(System.Int32)">
            <summary>
                                Gets or sets the element at the specified index.
            </summary>
            <returns>
                                The element at the specified index.
            </returns>
            <param name="index">
                                The zero-based index of the element to get or set. 
                            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. 
                            </exception>
            <exception cref="T:System.NotSupportedException">
                                The property is set and the <see cref="T:System.Collections.IList" /> is read-only. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.IsReadOnly">
            <summary>
                                Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.IsFixedSize">
            <summary>
                                Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketCollection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollection.symbolsBuilt">
            <summary>
            True if symbol substitution is setup
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.BuildSymbolSubstitution(System.String)">
            <summary>
            Sets up symbol substitution if not already setup
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.GetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.SetAt(System.Int64,Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Add(Tek.Scope.Support.IPacket)">
            <summary>
            Add a new IPacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.FieldGetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.FieldSetAt(System.Int64,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="field"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Commit">
            <summary>
            DecoderBase is completly written.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.BusName">
            <summary>
            Name of the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.BusLabel">
            <summary>
            Label of the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.DecoderName">
            <summary>
            Name of the decoder.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.StartTime">
            <summary>
            Start time of the first field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.StopTime">
            <summary>
             Start time of the last field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.Count">
            <summary>
            Number of IPacketCollection.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollection.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketMerge">
            <summary>
            Wraps (rather than copies) an IPacket. This is used
            by PacketCollectionMerge to allow packet indexs to appear to 
            be updated without changing the underlying packet info.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.#ctor(Tek.Scope.Support.IPacket,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="p"></param>
            <param name="index"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.FieldsOfName(System.String)">
            <summary>
            Returns the data associated with a field name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.FieldCount(System.String)">
            <summary>
            Returns the count of the number of fields with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Field(System.String)">
            <summary>
            Returns the data from this field.
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Commit">
            <summary>
            PacketBase is completly Filled out
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToString(System.String,Tek.Scope.Support.FormatStyleType)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToString(System.String,Tek.Scope.Support.FormatStyleType,Tek.Scope.Support.RadixType,System.UInt64)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <param name="type"></param>
            <param name="radix"></param>
            <param name="formatMask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToStrings(System.String)">
            <summary>
            
            </summary>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Sort">
            <summary>
            Puts feilds in time order. 
            Avoid calling this is possible.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.FieldCountExceeds(System.String,System.Int32)">
            <summary>
            Returns true if number if matching fields > count.
            </summary>
            <param name="fieldname"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToString(Tek.Scope.Support.FormatStyleType)">
            <summary>
            Allows other formatting.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.ToStrings">
            <summary>
            Allows other formatting (Long and Short).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Add(Tek.Scope.Support.IField)">
            <summary>
            Add Field Item. This feature may not be supported
            in all contexts.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.Copy">
            <summary>
            Makes a standalone copy of a field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PacketMerge.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.DecoderName">
            <summary>
            Decoder Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.PacketName">
            <summary>
            Name of the Packet
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.BusName">
            <summary>
            Name of the bus associated with this field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.BusLabel">
            <summary>
            The Label associated with the bus
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Index">
            <summary>
            Index of field in packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Parent">
            <summary>
            Pointer to the parent (either IPacket or IPacketCollection)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Root">
            <summary>
            Returns top-level IPacketCollection object
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Flags">
            <summary>
            Field Type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.FullName">
            <summary>
            Full name incluing heirarchy if approprate.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.StartTime">
            <summary>
            StartTime of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.StopTime">
            <summary>
            End time of the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Data">
            <summary>
            TestData for the field (null if no data is available).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Attribute">
            <summary>
            Additional info about the field.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Count">
            <summary>
            The number of fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IPacket#Fields">
            <summary>
            Enumerates all fields.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Fields">
            <summary>
            Enumerate Fields
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.FieldNames">
            <summary>
            Enumerate through the packet's field names.  Each name is only given once.
            
            If the decoder has an appropriate SymbolFile the field names are enumerated
            in column order provided the field name exists within the packet. If the decoder
            does not have a SymbolFile entry then the field names are enumerated in the order
            they occur in the packet.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IPacket#IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IPacket#ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IPacket#IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IPacket#WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.ContainsError">
            <summary>
            Returns true if Packet or Field within is Error, false otherwise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.ContainsWarning">
            <summary>
            Returns true if Packet or Field within is Warning, false otherwise
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IField#IsError">
            <summary>
            Returns true if the field is an error (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IField#ErrorInfo">
            <summary>
            Text description of the error (if there is an error)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IField#IsWarning">
            <summary>
            Returns true if the field is an warning (false otherwise).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IField#WarningInfo">
            <summary>
            Text description of the warning 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Value">
            <summary>
            The Least Significant 64 bits of the underlying data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.SymbolSubstitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.FormatStyle">
            <summary>
            Sets global formatting style
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.FormatMask">
            <summary>
            Sets global formatting mask
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Radix">
            <summary>
            Global Radix
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketMerge.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IField}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketCollectionMerge">
            <summary>
            Used to merge multiple packet collections into one larger
            packet collection.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.#ctor(Tek.Scope.Support.IPacketCollection[])">
            <summary>
            Merge Constructor
            </summary>
            <param name="collections"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.PacketTime(System.Int32[])">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FieldTime(System.Int32[])">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.CompareTo(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.SortPackets">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.SortFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Add(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Add PacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Add(Tek.Scope.Support.IPacket)">
            <summary>
            Add a new IPacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Commit">
            <summary>
            DecoderBase is completly written.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FieldGetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FieldStartTime(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FieldFocusTime(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.StartTimeAtIndex(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FocusTimeAtIndex(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.FieldSetAt(System.Int64,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="field"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.GetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionMerge.SetAt(System.Int64,Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.Collections">
            <summary>
            Last of included IPacketCollections
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.Count">
            <summary>
            Number of IPacketCollection.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PacketCollectionMerge.FieldInfo">
            <summary>
            Returns info about the fields from first collection.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DigitalEvent">
            <exclude/>
             <summary>
             This is a simple value implementation of IDigitalEvent.
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.Parse(System.String)">
            <summary>
            Parses a string and returns an IDigitalEvent. 
            </summary>
            <param name="s">String representing a DigitalEvent</param>
            <returns>IDigitalEvent equivalent of the input string.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.CompareTo(Tek.Scope.Support.DigitalEvent)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.ToString">
            <summary>
            Returns Binary string.
            </summary>
            <returns>String representation of the DigitalEvent</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this type
            </summary>
            <returns>A BitValue enuerator is returned.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns>INumerator is returned.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvent.Equals(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Compares another IDigitalEvent for equality.
            </summary>
            <param name="other">The other item to compare.</param>
            <returns>True if the items have the same value, false otherwise. Please note that time is not included in this comparison.</returns>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvent.Time">
            <summary>
            Sets/Gets Time that the event occurred.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvent.Value">
            <summary>
            Returns bit value for the event.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvent.NumBits">
            <summary>
            Returns the number of bits in the event.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvent.Transition">
            <summary>
            Returns one if Multiple transitions occurred on this bit
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvent.Item(System.Int32)">
            <summary>
            Value Indexer.
            </summary>
            <param name="index">Bit index.</param>
            <returns>Returns the BitValue for the specified bit in the event.</returns>
        </member>
        <member name="T:Tek.Scope.Support.DigitalEventsBase">
            <summary>
            Abstract Class implementation of IDigitalEvents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Find(Tek.Scope.Support.IRange)">
            <summary>
            Return an IDigitalEvent for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Find(Tek.Scope.Support.IDigitalEvents@,Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Add(System.Double,System.UInt64)">
            <summary>
            Adds a new element to the end. This method assumes that the 
            Transition bits are all zero.
            </summary>
            <param name="time">Event Time</param>
            <param name="bits">The Event values.</param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Adds a new element to the end.
            </summary>
            <param name="time">Event Time</param>
            <param name="bits">The Event values</param>
            <param name="trans">The transition bits.</param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Adds a new element to the end.
            </summary>
            <param name="e">The event to add.</param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.RemoveAll">
            <summary>
            Removes all events
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.TimeAtIndex(System.Int64)">
            <summary>
            Returns the time at the specified index
            </summary>
            <param name="index">Index to return</param>
            <returns>The time value at the specified index.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.IndexAtTime(System.Double)">
            <summary>
            Returns the index at the specified time.
            </summary>
            <param name="t">The time to find.</param>
            <returns>The index that is less than or equal to the specified time.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Sort">
            <summary>
            Impliments a Shell Sort.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this type
            </summary>
            <returns>IDigitalEvent enumerator.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Equals(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            Compares another IDigitalEvents for equality.
            </summary>
            <param name="other">The item to IDigitalEvents collection to compare.</param>
            <returns>true if the collections are indentical, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.UnmanagedDispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.ManagedDispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsBase.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.ContainsTransitionEvents">
            <summary>
            This returns whether the collection contains transitions
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.SampleInterval">
            <summary>
            Sample Interval value. This is only used to recreate sampled file.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.StartTime">
            <summary>
            Returns start time for the digital waveform. Note this can occur before the time in the first item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.StopTime">
            <summary>
            Returns the stop time for the digital waveform. Note this can occur after the time in the last item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Name">
            <summary>
            The source name of the Digital Events.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.NumBits">
            <summary>
            Returns the number of bits per event.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Item(System.Int64)">
            <summary>
            The digital event at the specified index
            </summary>
            <param name="index">Index of the event</param>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEventsBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DigitalEvents">
            <summary>
            Digital Events 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.#ctor(System.Int32)">
            <summary>
            Constructor. The argument "shift" is the power of 2
            to be used for the chunk size. The default is 8 which is ideal
            for smaller event collections. Larger items should probably use 
            a count of 12 or 13.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.#ctor(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            Constructor. 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.RemoveAll">
            <summary>
            Remove All of the underlying data.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Adds a new item.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.Commit">
            <summary>
            Commits changes.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.ManagedDispose">
            <summary>
            Called during a dispose.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEvents.Sort">
            <summary>
            Sorts in time assending order.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.SampleInterval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.Item(System.Int64)">
            <summary>
            Accesses each element in DigitalEvents
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.DigitalEvents.Count">
            <summary>
            Accesses the number of elements
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RisingFallingCollection">
            <summary>
            Used to return edges based on offset and interleaving.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.#ctor(Tek.Scope.Support.IEdges,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="edge"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.ToArray">
            <summary>
            Return array of the underlying elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Add(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Tek#Scope#Support#IArrayCollection{System#Double}#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Tek#Scope#Support#IArrayCollection{System#Double}#Sort(System.Func{System.Double,System.Double,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Tek#Scope#Support#IArrayCollection{System#Double}#Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.RisingFallingCollection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RisingFallingCollection.Offset">
            <summary>
            Returns/Sets the offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RisingFallingCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RisingFallingCollection.Count">
            <summary>
            Returns the number of elements avalable
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Contains(Tek.Scope.Support.EdgeDirection)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Add(Tek.Scope.Support.EdgeDirection)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#EdgeDirection}#Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#EdgeDirection}#Sort(System.Func{Tek.Scope.Support.EdgeDirection,Tek.Scope.Support.EdgeDirection,System.Boolean})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#EdgeDirection}#Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.DirectionCollection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.EdgesBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Clear">
            <summary>
            Resets the collection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IResultCollection#GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.GetTimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.BinarySearch(System.Double,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="v"></param>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.RangeStartIndex(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IResultCollection#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Range(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IEdges#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IResultCollection#ToArray">
            <summary>
            Returns values (if compatible with a double) as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Commit">
            <summary>
            Tells the underlying class(es)
            that this set of changes is complete.
            This allows any housekeeping associated with
            a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IResult}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.CalcStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EdgesBase.GetHashCode">
            <summary>
            Required to stop compiler nagging
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.VUnits">
            <summary>
            Return the vertical units of the underlying value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Name">
            <summary>
            A name used to identify the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.FirstEdgeDirection">
            <summary>
            Returns/Sets the direction of the first edge
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Rise">
            <summary>
            Accesses only the rising edges.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Fall">
            <summary>
            Accesses only the falling edges
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Direction">
            <summary>
            Accesses the edge directions
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Edges">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Edges.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Edges.#ctor(System.Double[],Tek.Scope.Support.EdgeDirection)">
            <summary>
            Constructor Taking an Edge array and the starting direction
            </summary>
            <param name="edges"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Tek.Scope.Support.Edges.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Edges.Clear">
            <summary>
            Resets the collection
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Edges.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Edges.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Edges.Dispose(System.Boolean)">
            <summary>
            Do the disposing
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.Edges.GetTimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Edges.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Edges.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Edges.FirstEdgeDirection">
            <summary>
            Returns/Sets the direction of the first edge
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Edges.Rise">
            <summary>
            Accesses only the rising edges.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Edges.Fall">
            <summary>
            Accesses only the falling edges
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Edges.Direction">
            <summary>
            Accesses the edge directions
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.EngineeringNotationFormatter">
            <summary>
            Helps in parsing and formatting Engineering format numbers.
            </summary>
            <example>
            <code>
            Console.WriteLine(string.Format(new EngineeringNotationFormatter(), "{0:eng}", 2.345e-13));
            </code>
            </example>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Used by IFormatProvider
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.GetFormat(System.Type)">
            <summary>
            Used by ICustomFormatter
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.ParseUInt64(System.String,System.Int32@)">
            <summary>
            This function parses binary and hex numbers such as
            0b100101 or 0x43ac
            </summary>
            <param name="s">The string to parse</param>
            <param name="bitcount">The number of bits in the number</param>
            <returns>The UInt64 result</returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.TryParse(System.String,System.Double@)">
            <summary>
            Attempts to parse the specified input. 
            </summary>
            <example>
            <code>
            double d = 0.0;
            string s = "2.34p";
            if (EngineeringNotationFormatter.TryParse(s, out d))
            {
                Console.WriteLine("{0}", d);
            }
            else
            {
                Console.WriteLine("parse failed");
            }
            </code>
            </example>
            <param name="s">The string to parse.</param>
            <param name="retval">The value returned on a successful parse.</param>
            <returns>Returns true if the parse succeeded, if parsing fails then false is returned</returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.Parse(System.String)">
            <summary>
            Converts a string in engineering notation, into a double.
            </summary>
            <example>
            <code>
            double v = EngineeringNotationFormatter.Parse("2.3n");
            </code>
            </example>
            <param name="s">string to convert</param>
            <returns>converted value</returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.Format(System.Double)">
            <summary>
            Formats a double as a string in engineering notation.
            </summary>
            <example>
            <code>
            string s = EngineeringNotationFormatter.Format(2.3e-9);
            </code>
            </example>
            <param name="v">double value</param>
            <returns>resultant string</returns>
        </member>
        <member name="M:Tek.Scope.Support.EngineeringNotationFormatter.Format(System.Double,System.String)">
            <summary>
            Formats a double as a string in engineering notation.
            </summary>
            <example>
            <code>
            Console.WriteLine("{0}", EngineeringNotationFormatter.Format(2.34567e-12, "#.###"));
            </code>
            </example>
            <param name="v">Double value to format</param>
            <param name="format">Formatting string like the one used by ToString</param>
            <returns>Formatted string</returns>
        </member>
        <member name="T:Tek.Scope.Support.FastFrame">
            <summary>
            This is an in memory implimentation of FastFrame.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame.horiz">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame.vert">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._histogram">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._a">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._count">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._sourceName">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._frameCount">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._currentFrame">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._mean">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._min">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._max">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._stddev">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._begin">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.FastFrame._end">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.#ctor(System.Double[],System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="values">Data values.</param>
            <param name="frames"></param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.#ctor(System.Double,System.Double,System.String,System.String,System.Double[],System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="spacing">Horizontal Spacing (same as xincr)</param>
            <param name="zeroindex">Zero Index (same a trigger point)</param>
            <param name="vUnits">Vertical Units String</param>
            <param name="hUnits">Horizontal Units String</param>
            <param name="values">Array of values.</param>
            <param name="frames">Number of Frames</param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.GetHistogram">
            <summary>
            Used to calculate Histogram if requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.CalculateHistogram">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Remove(System.Double)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Add(System.Double)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Clear">
            <summary>
            Clear all data in the waveform.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.SetArray(System.Double[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.CopyTo(System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.ToArray">
            <summary>
            Returns Normalized values as an array of doubles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.CalcBaseStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrame.CalcStDev">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.FrameCount">
            <summary>
            Access to FrameCount
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.CurrentFrame">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.SummaryFrame">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.GlobalTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.TTOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.GMTFractSec">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.GMT">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.SourceName">
            <summary>
            Returns the name of the source file associated with this waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.RawData">
            <summary>
            Returns data as an array of doubles.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Access">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Vertical">
            <summary>
            The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Tek#Scope#Support#INormalizedVectorEx#Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Horizontal">
            <summary>
            The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Item(System.Int64)">
            <summary>
            The normalized data element at the specified location.
            </summary>
            <param name="index">the index in the array for that element</param>
            <returns>a double value in vertical units</returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.XIncr">
            <summary>
            Alias to Horizontal.Spacing. 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.ZeroIndex">
            <summary>
            Trigger index location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrame.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.OSInfo">
            <summary>
            Used to access some OS information
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.OSInfo.Is64Bit">
            <summary>
            True if app is run in 64bit land
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.OSInfo.Is32Bit">
            <summary>
            True if app is run in 32 bit land
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.MarkType">
            <summary>
            Defines the type of mark for ClassFactory
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkType.PacketCollection">
            <summary>
            The mark is a bus
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkType.ResultCollection">
            <summary>
             The mark is made of measurement results
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ErrorStateType">
            <summary>
            State of node's Error/Warning/Normal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ErrorStateType.Normal">
            <summary>
            All Normal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ErrorStateType.Warning">
            <summary>
            At least one with warning, others normal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ErrorStateType.Error">
            <summary>
            At least one with error, others either warning or normal
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.StorageLocation">
            <summary>
            Where is it stored
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.StorageLocation.Datastore">
            <summary>
            Datastore
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.StorageLocation.Heap">
            <summary>
            Heap
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.UseType">
            <summary>
            Defines what the referenced item is
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Root">
            <summary>
            The Referenced Item is a root bus
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Bus">
            <summary>
            The Referenced Item is a bus
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Source">
            <summary>
            The Referenced Item is a source
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Bits">
            <summary>
            The Referenced Item is a bit collection
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Mark">
            <summary>
            The Referenced Item is a mark
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.UseType.Categorize">
            <summary>
            The Referenced Item is a Category
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ConversionType">
            <summary>
            Defines how the referenced item will be converted to digital
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ConversionType.None">
            <summary>
            The Referenced Item can not be viewed
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ConversionType.Direct">
            <summary>
            The Referenced Item is directly viewed (already digital)
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ConversionType.Threshold">
            <summary>
            The Referenced Item is view as digital using a threshold
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.MarkRecipient">
            <summary>
            Defines who gets marked
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkRecipient.MarkParent">
            <summary>
            The parent should be marked
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkRecipient.MarkSiblings">
            <summary>
            All siblings should be marked
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkRecipient.HighlightParent">
            <summary>
            The parent should be highlighted
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkRecipient.HighlightSiblings">
            <summary>
            All siblings should be highlighted
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.MarkRecipient.None">
            <summary>
            Does not apply
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ReferencedAsComponent">
            <summary>
            Referenced Name / Component Name / parameters
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ReferencedAsComponent.CompareConversion(Tek.Scope.Support.ReferencedAsComponent)">
            <summary>
            Compares the conversions values
            </summary>
            <param name="rac"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ReferencedAsComponent.Compare(Tek.Scope.Support.ReferencedAsComponent)">
            <summary>
            Compares two ReferencedAsComponent
            </summary>
            <param name="rac"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.ReferencedName">
            <summary>
            name of the referenced (like CH1, MATH3, D10 etc)
            </summary>
            <value ></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.ComponentName">
            <summary>
            what it is called (like Clock, Data, etc)
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Use">
            <summary>
            what it is to the referencer
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Storage">
            <summary>
            how is it sored
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Conversion">
            <summary>
            how it is viewed
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Setting">
            <summary>
            settings for viewing
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.HasChildren">
            <summary>
            Whether this node has children that need to be traversed.
            
            The node may have children but they do not need to be transversed
            for display, search, etc.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Display">
            <summary>
            to view or not to view
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.ChildrenDisplay">
            <summary>
            any children visible
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.ErrorState">
            <summary>
            State of this node
            </summary>
            <value ></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.ChildrenErrorState">
            <summary>
            State of this node's Children
            </summary>
            <value ></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.DecoderName">
            <summary>
            Decoder Name (applies to Bus Type)
            </summary>
            <value></value>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Who">
            <summary>
            Who gets the mark
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Object">
            <summary>
            the actual referenced item
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.AuxObject">
            <summary>
            the auxiliary referenced item
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ReferencedAsComponent.Touched">
            <summary>
            used internally
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.InsertionLocation">
            <summary>
            Where is it inserted
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.Prepend">
            <summary>
            In front of everything
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.Append">
            <summary>
            After everything
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.Before">
            <summary>
            Before specified node
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.After">
            <summary>
            After specified node
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.Index">
            <summary>
            At index
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.InsertionLocation.Leave">
            <summary>
            Leave where at or Append if new
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.InsertionRecord">
            <summary>
            How to insert node
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InsertionRecord.InsertionMode">
            <summary>
            Where to insert
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InsertionRecord.Node">
            <summary>
            Node to insert at (if applicable)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InsertionRecord.Index">
            <summary>
            Index where node should be or should be placed
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Tag">
            <summary>
            Tag Dictionary
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.Open">
            <summary>
            Allows for DataStore Opens in a client.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Begin">
            <summary>
            Begins a tagging database update cycle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Complete">
            <summary>
            Complete a tagging database update cycle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.IsLocked">
            <summary>
            Is tagging locked
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.IsDefined(System.String)">
            <summary>
            Is the name in tagging
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.IsDefined(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Is the Packet Collection in tagging
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="F:Tek.Scope.Support.Tag.ResultCollectionCreate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.ResultCollectionDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.PacketCollectionTemporary">
            <summary>
            Create Temporary Packet Collection
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.PacketCollectionByNameFactory">
            <summary>
            Create Named Packet Collection
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.PacketCollectionDelete">
            <summary>
            Delete Packet Collection
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.PacketCollectionNameDelete">
            <summary>
            Delete Packet Collections by Name
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.NormalizedVectorCreate">
            <summary>
            
            </summary>
            +
        </member>
        <member name="F:Tek.Scope.Support.Tag.NormalizedVectorDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.NormalizedVectorNameDelete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.BitDelete">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.MarkCreate(System.String,Tek.Scope.Support.MarkType)">
            <summary>
            This method creates a mark in a way that will be visible on the scope.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.MarkDelete(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="mark"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Create(Tek.Scope.Support.ParameterID)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Create(Tek.Scope.Support.ParameterID,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateBitCollection">
            <summary>
            Create a Local BitCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateBitCollection(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteBitsCollection(Tek.Scope.Support.IBitsCollection)">
            <summary>
            
            </summary>
            <param name="bc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Delete(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateBus">
             <summary>
             Create a Local Packet Collection
            
             NOTE: following appies to ASM
             Local Packet Collections are only valid during the current Datastore sequence
             or until the Packet Collection is deleted (DeleteBus)
             </summary>
             <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateBus(System.String)">
            <summary>
            Create a Named Packet Collection
            
            Named Packet Collections exist until deleted (DeleteBus)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteBus(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Delete a temporary or named Packet Collection
            </summary>
            <param name="bus"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteBus(System.String)">
            <summary>
            Delete a temporary or named Packet Collection
            </summary>
            <param name="bus"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateMeasurement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateMeasurement(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteMeasurement(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateMath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CreateMath(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteMath(Tek.Scope.Support.INormalizedVectorEx)">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DeleteMath(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.BitsCreate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.BitsDelete(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks to see if 
            </summary>
            <param name="s"></param>
            <param name="item"></param>
            <param name="sc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.SpecialCompareTo(System.String,System.String)">
            <summary>
            This funky comparison exists to make sure that items are sorted using the following rules:
            1) Items are ordered by type (meaning PacketCollection/Bits are above Analog/Digital)
            2) "d+ - d-" is at the top
            3) + is before -
            4) otherwise it's alphabetical
            
            I'm not proud of this bogus ordering behavior, but we're close to
            SIR and things need to "work" (at least from an external point of view). 
            This is the crowbar to the side of the head needed to "fix" this for now.
            FYI - This is where I've hidden the body - we'll need to work this out. - KR
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.References(System.String)">
            <summary>
            Enumerates all the referenced elements by the given element
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Root">
            <summary>
            Enumerates all the referenced elements from ROOT
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.References(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Enumerates all the referenced elements by the given Packet Collection
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetChildren(System.String,System.Boolean)">
            <summary>
            gets list of all child nodes (full names)
            </summary>
            <param name="parentName"></param>
            <param name="all"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetChildren(Tek.Scope.Support.IPacketCollection,System.Boolean)">
            <summary>
            gets list of all child nodes (full names)
            </summary>
            <param name="pc"></param>
            <param name="all"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetTree(System.String)">
            <summary>
            gets list of all nodes (full names)
            </summary>
            <param name="parentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetNode(System.String,Tek.Scope.Support.ReferencedAsComponent@)">
            <summary>
            Get a specific node
            </summary>
            <param name="name"></param>
            <param name="rac"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Clear">
            <summary>
            Clears contents of the dictionaries
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Info(System.String,System.String,System.String)">
            <summary>
            Sets Bus Information
            </summary>
            <param name="busName"></param>
            <param name="infoName"></param>
            <param name="info"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Info(System.String,System.String)">
            <summary>
            Gets Bus Information
            </summary>
            <param name="busName"></param>
            <param name="infoName"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ClearTouched(System.String)">
            <summary>
            Clear touched on tree.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ClearTouched(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Clear touch on Packet Collection's tree
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveUnTouched(System.String)">
            <summary>
            Remove untouched in tree.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveUnTouched(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Remove untouched in Packet Collection's tree
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddOrModifyRelation(System.String,System.String,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings,Tek.Scope.Support.MarkRecipient,System.Object,Tek.Scope.Support.StorageLocation,System.Boolean,System.Boolean)">
            <summary>
            Add/Modify the Referenced as Component
            </summary>
            <param name="referencerName"></param>
            <param name="relationshipName"></param>
            <param name="referencedName"></param>
            <param name="use"></param>
            <param name="componentName"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
            <param name="who"></param>
            <param name="mainObject"></param>
            <param name="loc"></param>
            <param name="display"></param>
            <param name="childenDisplay"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReferenceAt(System.String,Tek.Scope.Support.Tag.Name,Tek.Scope.Support.InsertionRecord,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings,Tek.Scope.Support.MarkRecipient,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Inserts a referenced element to the referencer's list
            </summary>
            <param name="referencerName"></param>
            <param name="relationshipName"></param>
            <param name="where"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="use"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
            <param name="who"></param>
            <param name="mainObject"></param>
            <param name="loc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddOrInsertReference(System.String,Tek.Scope.Support.Tag.Name,Tek.Scope.Support.InsertionRecord,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings,Tek.Scope.Support.MarkRecipient,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Inserts a referenced element to the referencer's list
            </summary>
            <param name="referencerName"></param>
            <param name="relationshipName"></param>
            <param name="where"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="use"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
            <param name="who"></param>
            <param name="mainObject"></param>
            <param name="loc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(System.String,Tek.Scope.Support.Tag.Name,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings,Tek.Scope.Support.MarkRecipient,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Adds a referenced element to the referencer's list
            </summary>
            <param name="referencerName"></param>
            <param name="relationshipName"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="use"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
            <param name="who"></param>
            <param name="mainObject"></param>
            <param name="loc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(System.String,System.String,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings)">
            <summary>
            Adds a referenced element to the referencer's list
            </summary>
            <param name="referencerName"></param>
            <param name="relationshipName"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="use"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddRoot(System.String,System.String,Tek.Scope.Support.ConversionType)">
            <summary>
            Adds a root element
            </summary>
            <param name="name"></param>
            <param name="componentName"></param>
            <param name="conversion"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(System.String,System.String,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings)">
            <summary>
            Adds a referenced element to the referencer's list
            </summary>
            <param name="referencerName"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(System.String,System.String,System.String)">
            <summary>
            Adds a referenced element to the referencer's list.  Element is added with no conversion.
            </summary>
            <param name="referencerName"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddRoot(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Adds a root element.  Element is added with specified conversion.
            </summary>
            <param name="referencer"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(Tek.Scope.Support.IPacketCollection,System.String,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings)">
            <summary>
            Adds a referenced element to the Packet Collection's list.  Element is added with specified conversion.
            </summary>
            <param name="referencer"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.IPacketCollection,System.String)">
            <summary>
            Adds a referenced Packet Collection to the Packet Collection's list.  Element is added with no conversion.
            </summary>
            <param name="referencer"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.IRangeCollection,System.String)">
            <summary>
            Adds a referenced Range Collection to the Packet Collection's list.  Element is added with no conversion.
            </summary>
            <param name="referencer"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.Settings)">
            <summary>
            Adds a referenced Normalize Vector to the Packet Collection's list.  Element is added with threshold conversion.
            </summary>
            <param name="referencer"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.IPin,System.String)">
            <summary>
            Adds a referenced Pin to the Packet Collection's list.  Element is added with direct conversion.
            </summary>
            <param name="referencer"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(System.String,Tek.Scope.Support.InsertionRecord,System.String,Tek.Scope.Support.UseType,System.String,Tek.Scope.Support.ConversionType,Tek.Scope.Support.Settings,Tek.Scope.Support.MarkRecipient,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Inserts a referenced element to the referencer's list
            </summary>
            <param name="relationshipName"></param>
            <param name="where"></param>
            <param name="referencedName"></param>
            <param name="componentName"></param>
            <param name="use"></param>
            <param name="conversion"></param>
            <param name="settings"></param>
            <param name="who"></param>
            <param name="mainObject"></param>
            <param name="loc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.InsertionRecord,System.String,Tek.Scope.Support.MarkRecipient)">
            <summary>
            Inserts a referenced Packet Collection into the list.  Element is added with no conversion.
            </summary>
            <param name="referencedItem"></param>
            <param name="where"></param>
            <param name="componentName"></param>
            <param name="who"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(Tek.Scope.Support.ICategorize,Tek.Scope.Support.InsertionRecord,System.String)">
            <summary>
            Inserts a referenced Categorize into the list.  Element is added with no conversion.
            </summary>
            <param name="referencedItem"></param>
            <param name="where"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(Tek.Scope.Support.IBitsCollection,Tek.Scope.Support.InsertionRecord,System.String)">
            <summary>
            Inserts a referenced Bits Collection into the list.  Element is added with no conversion.
            </summary>
            <param name="referencedItem"></param>
            <param name="where"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(System.String,Tek.Scope.Support.InsertionRecord,Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.Settings)">
            <summary>
            Inserts a referenced Normalized Vector into the list.  Element is added with threshold conversion.
            </summary>
            <param name="relationshipName"></param>
            <param name="where"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.InsertionRecord,Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.Settings)">
            <summary>
            Insert a referenced Normalize Vector to the Packet Collection's list at specific location.
            Element is added with threshold conversion.
            </summary>
            <param name="referencer"></param>
            <param name="where"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(System.String,Tek.Scope.Support.InsertionRecord,Tek.Scope.Support.IPin,System.String,Tek.Scope.Support.Settings)">
            <summary>
            Inserts a referenced Pin into the list.
            </summary>
            <param name="relationshipName"></param>
            <param name="where"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InsertReference(Tek.Scope.Support.IPacketCollection,Tek.Scope.Support.InsertionRecord,Tek.Scope.Support.IPin,System.String)">
            <summary>
            Insert a referenced Pin to the Packet Collection's list at specific location.  Element is added with direct conversion.
            </summary>
            <param name="referencer"></param>
            <param name="where"></param>
            <param name="referencedItem"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag._RemoveReferences(System.String)">
            <summary>
            Removed references
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveReferences(System.String)">
            <summary>
            Removes entire reference tree
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveReferences(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Removes entire reference tree for a Packet Collection
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveReferences(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Removes references for a Normalize Vector
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveReferences(Tek.Scope.Support.IPin)">
            <summary>
            Removes references for a Pin
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeObject(System.String,System.Object,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Change the Object
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
            <param name="aux"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeObject(System.String,System.Object,Tek.Scope.Support.StorageLocation)">
            <summary>
            Change the Object
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeObject(Tek.Scope.Support.ICategorize)">
            <summary>
            Change a object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeComponentName(System.String,System.String)">
            <summary>
            Change the Component Name
            </summary>
            <param name="name"></param>
            <param name="componentName"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeComponentName(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Change a Packet Collection's Component Name
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDecoderName(System.String,System.String)">
            <summary>
            Change the Decoder Name
            </summary>
            <param name="name"></param>
            <param name="decoderName"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDecoderName(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Change a Packet Collection's Decoder Name
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeHasChildren(System.String,System.Boolean)">
            <summary>
            Change the has children
            </summary>
            <param name="name"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDisplay(System.String,System.Boolean)">
            <summary>
            Change the Display/Visibility
            </summary>
            <param name="name"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDisplay(Tek.Scope.Support.IPacketCollection,System.Boolean)">
            <summary>
            Change a Packet Collection's Display
            </summary>
            <param name="pc"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDisplay(Tek.Scope.Support.IPin,System.Boolean)">
            <summary>
            Change a Pin's Display
            </summary>
            <param name="pin"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeDisplay(Tek.Scope.Support.INormalizedVector,System.Boolean)">
            <summary>
            Change a Vector's Display
            </summary>
            <param name="vector"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeChildDisplay(System.String,System.Boolean)">
            <summary>
            Change Display of Children
            </summary>
            <param name="name"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeChildDisplay(Tek.Scope.Support.IPacketCollection,System.Boolean)">
            <summary>
            Change Display of a Packet Collection's Children
            </summary>
            <param name="pc"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeChildrenDisplay(System.String,System.Boolean)">
            <summary>
            Change the Display/Visibility of the Children
            </summary>
            <param name="name"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeChildrenDisplay(Tek.Scope.Support.IPacketCollection,System.Boolean)">
            <summary>
            Change the Display/Visibility of the Children
            </summary>
            <param name="pc"></param>
            <param name="visible"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeErrorState(System.String,Tek.Scope.Support.ErrorStateType)">
            <summary>
            Change the Error State
            </summary>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetErrorState(System.String)">
            <summary>
            Return ErrorState
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetErrorState(System.String,System.Boolean)">
            <summary>
            Return ErrorState for the item. It rolls up the errors/warnings for children
            into the parent when bExpanded is false.
            </summary>
            <param name="name"></param>
            <param name="bExpanded"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetChildrenErrorState(System.String)">
            <summary>
            Get the Children Error State
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeChildrenErrorState(System.String,Tek.Scope.Support.ErrorStateType)">
            <summary>
            Change the Children Error State
            </summary>
            <param name="name"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ChangeTouch(System.String,System.Boolean)">
            <summary>
            Change the Touch
            </summary>
            <param name="name"></param>
            <param name="touch"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CompleteDecoders">
            <summary>
            Completes Decoder transactions and forms list
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Decoders">
            <summary>
            Enumerates all the decoders
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Dump(System.String,System.String)">
            <summary>
            Dump the current tag database to a file for viewing
            </summary>
            <param name="fileName"></param>
            <param name="header"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.Dump(System.String)">
            <summary>
            Dump the current tag database to a file for viewing
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.DumpTree(System.String)">
            <summary>
            Dump the current tag tree to a file for viewing
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="F:Tek.Scope.Support.Tag.SetISDBParamForVisibility">
            <summary>
            Anonymous method
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.SetDecodeFormatForISDB">
            <summary>
            calls into ASM
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.GetDecodeFormatFromISDB">
            <summary>
            calls into ASM
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.CheckISDBForRecall">
            <summary>
            Calls into ASM
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.IsTagAvailable">
            <summary>
            Calls into ASM
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.SetTagToISDB">
            <summary>
            calls into ASM
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Tag.RemoveTagFromISDB">
            <summary>
            calls into ASM
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InitializeISDBDictionaries">
            <summary>
            create Dictonary
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.FindIndex(System.Int32,System.String)">
            <summary>
            returns the index for the given key (name)
            </summary>
            <param name="busNumber">bus number</param>
            <param name="name">key</param>
            <returns>value</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.FindIndex(System.String)">
            <summary>
            Returns the index of the tag element from the ISDB dictionary
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.FindName(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Finds the name (tag name) in the dictionary 
            </summary>
            <param name="index">key value</param>
            <param name="busNumber">bus number</param>
            <param name="foundKey">bool</param>
            <returns>string</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.FindBusIndex(System.String)">
            <summary>
            Find the Bus Index from the tag
            </summary>
            <param name="name">Example BUS3.LANE0</param>
            <returns>returns index example 3 for BUS3</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ClearISDBDictionary">
            <summary>
            Clears the contents of the each bus dictionary
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ClearISDBDictionary(System.Int32)">
            <summary>
            Clears the contents of the each bus dictionary
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Tag.AddToISDBDictionary(System.String)">
            <summary>
            Add the reference name to the ISDB dictionary
            </summary>
            <param name="name">tag name</param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.RemoveFromISDBDictionary(System.String)">
            <summary>
            Remove the name from the ISDB dictionary
            </summary>
            <param name="name">tag name</param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ISDBDictionaryExists(System.Int32)">
            <summary>
            Check if the dictionary exists
            </summary>
            <param name="busNumber">bus number</param>
            <returns>bool</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InverseISDBDictionaryExists(System.Int32)">
            <summary>
            Check if the inverse dictionary exists
            </summary>
            <param name="busNumber">bus number</param>
            <returns>bool</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.ISDBDictionaryKeys(System.Int32)">
            <summary>
            Gets the key 
            </summary>
            <param name="busNumber">int</param>
            <returns>key</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.InverseDictionaryValues(System.Int32)">
            <summary>
            Gets the value (Index-Name Dictionary)
            </summary>
            <param name="busNumber">int</param>
            <returns>key</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.SetNodeVisibility(System.String,System.Boolean)">
            <summary>
            Set the visibility of a node
            </summary>
            <param name="name">tagging string</param>
            <param name="visibility">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.SetChildVisibility(System.String,System.Boolean)">
            <summary>
            Set the visibility of all children
            </summary>
            <param name="name">tagging string</param>
            <param name="visibility">bool</param>
            <returns>bool</returns>
        </member>
        <member name="M:Tek.Scope.Support.Tag.SetDecodeFormat(System.String,System.String)">
            <summary>
            Set the decode format
            </summary>
            <param name="name">tagging string</param>
            <param name="decodeformat">decode format</param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.GetDecodeFormat(System.String)">
            <summary>
            Get the decode format
            </summary>
            <param name="name">tagging string</param>
        </member>
        <member name="M:Tek.Scope.Support.Tag.CopyFromISDBToDictionary(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="index"></param>
            <param name="busNumber"></param>
        </member>
        <member name="P:Tek.Scope.Support.Tag.TreeChanged">
            <summary>
            to be removed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.TreeChangedCount">
            <summary>
            Tells whether the tree changed from last time
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.DecodersChanged">
            <summary>
            to be removed
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.DecodersChangedCount">
            <summary>
            Tells whether the decoder list has changed
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Tag.NameBooleanPair">
            <summary>
            Name / Boolean Pair
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.NameBooleanPair.Name">
            <summary>
            Name of ReferencedAsComponent
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.NameBooleanPair.Boolean">
            <summary>
            whether true or false
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Tag.NameStatePair">
            <summary>
            Name / State Pair
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.NameStatePair.Name">
            <summary>
            Name of ReferencedAsComponent
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Tag.NameStatePair.State">
            <summary>
            state
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Tag.BusInfo">
            <summary>
            Information Cache for each bus
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Tag.Name">
            <summary>
            Case neutral names
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinBase">
            <summary>
            Abstract class with base implementation of Pin behavior. 
            It's expected that most IPin implementations will derive from this.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.GetEnumerator">
            <summary>
            Eumerate through the events in the pin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate through the events in the pin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.SubField(System.Int32,System.Int32)">
            <summary>
            Return a sub-field of the bit starting at the
            "start" location and return the number of bits specified by
            the "length".
            </summary>
            <param name="start">Starting index</param>
            <param name="length">Length of returned bit</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.SubField64(System.Int32,System.Int32)">
            <summary>
            Returns a sub-feild of the bits start at the "start" location and
            returning the number of bits specified by "length". The total number of
            bits is limited to 64 bits.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.SubFields(System.Int32,System.Int32)">
            <summary>
            Iterates through all of the specfied sub-fields.
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.SubField64s(System.Int32,System.Int32)">
            <summary>
            Iterates throughall of the specified sub-feilds. 
            </summary>
            <param name="offset">Starting offset</param>
            <param name="length">Width of subfield</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Tek#Scope#Support#IPin#Find(Tek.Scope.Support.IRange)">
            <summary>
            Returns a IPin contains the specified range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Find(Tek.Scope.Support.IRange)">
            <summary>
            Return an IDigitalEvent for the specified time range.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Find(Tek.Scope.Support.IDigitalEvents@,Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Add(System.Double,System.UInt64)">
            <summary>
            Add a new entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Add a new entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Add a new entry.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Equals(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            Test for equality.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.RemoveAll">
            <summary>
            Remove all contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.TimeAtIndex(System.Int64)">
            <summary>
            Return time at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.IndexAtTime(System.Double)">
            <summary>
            Returns the index at the specified time.
            </summary>
            <param name="t">The time to find.</param>
            <returns>The index that is less than or equal to the specified time.</returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Sort">
            <summary>
            Sort
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Commit">
            <summary>
            We are finished adding data. 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.DisposeUnmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.DisposeManaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Dispose">
            <summary>
            Dispose contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBase.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.StartTime">
            <summary>
            Time the Pin data starts. This doesn't necessarily
            mean that the first item will start at this time.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.StopTime">
            <summary>
            The time the pin data ends.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Name">
            <summary>
            Name of the pin data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.NumBits">
            <summary>
            The number of bits (it's always one).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Count">
            <summary>
            Number of events.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Item(System.Int64)">
            <summary>
            Accessor method.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.ContainsTransitionEvents">
            <summary>
            This returns whether the collection contains transitions
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.SampleInterval">
            <summary>
            Contains the sample interval of the source item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinBasic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PinBasic._list">
            <summary>
            Contains a EdgeInfo list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Add(System.Double,System.UInt64)">
            <summary>
            Add Entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Add Entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Add Entry.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.RemoveAll">
            <summary>
            Remove all contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Compare(Tek.Scope.Support.EdgeInfo,Tek.Scope.Support.EdgeInfo)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Sort">
            <summary>
            Sort contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.Commit">
            <summary>
            We are finished adding entries.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.DisposeUnmanaged">
            <summary>
            Dispose of unmanaged code.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.DisposeManaged">
            <summary>
            Dispose of managed code.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinBasic.TimeAtIndex(System.Int64)">
            <summary>
            Return time at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PinBasic.Count">
            <summary>
            Return the number of entries.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinBasic.Item(System.Int64)">
            <summary>
            Access Entries.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.Pin">
            <summary>
            A pin is simply a wrapper around an IDgitialEvents that ensures
            that the width is only 1 bit.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Pin.#ctor(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            Constructor
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Tek.Scope.Support.Pin.#ctor(Tek.Scope.Support.IDigitalEvents,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="d"></param>
            <param name="index"></param>
        </member>
        <member name="M:Tek.Scope.Support.Pin.Add(System.Double,System.UInt64)">
            <summary>
            Add new Entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Pin.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Add new Entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Tek.Scope.Support.Pin.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Add new Entry.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.Pin.RemoveAll">
            <summary>
            Remove all contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Pin.Sort">
            <summary>
            Sort.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Pin.Commit">
            <summary>
            Done adding data.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Pin.DisposeUnmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Pin.DisposeManaged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.Count">
            <summary>
            Number of entries
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.Item(System.Int64)">
            <summary>
            Access Entry.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Pin.ContainsTransitionEvents">
            <summary>
            This returns whether the collection contains transitions
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.SampleInterval">
            <summary>
            Return Sample interval of the source data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.StartTime">
            <summary>
            StartTime 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.StopTime">
            <summary>
            StopTime
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.Name">
            <summary>
            Name of the Pin.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Pin.NumBits">
            <summary>
            Number of bits (always 1).
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinA2D">
            <exclude/>
             <summary>
             Turns an analog waveform into an IPin.
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.#ctor(Tek.Scope.Support.INormalizedVector,System.Double,System.Double)">
            <summary>
            Converts the analog waveform into an IPin using the
            specified threshold and hysteresis.
            </summary>
            <param name="v"></param>
            <param name="threshold"></param>
            <param name="hysteresis"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.#ctor(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Auto initialize to 50%.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.#ctor(Tek.Scope.Support.INormalizedVector,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="v"></param>
            <param name="threshold"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.#ctor(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.ISettings)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.Initialize(Tek.Scope.Support.INormalizedVector,System.Double,System.Double)">
            <summary>
            Does the conversion
            </summary>
            <param name="v"></param>
            <param name="threshold"></param>
            <param name="hysteresis"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.Add(System.Double,System.UInt64)">
            <summary>
            Adds a new element (assumes Transition bits are all 0). Not implemented. 
            </summary>
            <param name="time">Time the event occurred (in seconds)</param>
            <param name="bits">Value for the event.</param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Adds a new element. Not implemented. 
            </summary>
            <param name="time">Time the event occurred (in seconds)</param>
            <param name="bits">Value for the event.</param>
            <param name="trans">Transition bits. </param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2D.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Adds a new element. Not implemented. 
            </summary>
            <param name="e">Event to add</param>
        </member>
        <member name="P:Tek.Scope.Support.PinA2D.ContainsTransitionEvents">
            <summary>
            Returns true of the collection has multiple transitions in it.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinA2DMultiState">
            <exclude/>
             <summary>
             Turns an analog waveform into an IPin with multiple thresholds.
             </summary>
        </member>
        <member name="F:Tek.Scope.Support.PinA2DMultiState._list">
            <summary>
            Contains a EdgeInfo list.  This overrides the list in IPin
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.#ctor(Tek.Scope.Support.INormalizedVector,System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Converts the analog waveform into an IPin using the
            specified thresholds and hysteresis.
            </summary>
            <param name="v"></param>
            <param name="thresholds"></param>
            <param name="hysteresis"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.#ctor(Tek.Scope.Support.INormalizedVector,System.Collections.Generic.List{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="v"></param>
            <param name="thresholds"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Initialize(Tek.Scope.Support.INormalizedVector,System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Does the conversion for multiple thresholds
            </summary>
            <param name="v"></param>
            <param name="thresholds"></param>
            <param name="hysteresis"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Add(System.Double,System.UInt64)">
            <summary>
            Add Entry.
            </summary>
            <param name="time"></param>
            <param name="stateToAdd"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Add Entry.
            </summary>
            <param name="time"></param>
            <param name="stateToAdd"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Add Entry.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.RemoveAll">
            <summary>
            Remove all contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Compare(Tek.Scope.Support.EdgeInfoMultiState,Tek.Scope.Support.EdgeInfoMultiState)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Sort">
            <summary>
            Sort contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.Commit">
            <summary>
            We are finished adding entries.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.DisposeUnmanaged">
            <summary>
            Dispose of unmanaged code.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinA2DMultiState.DisposeManaged">
            <summary>
            Dispose of managed code.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinA2DMultiState.Item(System.Int64)">
            <summary>
            Access Entries.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PinA2DMultiState.Count">
            <summary>
            Return the number of entries.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinA2DMultiState.ContainsTransitionEvents">
            <summary>
            Returns true of the collection has multiple transitions in it.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinSubRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinSubRange.#ctor(Tek.Scope.Support.IPin,Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <param name="range"></param>
        </member>
        <member name="P:Tek.Scope.Support.PinSubRange.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinSubRange.StopTime">
            <summary>
            StopTime
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinPacketCollection">
            <exclude/>
             <summary>
             A class the makes an IPin look like a PacketCollection.
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.#ctor(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            Check to see if array contains specified object.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.ToArray">
            <summary>
             Convert collection into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.GetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.SetAt(System.Int64,Tek.Scope.Support.IPacket)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Add(Tek.Scope.Support.IPacket)">
            <summary>
            Add a new IPacketCollection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.FieldGetAt(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.FieldSetAt(System.Int64,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="field"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            Sort the array using the criterion passed as an argument.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            Adds a new element
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinPacketCollection.TimeToIndex(System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.HUnits">
            <summary>
            Return the horizontal units of the underlying locations.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.VUnits">
            <summary>
            Return the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.Count">
            <summary>
            Number of IPacketCollection.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinPacketCollection.FieldCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.EdgesFromPin">
            <summary>
            In place conversion of a Pin to an Edge
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.#ctor(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPin.GetTimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.FirstEdgeDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.Rise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.Fall">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPin.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.EdgesFromPinEx">
            <summary>
            In place conversion of a Pin to an Edge
            
            EdgesFromPin is broken. Changing it affects too
            much stuff. So we are going to migrate to this 
            instead.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.#ctor(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgesFromPinEx.GetTimeAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.FirstEdgeDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.Rise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.Fall">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.EdgesFromPinEx.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PinInvert">
            <summary>
            In place invert of a Pin
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.#ctor(Tek.Scope.Support.IPin)">
            <summary>
            Constructor - pass in IPin to invert
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.Add(System.Double,System.UInt64)">
            <summary>
            Add a new entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.Add(System.Double,System.UInt64,System.UInt64)">
            <summary>
            Add a new entry.
            </summary>
            <param name="time"></param>
            <param name="bits"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.Add(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            Add a new entry.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.RemoveAll">
            <summary>
            Remove all contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.DisposeUnmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.DisposeManaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.TimeAtIndex(System.Int64)">
            <summary>
            Returns the time at the specified index
            </summary>
            <param name="index">Index of the event.</param>
            <returns>Returns the time at the event specified by the index.</returns>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.IndexAtTime(System.Double)">
            <summary>
            Returns the index at the specified time.
            </summary>
            <param name="t">Time value of the event to find (in seconds)</param>
            <returns>The event index at that time. The time value of the returned index will be less than or equal to t.</returns>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.Sort">
            <summary>
            Sort
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PinInvert.Commit">
            <summary>
            We are finished adding data. 
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.ContainsTransitionEvents">
            <summary>
            Returns true of the collection has multiple transitions in it.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.SampleInterval">
            <summary>
            Only used to recreate sampled file.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.StartTime">
            <summary>
            Returns start time (in seconds) for the digital waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.StopTime">
            <summary>
            Returns the stop time (in seconds) for the digital waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.Name">
            <summary>
            Contains name of the source of this data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.NumBits">
            <summary>
            Returns the number of bits per event.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PinInvert.Item(System.Int64)">
            <summary>
            The digital event at the specified index. A set, which changes the stored value,
            implies that events may be combined. For example, if a value is changed such that it is
            same value as the previous event, it is expected that it will be combined with the previous
            event.
            </summary>
            <param name="index">Index of the event</param>
        </member>
        <member name="T:Tek.Scope.Support.HistogramHorizontal">
            <summary>
            Horizontal information for a histogram
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.HistogramHorizontal.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.HistogramHorizontal.Attach(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="bins"></param>
        </member>
        <member name="M:Tek.Scope.Support.HistogramHorizontal.IndexToValue(System.Double)">
            <summary>
            Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index">an index into the data array. Non-integer 
            values will use linear interpolation to return a value.</param>
            <returns>A double in the vertical units (usually volts)</returns>
        </member>
        <member name="M:Tek.Scope.Support.HistogramHorizontal.ValueToIndex(System.Double)">
            <summary>
            Converts a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv">Horizontal value (usually time)</param>
            <returns>Array index</returns>
        </member>
        <member name="P:Tek.Scope.Support.HistogramHorizontal.Count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HistogramHorizontal.Spacing">
            <summary>
            The distance between each element.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HistogramHorizontal.ZeroIndex">
            <summary>
            The index where value is zero.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HistogramHorizontal.Units">
            <summary>
            The units for this dimension.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Histogram">
            <summary>
            An in heap memory implimentation of IHistogram
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Histogram.Clear">
            <summary>
            Clear the contents.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Histogram.Commit">
            <summary>
            Tells Histogram that the all it contains
            all of the data that will be added to it.
            This call allows for housekeeping.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Histogram.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Histogram.ToString">
            <summary>
            Displays a string representing this histogram.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Name">
            <summary>
            Name of histgram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.SourceName">
            <summary>
            Name of the source data the produced the histogram
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Horizontal">
            <summary>
            Horizontal information
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Item(System.Int32)">
            <summary>
            Indexer. Access to each bin in the histogram.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Count">
            <summary>
            Number of bins in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Units">
            <summary>
            Returns Units Associated with this histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Minimum">
            <summary>
            Minimum Value in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Maximum">
            <summary>
            Maximum Value in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Mean">
            <summary>
            Mean value in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Mode">
            <summary>
            Mode value in the histogram. This is the largest bin
            in the histogram.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.StandardDeviation">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Histogram.Median">
            <summary>
            Median value.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FileType">
            <summary>
            Waveform File type
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.Vector">
            <summary>
            Analog vector
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.Digital">
            <summary>
            Sampled Digital
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.WfmDb">
            <summary>
            Waveform Database (Pixmap)
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.FastFrame">
            <summary>
            Fast Frame
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.Mask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.Unknown">
            <summary>
            Unrecognized type
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FileType.NoFile">
            <summary>
            File Doesn't exists
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IReader">
            <summary>
            File Reader
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Names(System.String)">
            <summary>
            Names of channels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            
            It is highly recommended that this method open the specified file and
            validate that it's contents are of the correct type. This is because the
            same file suffixes are often used for different kinds of files.
             Even within Tek there are several .wfm files.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file. This is usually 1 unless
            this is a fastframe waveform.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(System.String)">
            <summary>
            Read the file and return the result. 
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            Attempts to read an INormalizedVector. A return value of true
            means the read was successful and false means it failed.
            </summary>
            <param name="v">output</param>
            <param name="filename">Input File name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.IReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IReader.Suffix">
            <summary>
            Returns string usable for the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AnalogWriterType">
            <summary>
            Additional output information for the Write function
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.PSPLWFM">
            <summary>
            Output a PSPL wfm file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.AFGWFM">
            <summary>
            Output an AFG wfm file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.PSPLCSV">
            <summary>
            Output a PSPL analog csv file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.VSPLCSV">
            <summary>
            VSPL CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.TIMEVALUECSV">
            <summary>
            Time/Value CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.TXT">
            <summary>
            Outputs a simple file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.DEFAULT">
            <summary>
            Pick Default Format
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.AnalogWriterType.JPEG">
            <summary>
            Graphic
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DigitalWriterType">
            <summary>
            Additional output information for the Write function
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.PSPLWFM">
            <summary>
            Output a PSPL digital wfm file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.AWGWFM">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.PSPLCSV">
            <summary>
            Output a PSPL digital csv file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.PSPLCVT">
            <summary>
            Output a PSPL digital csv file.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.VSPLCSV">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.VSPLCVT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.DigitalWriterType.AWGPAT">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PacketCollectionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionType.SaveRecall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionType.EventTable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.PacketCollectionType.DEFAULT">
            <summary>
             Default setting
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IWriter">
            <summary>
            Interface for a file writer
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.INormalizedVector)">
            <summary>
            True if writer supports INormalizedVector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IFastFrame)">
            <summary>
            True if writer supports IFastFrame
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IWaveformDB)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IPacketCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IArea)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(Tek.Scope.Support.IHistogram)">
            <summary>
            
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsSupported(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.INormalizedVector)">
            <summary>
            True if writer supports INormalizedVector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IFastFrame)">
            <summary>
            True if writer supports IFastFrame
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IWaveformDB)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IPacketCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IArea)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(Tek.Scope.Support.IHistogram)">
            <summary>
            
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.IsClipboardSupported(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.AnalogWriterType)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IFastFrame,System.String)">
            <summary>
            
            </summary>
            <param name="ff"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IPin,System.String)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IDigitalEvents,System.String,Tek.Scope.Support.DigitalWriterType)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IRangeCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IResultCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IResult,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IPacketCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Tek.Scope.Support.PacketCollectionType)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IArea,System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(Tek.Scope.Support.IHistogram,System.String)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.Write(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.INormalizedVector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IFastFrame,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ff"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IWaveformDB,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IPin,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IDigitalEvents,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IResultCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IResult,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IPacketCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IRangeCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IArea,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(Tek.Scope.Support.IHistogram,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.IWriter.WriteClipboard(System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:Tek.Scope.Support.IWriter.Name">
            <summary>
            Name of the Writer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWriter.Description">
            <summary>
            Description of the writer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWriter.FormatName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWriter.Suffixes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.IWriter.Filters">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.WriterBase">
            <summary>
            Starting point for a plugable writer
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.INormalizedVector)">
            <summary>
            True if writer supports INormalizedVector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IFastFrame)">
            <summary>
            True if writer supports IFastFrame
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IWaveformDB)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IPacketCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IArea)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(Tek.Scope.Support.IHistogram)">
            <summary>
            
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsSupported(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.INormalizedVector)">
            <summary>
            True if writer supports INormalizedVector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IFastFrame)">
            <summary>
            True if writer supports IFastFrame
            </summary>
            <param name="ff"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IWaveformDB)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IPacketCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IArea)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(Tek.Scope.Support.IHistogram)">
            <summary>
            
            </summary>
            <param name="hist"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.IsClipboardSupported(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.AnalogWriterType)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IFastFrame,System.String)">
            <summary>
            
            </summary>
            <param name="ff"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IPin,System.String)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IDigitalEvents,System.String,Tek.Scope.Support.DigitalWriterType)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IRangeCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IResultCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IResult,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IPacketCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Tek.Scope.Support.PacketCollectionType)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IArea,System.String)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(Tek.Scope.Support.IHistogram,System.String)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.Write(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.INormalizedVector,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IFastFrame,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ff"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IWaveformDB,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IPin,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IDigitalEvents,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IResultCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IResult,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IPacketCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IRangeCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IArea,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(Tek.Scope.Support.IHistogram,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.WriterBase.WriteClipboard(System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:Tek.Scope.Support.WriterBase.Name">
            <summary>
            Name of the Writer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WriterBase.Description">
            <summary>
            Description of the writer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WriterBase.FormatName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WriterBase.Suffixes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WriterBase.Filters">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.RangeCollectionWriter">
            <summary>
            Writes Range Collections
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.IsSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            True for RangeCollections
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.IsClipboardSupported(Tek.Scope.Support.IRangeCollection)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.WriteClipboard(Tek.Scope.Support.IRangeCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.LookupValue(Tek.Scope.Support.IRangeEx,System.String,System.Double,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="column"></param>
            <param name="delta"></param>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.WriteStream(Tek.Scope.Support.IRangeCollection,System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String},System.String)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="tw"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.RangeCollectionWriter.Write(Tek.Scope.Support.IRangeCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.AreaWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AreaWriter.Write(Tek.Scope.Support.IArea,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.HistogramWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.HistogramWriter.Write(Tek.Scope.Support.IHistogram,System.String)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="name"></param>
        </member>
        <member name="T:Tek.Scope.Support.VectorWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorWriter.IsSupported(Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorWriter.Write(Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.AnalogWriterType)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.Write(Tek.Scope.Support.IPacketCollection,System.String,Tek.Scope.Support.PacketCollectionType,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.Write(Tek.Scope.Support.IPacketCollection,System.String,Tek.Scope.Support.PacketCollectionType,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="FieldNames"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.Write(Tek.Scope.Support.IPacketCollection,System.IO.TextWriter,System.Char)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="tw"></param>
            <param name="sep"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.WriteUserFile(Tek.Scope.Support.IPacketCollection,System.IO.TextWriter,System.Char,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="tw"></param>
            <param name="sep"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.ColumnNames(Tek.Scope.Support.IPacketCollection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.WriteUserFile(Tek.Scope.Support.IPacketCollection,System.IO.TextWriter,System.Char,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="tw"></param>
            <param name="sep"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.WriteUserFilePacketItem(Tek.Scope.Support.IPacket,System.String)">
            <summary>
             Returns string associated with a field.
            </summary>
            <param name="p"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.WriteUserFilePacket(Tek.Scope.Support.IPacket,System.IO.TextWriter,System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="tw"></param>
            <param name="sep"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.WriteUserFileEx(Tek.Scope.Support.IPacketCollection,System.IO.TextWriter,System.Char,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="tw"></param>
            <param name="sep"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="fieldNames"></param>
        </member>
        <member name="M:Tek.Scope.Support.PacketCollectionWriter.Write(Tek.Scope.Support.IPacketCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Tek.Scope.Support.PacketCollectionType)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsWriter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsWriter.IsSupported(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalEventsWriter.Write(Tek.Scope.Support.IDigitalEvents,System.String,Tek.Scope.Support.DigitalWriterType)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionWriter.DefaultSuffix(System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.Writer">
            <summary>
            Generic file writer
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Writer.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Writer.LoadWriters">
            <summary>
            Loads writer plugins
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Writer.GetFilter(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Writer.GetFilterWriter(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Add(Tek.Scope.Support.IWriter)">
            <summary>
            Adds new Writer
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(System.Object,System.String)">
            <summary>
            Generic Write. This method will take an unknown object
            and try to determine how it should be output.
            </summary>
            <param name="obj">item to be written</param>
            <param name="filename">the file to write to</param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(System.Object,System.String,System.String)">
            <summary>
            Write object to file name using format supplied.
            </summary>
            <param name="obj"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(System.Object)">
            <summary>
            Allows the user to save the specific type to a file using the
            Save file dialog.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IArea)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IResultCollection)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="rc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="pc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteDialog(Tek.Scope.Support.IWaveformDB)">
            <summary>
            Allow user to select output type and then
            save this data type.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IRangeCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteClipboard(Tek.Scope.Support.IRangeCollection,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.Func{Tek.Scope.Support.IRange,System.String,System.String})">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IArea,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IHistogram,System.String)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IPacketCollection,System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,Tek.Scope.Support.PacketCollectionType)">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="columns"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IPacketCollection,System.String,Tek.Scope.Support.PacketCollectionType,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="pc"></param>
            <param name="filename"></param>
            <param name="type"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="FieldNames"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IDigitalEvents,System.String,Tek.Scope.Support.DigitalWriterType)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            This writes a INormalizedVector to a file. The supported file suffixes are
            "csv", "txt", "wfm", "bmp", "png" and "jpg".
            </summary>
            <param name="v">Waveform to be saved</param>
            <param name="filename">The name of the file including the suffix</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.INormalizedVector,System.String,Tek.Scope.Support.AnalogWriterType)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="type"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IFastFrameEx,System.String)">
            <summary>
            This writes a IFastFrame to a file. The supported file suffixes are
            "wfm", "bmp", "png" and "jpg".
            </summary>
            <param name="v">Waveform to be saved</param>
            <param name="filename">The name of the file including the suffix</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            Writes Waveform DB.
            </summary>
            <param name="wfmdb">WaveformDB to write</param>
            <param name="filename">Target file</param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IWaveformDB,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            Writes Waveform DB.
            </summary>
            <param name="wfmdb">WaveformDB to write</param>
            <param name="filename">Target file</param>
            <param name="gratType"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IWaveformDB,System.String,System.Double,Tek.Scope.Support.ColorPalette,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
            <param name="intensity"></param>
            <param name="palette"></param>
            <param name="comment"></param>
            <param name="gratType"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.IResultCollection,System.String)">
            <summary>
            
            </summary>
            <param name="results"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.INormalizedVector,System.IO.FileStream,Tek.Scope.Support.Writer.TextFileType)">
            <summary>
            Writes the passed waveform into the specified file stream.
            </summary>
            <param name="v">Waveform to be written</param>
            <param name="stream">The file stream to write the file to.</param>
            <param name="type">The style of Text file to be written.</param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.INormalizedVector,System.IO.MemoryStream,Tek.Scope.Support.Writer.TextFileType)">
            <summary>
            Writes the passed waveform into the specified memory stream. This is useful to
            support Clipboard copy and Drag Copy.
            </summary>
            <param name="v">Waveform to be written</param>
            <param name="stream">The memory stream to write the file to.</param>
            <param name="type">The style of Text file to be written.</param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.Write(Tek.Scope.Support.INormalizedVector,System.IO.TextWriter,Tek.Scope.Support.Writer.TextFileType)">
            <summary>
            Writes the passed waveform into the specified TextWriter stream.
            </summary>
            <param name="v">Waveform to be written</param>
            <param name="tw">The text file stram to write the file to.</param>
            <param name="type">The style of CSV to be written.</param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(System.Object)">
            <summary>
            Copies passed data to the clipboard.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(Tek.Scope.Support.IResultCollection)">
            <summary>
            Copies the IResultCollection to the clipboard.
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Copies the passed Vector to the clipboard.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(Tek.Scope.Support.IWaveformDB)">
            <summary>
            Copies the passed WaveformDB to the clipboard.
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(Tek.Scope.Support.IPacketCollection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="fieldNames"></param>
        </member>
        <member name="M:Tek.Scope.Support.Writer.WriteToClipboard(Tek.Scope.Support.IRangeCollection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="fieldNames"></param>
        </member>
        <member name="P:Tek.Scope.Support.Writer.Formats">
            <summary>
            List of names of available formats
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Writer.TextFileType">
            <summary>
            Represents the style of text to be written to a CSV files.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Writer.TextFileType.PSPLCSV">
            <summary>
            PSPL CSV Style
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Writer.TextFileType.VSPLCSV">
            <summary>
            VSPL CSV Style
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Writer.TextFileType.PSPLTXT">
            <summary>
            PSPL Text Style (Useful for clipboard to Excel)
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Writer.TextFileType.VSPLTXT">
            <summary>
            VSPL Text Style (Useful for clipboard to Excel)
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CSVWriter">
            <summary>
            Write CSV files
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.#ctor">
            <summary>
            Constructor - this class can not be instantiated.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WriteVSPL(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WriteVSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector)">
            <summary>
            Writes a INormalizedVector to a VSPL style CSV file.
            </summary>
            <param name="tw">Opened TextWriter instance.</param>
            <param name="v">INormalizedVector instance</param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WriteVSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector,System.Char)">
            <summary>
            Writes a INormalizedVector to a VSPL style CSV file.
            </summary>
            <param name="tw">Opened TextWriter instance.</param>
            <param name="v">INormalizedVector instance</param>
            <param name="sep"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WritePSPL(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WritePSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="tw"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.WritePSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector,System.Char)">
            <summary>
            Writes a INormalizedVector to a PSPL style CSV file.
            </summary>
            <param name="tw">Opened TextWriter instance.</param>
            <param name="v">INormalizedVector instance</param>
            <param name="sep"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.Write(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            Writes an INormalized Vector to a CSV file (specfied by name).
            </summary>
            <param name="v">INormalizedVector Instance</param>
            <param name="filename">File name</param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.Write(System.String,System.Double[])">
            <summary>
            Write an array of doubles
            </summary>
            <param name="filename"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.CSVWriter.Write(Tek.Scope.Support.IWaveformDB,System.IO.TextWriter,System.Char)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="tw"></param>
            <param name="sep"></param>
        </member>
        <member name="T:Tek.Scope.Support.TxtWriter">
            <summary>
            Write TXT files
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.#ctor">
            <summary>
            Constructor - this class can not be instantiated.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.WriteVSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector)">
            <summary>
            Writes a INormalizedVector to a VSPL style CSV file.
            </summary>
            <param name="tw">Opened TextWriter instance.</param>
            <param name="v">INormalizedVector instance</param>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.WritePSPL(System.IO.TextWriter,Tek.Scope.Support.INormalizedVector)">
            <summary>
            Writes a INormalizedVector to a PSPL style CSV file.
            </summary>
            <param name="tw">Opened TextWriter instance.</param>
            <param name="v">INormalizedVector instance</param>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.Write(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            Writes an INormalized Vector to a CSV file (specfied by name).
            </summary>
            <param name="v">INormalizedVector Instance</param>
            <param name="filename">File name</param>
        </member>
        <member name="M:Tek.Scope.Support.TxtWriter.Write(System.String,System.Double[])">
            <summary>
            Write an array of doubles
            </summary>
            <param name="filename"></param>
            <param name="v"></param>
        </member>
        <member name="T:Tek.Scope.Support.AWGWfmWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGWfmWriter.Write(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
        </member>
        <member name="T:Tek.Scope.Support.Reader">
            <summary>
            Generic file reader
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Reader.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Reader.#ctor">
            <summary>
            Constructor - this class can not be instantiated.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Add(Tek.Scope.Support.IReader)">
            <summary>
            Add a new reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Tek.Scope.Support.Reader.LoaderReaders">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Identify(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.WaveformCount(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.WaveformNames(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Clear">
            <summary>
            Used to clean up any previous stored info.
            This is only needed if the underlying code is using
            the InPlaceWfmReader. This is because this reader needs to
            be a singleton and this method ensures that all instances
            of InPlaceWfmReader are approprately released.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadDialog">
            <summary>
            Puts up a dialog, allows the user to select a file, and then returns the Read file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.FindReader(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.FindReader(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadNative(System.String)">
            <summary>
            Reads Vector files in native format (rather than INormalizedVector format).
            This is intended for get the native data out. It can be cast as INormalizedVector
            but getting the double value out is many times slower than using reading into and
            INormalizedVector.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadInPlace(System.String)">
            <summary>
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(System.Byte[])">
            <summary>
            This Read method is intented to allow items stored
            in resources (such as wfm or isf files) to be passed into
            Read directly. 
            </summary>
            <param name="array">Array representing the byte array of this file image to be read.</param>
            <returns>The read object</returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(System.String)">
            <summary>
            Reads supported file formats. The returned type is
            determined after opening the file.
            </summary>
            <example>
            <code>
            var v = Reader.Read("clk.wfm");
            </code>
            </example>
            <param name="filename">The name of the file to read in.</param>
            <returns>The object read. null is returned if the file can't be opened or isn't recognized.</returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(System.String,System.Int32)">
            <summary>
            Reads supported file formats. This method is used to read
            some CSV files that have multiple analog channels stored in it.
            </summary>
            <param name="filename">Name of the file</param>
            <param name="channel">Channel number</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            Reads a Visual Trigger area.
            </summary>
            <param name="a">The Visual Trigger area destination</param>
            <param name="filename">The name of the file to read</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            Reads a digital file. 
            </summary>
            <param name="e">The destination of the read</param>
            <param name="filename">The name of the file to be read</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            Reads an analog waveform.
            </summary>
            <param name="v">The destination of the read</param>
            <param name="filename">The name of the file to be read</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            Reads a waveform database (WfmDB) from either a wfm file or a csv files.
            </summary>
            <param name="w">The destination of the read</param>
            <param name="filename">The name of the file to be read</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            Reads a fast frame waveform.
            </summary>
            <param name="ff">The destination of the read</param>
            <param name="filename">The name of the file to be read</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadWfmDB(System.String)">
            <summary>
            Reads supported file formats. 
            </summary>
            <param name="filename">Filename</param>
            <returns>INormalizedVector containing the waveform</returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadVector(System.String)">
            <summary>
            Reads supported file formats. 
            </summary>
            <param name="filename">Filename</param>
            <returns>INormalizedVector containing the waveform</returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadFastFrame(System.String)">
            <summary>
            Reads supported file formats. Supported
            file suffixes is "wfm".
            </summary>
            <param name="filename">Filename</param>
            <returns>IFastFrame containing the waveform</returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadVector(Tek.Scope.Support.INormalizedVectorEx,System.String)">
            <summary>
            Reads supported file formats. 
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.ReadFastFrame(Tek.Scope.Support.IFastFrameEx,System.String)">
            <summary>
            Reads supported file formats. Supported
            file suffixes is "wfm".
            </summary>
            <param name="ff"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Reader.Read(Tek.Scope.Support.IPacketCollection@,System.String)">
            <summary>
            Reads a packet collection
            </summary>
            <param name="pc">The destination of the read</param>
            <param name="filename">The name of the file to be read</param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.CSVReaderTimeValue">
            <summary>
            Reads Time/Value CSV files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderTimeValue.LineCount(System.String)">
            <exclude/>
        </member>
        <member name="P:Tek.Scope.Support.CSVReaderTimeValue.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CSVReaderTimeValue.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CSVReaderPSPL">
            <summary>
            Reads PSPL Analog/Digital CSV files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Names(System.String)">
            <summary>
            Names of channels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReaderPSPL.ParseField(System.String,Tek.Scope.Support.BitValue@)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.CSVReaderPSPL.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CSVReaderPSPL.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CSVReader2KAnalog">
            <summary>
            Reads VSPL 2K Analog CSV files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader2KAnalog.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.CSVReader2KAnalog.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CSVReader2KAnalog.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CSVReader4K">
            <summary>
            Reads VSPL 4K Analog/Digital CSV files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.CSVReader4K.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.CSVReader4K.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.CSVReader4K.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.VSPLISFReader">
            <summary>
            Reads PSPL wfm files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.ReadIsf(Tek.Scope.Support.INormalizedVectorEx,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VSPLISFReader.ArrayToInt(System.Byte[])">
            <exclude/>
        </member>
        <member name="P:Tek.Scope.Support.VSPLISFReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VSPLISFReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.PSPLWfmReader">
            <summary>
            Reads PSPL wfm files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.PSPLWfmReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.PSPLWfmReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.PSPLWfmReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AWGReader">
            <summary>
            Reads AWG wfm files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.AWGReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AWGReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AWGPatReader">
            <summary>
            Reads AWG Pat wfm files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Swizzle(System.UInt32)">
            <summary>
            To D13-D1 order
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AWGPatReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.AWGPatReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AWGPatReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.AgilentReader">
            <summary>
            Reads Agilent BIN files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.AgilentReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.AgilentReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.AgilentReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.LecoryReader">
            <summary>
            Reads Lecroy TRC files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.ReadBinarySize(System.IO.BinaryReader,System.Int32@)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.LecoryReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.LecoryReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LecoryReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.MaskReader">
            <summary>
            Reads Mask (.msk) files.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Names(System.String)">
            <summary>
            Names of chennels (if available)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.IsRecognizedType(System.String)">
            <summary>
            Returns true if this reader recognizes and
            can read file.
            </summary>
            <param name="filename">The path of the file to check.</param>
            <returns>True if this reader can read the passed file.</returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Type(System.String)">
            <summary>
            Returns the file type, if it can be determined.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Count(System.String)">
            <summary>
            Count Waveforms in the specified file.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(System.String)">
            <summary>
            Read the file and return the result. This is equivalent to the call Read(file, 0).
            </summary>
            <param name="filename">File Path</param>
            <returns>null if can't open file, otherwise return interface instance</returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(System.String,System.Int32)">
            <summary>
            Reads the file and returnd the read item specified by index. 
            </summary>
            <param name="filename">File Path</param>
            <param name="index">index into the waveforms. Legal values are 0 to Count(filename)-1</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.INormalizedVectorEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IFastFrameEx@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IWaveformDB@,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IWaveformDB@,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(Tek.Scope.Support.IArea@,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.IsRecognizedType(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.MaskReader.Read(System.Byte[])">
            <summary>
            
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.MaskReader.Name">
            <summary>
            Name of Reader
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.MaskReader.Suffix">
            <summary>
            Returns string usable in the Open Dialog.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.InteropPluginHandler">
            <summary>
            This is an interface that every Plugin Interop Service handler must implement.
            
            ScopeSupportBase scans the scope system directory in order to find files with the
            name pattern *InteropPlugin*.dll and scans for this interface.  If it finds it, it 
            calls Init() on the interop service dll.
            
            This allows clients like DPOJet to register a dll with this class at a later
            date so that clients can insert a function into it.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InteropPluginHandler.Init">
            <summary>
            Initializes the plugin handler and returns an array of supported Attributes for plugins
            that it can handle.   'These must be globally unique.  (e.g Only Dpojet handles DPOJetAttribute, only scope mathmeas
            handles MathAttribute
            e.g.  MATH for embedded scope math, or DPOJET for dpojet plugins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.InteropPluginHandler.RegisterFunction(System.String,System.Delegate)">
            <summary>
            Function that implements a registration mechanism with the interopPluginHandler.
            e.g.   'we're registering function 'ZippyFFT' with the client we registered with.
            </summary>
            <param name="funcName"></param>
            <param name="testdlg"></param>
        </member>
        <member name="M:Tek.Scope.Support.InteropPluginHandler.Unregister(System.String)">
            <summary>
            Function that supplies an unregister for the specified function
            </summary>
            <param name="functionName"></param>
        </member>
        <member name="T:Tek.Scope.Support.PluginInterop">
            <summary>
            Interop class for calling plugins registered with executables outside this process space
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PluginInterop.Load">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PluginInterop.RegisterFunction(System.String,System.Delegate)">
            <summary>
            Registers a function with the specified client name for callback
            </summary>
            <param name="FunctionName"></param>
            <param name="callback"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Tek.Scope.Support.PluginInterop.Unregister(System.String)">
            <summary>
            Unregisters a function with the specified client name for callback
            </summary>
            <param name="functionName"></param>
            /// <returns>bool</returns>
        </member>
        <member name="T:Tek.Scope.Support.PluginInteropError">
            <summary>
            PluginInteropError can be used by plugins to report custom error messages to the user via TekScope.
            The error message for the user should be put into the string parameter "message" in the exception class.
            The first 64 characters of this message will be used for the error reported by TekScope.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PluginInteropError.#ctor">
            <summary>
            Sets the error message to be "Error reported in plugin"
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.PluginInteropError.#ctor(System.String)">
            <summary>
            Uses the string specified by the user
            </summary>
            <param name="message">Custom error message TekScope should use</param>
        </member>
        <member name="M:Tek.Scope.Support.PluginInteropError.#ctor(System.String,System.Exception)">
            <summary>
            Users the string specified by the user. Inner exception is ignored.
            </summary>
            <param name="message">Custom error message TekScope should use</param>
            <param name="inner">Ignored by TekScope</param>
        </member>
        <member name="M:Tek.Scope.Support.PluginInteropError.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialized error message
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="T:Tek.Scope.Support.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.Bits">
             <summary>
               Looks up a localized string similar to # Bits
            Decoder,Bits
            Version,2
            
            $$COLUMN
            #Column Name,Field/Property Name,Format,Hidden,Detail
            Start Time,$StartTime,Time,false,false
            Type,$Name,Standard,true,false
            Data,Data,Standard,false,false
            Error/Warning,$ErrorWarningInfo,Standard,true,false
            Stop Time,$StopTime,Time,true,false
            $$END
            
            $$MAP
            $$END
            
            $$DISPLAY
            #Packet Name,Field Name,Attribute,Mask,Value,Bit Count,Error,Warning,Color,Shape
            *,*,*,0,*,*,*,*,BusCyan,HexBox
            $$END
            
            $$FORMAT
            #Packet Name,Field Name,Attribute,Mask,Bit Count, [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.DigitalEvents">
             <summary>
               Looks up a localized string similar to # DigitalEvents
            Decoder,DigitalEvents
            Version,2
            
            $$COLUMN
            #Column Name,Field/Property Name,Format,Hidden,Detail
            Start Time,$StartTime,Time,false,false
            Type,$Name,Standard,true,false
            Data,Data,Standard,false,false
            Error/Warning,$ErrorWarningInfo,Standard,true,false
            Stop Time,$StopTime,Time,true,false
            $$END
            
            $$MAP
            $$END
            
            $$DISPLAY
            #Packet Name,Field Name,Attribute,Mask,Value,Bit Count,Error,Warning,Color,Shape
            *,*,*,0,*,*,*,*,BusCyan,HexBox
            $$END
            
            $$FORMAT
            #Packet Name,Field Name,Attribu [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.Marks">
             <summary>
               Looks up a localized string similar to # Marks
            Decoder,Marks
            Version,2
            
            $$COLUMN
            #Column Name,Field/Property Name,Format,Hidden,Detail
            Focus,$Focus,Time,false,false
            Owner,$Attribute,Standard,false,false
            Source,Source,Standard,false,false
            Label,Label,Standard,false,false
            $$END
            
            $$MAP
            $$END
            
            $$DISPLAY
            #Packet Name,Field Name,Attribute,Mask,Value,Bit Count,Error,Warning,Color,Shape
            *,*,*,0,*,*,*,*,BusCyan,Mark
            $$END
            
            $$FORMAT
            #Packet Name,Field Name,Attribute,Mask,Bit Count,Error,Warning,Format Long,Short,Long No Label
            *,Label [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Tek.Scope.Support.Properties.Resources.Pin">
             <summary>
               Looks up a localized string similar to # Pin
            Decoder,Pin
            Version,2
            
            $$COLUMN
            #Column Name,Field/Property Name,Format,Hidden,Detail
            Start Time,$StartTime,Time,false,false
            Type,$Name,Standard,true,false
            Data,Data,Standard,false,false
            Error/Warning,$ErrorWarningInfo,Standard,true,false
            Stop Time,$StopTime,Time,true,false
            $$END
            
            $$MAP
            #Packet Name,Field Name,Attribute,Mask,Value,Bit Count,Error,Warning,String Long,Short,Long No Label
            # decoder defines no data when multiple transitions
            *,*,*,0,*,0,*,*,M,M,M
            $$END
            
            $$DISPLAY
            #Packe [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Tek.Scope.Support.RealResults">
            <summary>
            This class represents real values with a name and units.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.#ctor(System.Double,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="name"></param>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.#ctor(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="name"></param>
            <param name="units"></param>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.op_Implicit(Tek.Scope.Support.RealResults)~System.Double">
            <summary>
            Allows a result to be used in an expression with doubles.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RealResults.ToString">
            <summary>
            Writes the Value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.RealResults.Name">
            <summary>
            Name of the result
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RealResults.Value">
            <summary>
            The value for the results
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.RealResults.Units">
            <summary>
            The units for the results
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.RangeExFormatter.Format(System.String,Tek.Scope.Support.DescriptionStyleType,Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.RangeExFormatter.Format(System.String,Tek.Scope.Support.DescriptionStyleType,Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.Result">
            <summary>
            A heap implimentation of IResult
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Result.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Result.#ctor(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Result.#ctor(Tek.Scope.Support.IRangeEx,System.Object)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Result.#ctor(System.Double,System.Double,System.Double,System.Object)">
            <summary>
            
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="focus"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Result.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.CompareTo(System.Object)">
            <summary>
            Compares the item to another IRange item.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.IsNumber(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.CompareValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.Result.CompareTo(Tek.Scope.Support.IResult)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.Result.ToString">
            <summary>
            Return a string value for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.Copy">
            <summary>
            Make a Copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Result.Tek#Scope#Support#IResult#ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Result.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Value">
            <summary>
            Returns the value associated with this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Units">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Description">
            <summary>
            A description of the result
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Result.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SResult">
            <exclude/>
             <summary>
             A struct implimentation of IResult
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.SResult.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.CompareTo(System.Object)">
            <summary>
            Compares the item to another IRange item.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.IsNumber(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.ToNumber(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.CompareValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.ToString">
            <summary>
            Return a string value for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SResult.CompareTo(Tek.Scope.Support.IRangeEx)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.SResult.CompareTo(Tek.Scope.Support.IResult)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Value">
            <summary>
            Returns the value associated with this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Units">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Description">
            <summary>
            A description of the result
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SResult.Display">
            <summary>
            Display information
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ResultCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ResultCollectionBase">
            <summary>
            Abstract ResultCollection class. 
            
            This class is intended to simply the development of IResultCollection implementations.
            
            You must override the following:
            int Count, IResult this[int index], void Add(IResult v), void Sort().
            All other methods and properties may be overriden. It's highly recommended
            that you handle void Commit() and Dispose().
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._mean">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._min">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._max">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._stddev">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._begin">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._end">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollectionBase._format">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Contains(System.Double)">
            <summary>
            Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.ToDouble(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.CalcStats">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.GetFormat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.SetFormat(System.String)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.FindIndex(System.Double,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Find(System.Double)">
            <summary>
            Returns the items at the specified
            time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.FindIndexes(Tek.Scope.Support.IRange,System.Int64@,System.Int64@)">
            <summary>
            Find the fields that are encompassed in the
            specified range.
            </summary>
            <param name="range"></param>
            <param name="startFieldIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.RangeItem(Tek.Scope.Support.IRange,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.TimeToIndex(System.Double,Tek.Scope.Support.RangeTime)">
            <summary>
            
            </summary>
            <param name="time"></param>
            <param name="rangeTime"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.TimeToIndex(System.Double)">
            <summary>
            Returns Time at index
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IArrayCollection{Tek#Scope#Support#IRangeEx}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Add(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.GetEnumerator">
            <summary>
            Allows foreach and linq to work with this interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to make the previous GetEnumerator() method to
            work with foreach and linq.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.FindStartIndex(Tek.Scope.Support.IRange,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.FindStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            Needlessly slow, need to fix this
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.FindEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Find(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.InterectStartIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.IntersectEndIndex(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Sort(System.Func{Tek.Scope.Support.IRangeEx,Tek.Scope.Support.IRangeEx,System.Boolean})">
            <summary>
            
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.System#Collections#Generic#IEnumerable{Tek#Scope#Support#IRange}#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.CompareTo(Tek.Scope.Support.IRangeCollection)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.ToString(Tek.Scope.Support.IResult,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.ToString(Tek.Scope.Support.IRangeEx,Tek.Scope.Support.DescriptionStyleType)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.CopyRange(System.Int32,System.Int32)">
            <summary>
            Get SubRange
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Contains(Tek.Scope.Support.IRangeEx)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Contains(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Add(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="focus"></param>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.DisposeManaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.DisposeUnmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollectionBase.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.StopTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.SourceName">
            <summary>
            Accesses the source name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Name">
            <summary>
            Accesses the name of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Duration">
            <summary>
            Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Focus">
            <summary>
            Returns the focus of this item. This value must be
            between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Begin">
            <summary>
            Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.End">
            <summary>
            Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Mean">
            <summary>
            Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Minimum">
            <summary>
            Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Maximum">
            <summary>
            Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.StandardDeviation">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.PeakToPeak">
            <summary>
            Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.VUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IRangeCollection#Format">
            <summary>
            Multiple format statements. The first one, if it's defined
            is the default formatting. Otherwise "%s" is used.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.HUnits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.DescriptionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IRangeCollection#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Item(System.Int64)">
            <summary>
            Field indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Ranges">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollectionBase.Tek#Scope#Support#IIndexer{Tek#Scope#Support#IRange}#Count">
            <summary>
            Number of Fields
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollection._array">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.ResultCollection._sorted">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.SetSize(System.Int64)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.UpdateCount(System.Int64)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.Add(Tek.Scope.Support.IResult)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.Sort">
            <summary>
            Sorts an unordered list.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.ResultCollection.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.ResultCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.Settings">
            <summary>
            Used to store symbols that are interesting to some underlying methods. Sort of a symbol table for paramters.
            Note that Push() and Pop() are used to control scoping.
            </summary>
            <example>
            <code>
            </code>
            </example>
        </member>
        <member name="F:Tek.Scope.Support.Settings._dicts">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.Settings.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Settings.#ctor(System.String)">
            <summary>
            Constructor initialized with a settings string.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.#ctor(Tek.Scope.Support.ISettings)">
            <summary>
            Constructor initialized with another setting.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Create(System.String)">
            <summary>
            Creates new Attribute instance with the specified attribute string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Create(System.String,System.Double)">
            <summary>
            Creates a new attribute instance with the specifed double value defined.
            </summary>
            <param name="name"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsWhite(System.Char)">
            <summary>
            Skips items used by parser. This allows attribute definitions
            to be interchanged with the parser.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ParseSkipWhite(System.String,System.Int32@)">
            <summary>
            Skips whitespace
            </summary>
            <param name="s">string to parse</param>
            <param name="index">current index</param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ParseValue(System.String,System.Int32@)">
            <summary>
            Extracts the next value
            </summary>
            <param name="s">string to parse</param>
            <param name="index">current index</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ParseName(System.String,System.Int32@)">
            <summary>
            Extracts the next name
            </summary>
            <param name="s">string to parse</param>
            <param name="index">current index</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ParseAssign(System.String,System.Int32@)">
            <summary>
            Find the next assignement symbol
            </summary>
            <param name="s">string to parse</param>
            <param name="index">current index</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ParseSeparator(System.String,System.Int32@)">
            <summary>
            Looks for a whitespace or a comma as a separator
            </summary>
            <param name="s"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Evaluate(System.String)">
            <summary>
            Parse the string and assign the names to the specified value.
            </summary>
            <param name="s">string to parse</param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Push">
            <summary>
            Add a new level of scoping to the Environment space. Existing names can be
            overridden (but not removed) using this technique.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Push(System.String)">
            <summary>
            Pushes and then places the state represented by the string into the Settings
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Push(Tek.Scope.Support.ISettings)">
            <summary>
            Pushes and then places the current state of attr into the Settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Pop">
            <summary>
            Removes the current level of scoping (though the top/global scoping can not be removed).
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Settings.WriteCSV(System.String)">
            <summary>
            Write attribute to CSV file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ReadCSV(System.String)">
            <summary>
            ReadCSV file into attribute
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Contains(System.String)">
            <summary>
            Check for key in Attribute dictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Contains(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsNumericDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and it contains a numeric value.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsSymbolDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsStringDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and it contains a string value.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsObjectDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field exists
            and it contains neither a string nor a double value.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.IsBooleanDefined(System.String,System.String)">
            <summary>
            This method returns true if the specified field contains
            a boolean value. Please note that GetBoolean will look
            add numbers and strings too.
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.GetString(System.String,System.String,System.String)">
            <summary>
            This method returns the string value associated with the specified
            symbol name. If the name does not exist, then the passed default value
            is used.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <param name="defaultValue">Default value, returned if the named symbol does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.GetNumber(System.String,System.String,System.Double)">
            <summary>
            This method returns the number value associated with the specified
            symbol name. If the name does not exist, then the passed default value
            is used.
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <param name="defaultValue">Default value, returned if the named symbol does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="sourceName"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.GetObject(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="sourceName">Optional Source Name (used for name scoping)</param>
            <param name="name">Symbol Name</param>
            <param name="defaultValue">Default value, returned if the named symbol does not exist</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Warning(System.String,System.Object[])">
            <summary>
            Formats a warning string.
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:Tek.Scope.Support.Settings.ToString">
            <summary>
            Returns a string that represents the current attribute state. This
            string can be passed to Evaluate to recreate this current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Settings.Copy">
            <summary>
            Copies current settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Settings.IsAborting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Settings.UseParallel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Settings.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Settings.IsEmpty">
            <summary>
            Returns true if the Settings are empty
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Settings.Item(System.String)">
            <summary>
            Added/Gets a symbol.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.Settings.Names">
            <summary>
            Returns key names
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Settings.Warnings">
            <summary>
            A list of warning strings.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolTable">
            <summary>
            A basic symbol table class.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolTable.data">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.SymbolTable.Clear">
            <summary>
            Clears all of the symbols from the symbol table.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolTable.GetByName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolTable.SetByName(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.SymbolTable.Item(System.String)">
            <summary>
            Allows individual symbols to be set or queried.
            </summary>
            <param name="name">symbol name</param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.SymbolTable.Names">
            <summary>
            Allows all of the symbol names to be iterated through.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ColorPalette">
            <summary>
            Define color palettes that match our standard scope palettes
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.CH1">
            <summary>
            Channel 1 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.CH2">
            <summary>
            Channel 2 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.CH3">
            <summary>
            Channel 3 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.CH4">
            <summary>
            Channel 4 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.M1">
            <summary>
            Math 1 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.M2">
            <summary>
            Math 2 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.M3">
            <summary>
            Math 3 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.M4">
            <summary>
            Math 4 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.R1">
            <summary>
            Reference 1 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.R2">
            <summary>
            Reference 2 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.R3">
            <summary>
            Reference 3 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.R4">
            <summary>
            Reference 4 Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.MONOGREEN">
            <summary>
            Mono Green Palette
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.TEMPERATURE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.SPECTRAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.ColorPalette.ENHANCEDTEMPERATURE">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.GraticuleType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.GraticuleType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.GraticuleType.Frame">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.GraticuleType.Crosshairs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SimpleRenderers">
            <exclude/>
             <summary>
             This class contains several low performance renderers.
             These are good enough to do basic rendering, but are not
             intended to be fast.
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.getBreakPoint(System.Double,System.Double)">
            <summary>
             Generate coarse threshold from a gamma function based curve with maxPix
             as the upper bound.  Choose different curves for different intensity
             settings.
            </summary>
            <param name="inten">intesity value from 0-99 (1-100%)</param>
            <param name="threshHold"></param>
            <returns>calculated thresholds in the thresholds array</returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.dmxMapGenerateGammaThresholds(System.UInt64,System.UInt64,System.Double,System.UInt64[]@)">
            <summary>
            
            </summary>
            <param name="maxPixIn"></param>
            <param name="minPixIn"></param>
            <param name="intensityIn"></param>
            <param name="thresholds"></param>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.temperature">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.enhancedtemperature">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.spectral">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.ch1palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.ch2palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.ch3palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.ch4palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.m1palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.m2palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.m3palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.m4palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.r1palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.r2palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.r3palette">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.SimpleRenderers.r4palette">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.LookupColor(System.UInt64,Tek.Scope.Support.ColorPalette)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="palette"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ValueToThresholdIndex(System.UInt64,System.UInt64[])">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.RenderWmfDBToBitmapSourceWithGraticule(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="intesity"></param>
            <param name="palette"></param>
            <param name="comment"></param>
            <param name="grattype"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.RenderWithGraticuleAndComments(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.BitmapSource@,System.Windows.Media.DrawingContext@,Tek.Scope.Support.GraticuleType)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="intesity"></param>
            <param name="palette"></param>
            <param name="comment"></param>
            <param name="margin"></param>
            <param name="minorTickWidth"></param>
            <param name="majorTickWidth"></param>
            <param name="textArea"></param>
            <param name="source"></param>
            <param name="dc"></param>
            <param name="gratType"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmap(Tek.Scope.Support.IWaveformDB)">
            <summary>
            Converts a WaveformDB into a bitmap for drawing or printing. 
            Intensity and color palette use the same default values PSPL
            scopes use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmap(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette)">
            <summary>
            Converts a WaveformDB into a bitmap for drawing or printing.
            </summary>
            <param name="wfmdb">Waveform Database to render</param>
            <param name="intensity">0.0-100.0</param>
            <param name="color">Color palette to use</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapSource(Tek.Scope.Support.IWaveformDB)">
            <summary>
            Converts a WaveformDB into a BitmapSource for drawing or printing. 
            Intensity and color palette use the same default values PSPL
            scopes use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapSource(System.Int64[],System.Int32,System.Int32,System.Double,Tek.Scope.Support.ColorPalette)">
            <summary>
            
            </summary>
            <param name="wfmDB"></param>
            <param name="cols"></param>
            <param name="rows"></param>
            <param name="intensity"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapSource(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette)">
            <summary>
            Converts a WaveformDB into a BitmapSource for drawing or printing.
            </summary>
            <param name="wfmdb">Waveform Database to render</param>
            <param name="intensity">0.0-100.0</param>
            <param name="color">Color palette to use</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapWithGraticule(Tek.Scope.Support.IWaveformDB)">
            <summary>
            Converts a WaveformDB into a bitmap with a graticule for drawing or printing. 
            Intensity and color palette use the same default values PSPL
            scopes use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapWithGraticule(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            Converts a WaveformDB into a Bitmap with a graticule for drawing or printing.
            </summary>
            <param name="wfmdb">Waveform Database to render</param>
            <param name="intensity">0.0-100.0</param>
            <param name="color">Color palette to use</param>
            <param name="comment">String to write to bitmap</param>
            <param name="gratType"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapSourceWithGraticule(Tek.Scope.Support.IWaveformDB,Tek.Scope.Support.GraticuleType)">
            <summary>
            Converts a WaveformDB into a BitmapSource with a graticule for drawing or printing. 
            Intensity and color palette use the same default values PSPL
            scopes use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SimpleRenderers.ToBitmapSourceWithGraticule(Tek.Scope.Support.IWaveformDB,System.Double,Tek.Scope.Support.ColorPalette,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            Converts a WaveformDB into a BitmapSource with a graticule for drawing or printing.
            </summary>
            <param name="wfmdb">Waveform Database to render</param>
            <param name="intensity">0.0-100.0</param>
            <param name="palette">Color palette to use</param>
            <param name="comment">String to write to BitmapSource</param>
            <param name="gratType"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.BitmapBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BitmapBuffer.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            
            </summary>
            <param name="Image"></param>
        </member>
        <member name="P:Tek.Scope.Support.BitmapBuffer.BufferPointer">
            <summary>
            The pointer to the BitmapImage's native buffer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitmapBuffer.BufferSize">
            <summary>
            The size of BitmapImage's native buffer
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.BitmapBuffer.Stride">
            <summary>
            The stride of BitmapImage's native buffer
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ImageWriter">
            <exlcude/>
             <summary>
             
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.ImageWriter.Write(Tek.Scope.Support.IWaveformDB,System.String,System.Double,Tek.Scope.Support.ColorPalette,System.String,Tek.Scope.Support.GraticuleType)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
            <param name="intesity"></param>
            <param name="palette"></param>
            <param name="comment"></param>
            <param name="gratType"></param>
        </member>
        <member name="T:Tek.Scope.Support.BoolMatch">
            <summary>
            Used by SymbolMatch to represent
            boolean match options
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BoolMatch.False">
            <summary>
            Match False
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BoolMatch.True">
            <summary>
            Match True
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.BoolMatch.Either">
            <summary>
            Match either False or True
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldType">
            <summary>
            Is FieldName an actual Field or a Packet Property
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FieldType.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FieldType.Property">
            <summary>
            Packet Property
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FieldRecord">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DisplayModeRecord">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.BoolMatchRecord">
            <summary>
            Used for Error, Warning
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.StringRecord">
            <summary>
            Used for Bus Label, Packet and Field Names, Attribute
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FormatRecord">
            <summary>
            Used for default, short and LongNoLabel Symbols/Format
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FormatsRecord">
            <summary>
            Holds default, short and LongNoLabel Symbols/Format
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FormatsRecord.SymbolDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FormatsRecord.SymbolShort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FormatsRecord.SymbolLongNoLabel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.IndicesRecord">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ValueWithWild">
            <summary>
            Used for actual value
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.MappingTable">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.TableEntryType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Tek.Scope.Support.TableEntryType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TableEntryType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TableEntryType.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TableEntryType.Stream">
            <summary>
            Stream
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.LookupTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LookupTable.Id">
            <summary>
            Table Identifier
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LookupTable.BiDirectional">
            <summary>
            Table Direction
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LookupTable.Name1">
            <summary>
            Names of to/from
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LookupTable.Type1">
            <summary>
            Type of to/from
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.LookupTable.Lookup1to2">
            <summary>
            Lookup Dictionary
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DecoderTables">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolMatch">
            <summary>
            Represents a Match item and it's return result
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.Match(Tek.Scope.Support.IField)">
            <summary>
            Matcher - bus, packet and field already matched
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.Match(Tek.Scope.Support.IField,System.UInt64)">
            <summary>
            Matcher - bus, packet and field already matched
            </summary>
            <param name="f"></param>
            <param name="formatMask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.MatchNV(Tek.Scope.Support.IField,System.UInt64,Tek.Scope.Support.IBits)">
            <summary>
            Matcher - bus, packet and field already matched
            </summary>
            <param name="f"></param>
            <param name="formatMask"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.Match(Tek.Scope.Support.SymbolMatch)">
            <summary>
            Matcher - full match
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.Equal(Tek.Scope.Support.SymbolMatch)">
            <summary>
            Equal - check for same
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolMatch.EqualNV(Tek.Scope.Support.SymbolMatch)">
            <summary>
            Equal - check for same
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.BusName">
            <summary>
            BusName to match, "*" means always return
            true on this match.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.PacketName">
            <summary>
            PacketName to match, "*" means always return
            true on this match.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Field">
            <summary>
            Field to match, "*" means always return
            true on this match.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Attribute">
            <summary>
            Attribute to match, "*" means always return
            true on this match.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.FormatMask">
            <summary>
            Format Mask to match at least one 'true' bit, 0 matches all
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.BitCount">
            <summary>
            BitCount to match, -1 for match any, 0 for match no data
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Warn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.UseValueDictionary">
            <summary>
            Use Value Dictionary
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.WildValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.ValueDictionary">
            <summary>
            Value Dictionary
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Substitutions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolMatch.Display">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolSubstitution">
            <exclude/>
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.WriteBytesToFile(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.#cctor">
            <summary>
            Load files automatically.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.BuildUnknownSymbol">
            <summary>
            builds a unknown entry into the symbol table which allows for the
            unknown display shape/color
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsDecoder(System.String)">
            <summary>
            Does the table exist
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsGenerated(System.String)">
            <summary>
            Is the table a generated table
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.ClearSymbolFileNameAssociation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.SymbolFileErrorFromString(System.String)">
            <summary>
            
            </summary>
            <param name="symbolfile"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.SymbolFileError(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.LoadSymbols(System.String)">
            <summary>
            Loads the specified symbol table file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.BuildSymbols(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            builds a symbol table based on field name list
            </summary>
            <param name="decoderName"></param>
            <param name="names"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.AddSymbol(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            adds a symbol to the symbol table
            </summary>
            <param name="decoderName"></param>
            <param name="busName"></param>
            <param name="fieldName"></param>
            <param name="symbol"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.AddSymbols(System.String,System.String,System.String,System.String)">
            <summary>
            adds symbols to the symbol table
            </summary>
            <param name="decoderName"></param>
            <param name="busName"></param>
            <param name="fieldName"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.RemoveSymbols(System.String,System.String,System.String)">
            <summary>
            removes symbols from the symbol table
            </summary>
            <param name="decoderName"></param>
            <param name="busName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Decoders">
            <summary>
            Enumerates decoder names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FindDecoderTable(System.String)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Find(System.String,System.String,Tek.Scope.Support.IField,Tek.Scope.Support.SymbolFlags,System.UInt64,Tek.Scope.Support.IBits@)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packet"></param>
            <param name="f"></param>
            <param name="symbolFlags"></param>
            <param name="formatMask"></param>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.GetSymbolFileContents">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.GetSymbolFileContents(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatBits(System.String,Tek.Scope.Support.IRange,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="range"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Format(System.String,System.String,Tek.Scope.Support.IField,Tek.Scope.Support.FormatStyleType)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="f"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Format(System.String,System.String,System.Int32,System.Int32,Tek.Scope.Support.IField,Tek.Scope.Support.FormatStyleType)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="f"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Format(System.String,System.String,System.Int32,System.Int32,Tek.Scope.Support.IField,Tek.Scope.Support.FormatStyleType,Tek.Scope.Support.RadixType,System.UInt64)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="f"></param>
            <param name="type"></param>
            <param name="radix"></param>
            <param name="formatMask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Formats(System.String,System.String,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Formats(System.String,System.String,System.Int32,System.Int32,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DefaultFormat(Tek.Scope.Support.IBits,Tek.Scope.Support.RadixType)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DefaultFieldFormat(Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.BitsExtract(System.String,Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolSubstitution.Formatter">
            <summary>
            Allows external party to provide Formatter lookup.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolSubstitution.Validator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatField(System.String,System.Int32,System.Int32,Tek.Scope.Support.IField,Tek.Scope.Support.IBits,Tek.Scope.Support.RadixType)">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="f"></param>
            <param name="b"></param>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatMacAddress(Tek.Scope.Support.IBits,System.Boolean)">
            <summary>
             Format a LAN Mac Address
            </summary>
            <param name="b">Bits of the MAC Address</param>
            <param name="bUpperCase">True if hex should be uppercase only</param>
            <returns>Formatted string in XX:XX:XX:XX:XX:XX format</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatIPAddress(Tek.Scope.Support.IBits)">
            <summary>
            Format a LAN IP Address
            </summary>
            <param name="b">Bits containing the IP Address (should be either 32 or 128 bits)</param>
            <returns>formatted string in either IPv4 or IPv6 format depending upon bit count of ip address</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatHostName(Tek.Scope.Support.IBits)">
            <summary>
            Does a reverse DNS lookup of the passed IP address.
            Results are cached so the expense per host is only paid once.
            </summary>
            <param name="b">Bits containing the ip address</param>
            <returns>The string represeting the host name (if found), otherwise the ip address string</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatAscii(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatAsciiQuoted(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatIndex(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatIP(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatFixedDecimal(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatFixedDecimal(System.Int32,System.UInt64)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.SpaceFixedDecimal(System.Int32)">
            <summary>
            
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DisplayModeLookup(System.String,System.String,Tek.Scope.Support.SymbolFlags@,Tek.Scope.Support.RadixType@,System.Boolean@,System.UInt64@)">
            <summary>
            Lookup display mode
            </summary>
            <param name="decoder"></param>
            <param name="displaymode"></param>
            <param name="flags"></param>
            <param name="radix"></param>
            <param name="byPacket"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DisplayModes(System.String)">
            <summary>
            Enumerates display
            </summary>
            <param name="decoder"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DisplayModesCount(System.String)">
            <summary>
            Number of modes
            </summary>
            <param name="decoder"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DisplayModeDefault(System.String)">
            <summary>
            Display Mode Default
            </summary>
            <param name="decoder"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.DisplayModeTip(System.String,System.String)">
            <summary>
            Display Mode Tip
            </summary>
            <param name="decoder"></param>
            <param name="displayMode"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsDisplayMode(System.String,System.String)">
            <summary>
            Check Display Mode Labels
            </summary>
            <param name="decoder"></param>
            <param name="displayMode"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsDisplayModeSpecial(System.String,System.String,System.UInt64)">
            <summary>
            Check Display Mode Special
            </summary>
            <param name="decoder"></param>
            <param name="displayMode"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Display(System.String)">
            <summary>
            Enumerates display
            </summary>
            <param name="decoder"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatDisplay(System.String,System.String,Tek.Scope.Support.IField)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="packetname"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatDisplay(System.String,System.String,Tek.Scope.Support.IRange)">
            <summary>
            Format RangeCollection Items
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FormatDisplay(System.String,System.String,Tek.Scope.Support.IResult)">
            <summary>
            Format ResultCollection Items
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsByName(System.String)">
            <summary>
            Enumerate through a Decoder's Fields.
            </summary>
            <param name="decoder"></param>
            <returns>enumeration of columns</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsByFieldNames(System.String)">
            <summary>
            Enumerate through a Decoder's Fields.
            </summary>
            <param name="decoder"></param>
            <returns>enumeration of columns</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsCount(System.String)">
            <summary>
            Determines the total number of fields for a Decoder.
            </summary>
            <param name="decoder"></param>
            <returns>total number of fields</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsFieldCount(System.String)">
            <summary>
            Determines the number of fields for a Decoder.
            </summary>
            <param name="decoder"></param>
            <returns>total number of fields</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsFieldName(System.String,System.String)">
            <summary>
            For given field return Field Name (Field Name or Packet Property)
            </summary>
            <param name="decoder"></param>
            <param name="name"></param>
            <returns>Field Name</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsFieldsField(System.String,System.String)">
            <summary>
            Is given field for an actual field
            </summary>
            <param name="decoder"></param>
            <param name="name"></param>
            <returns>whether field or not</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsFormat(System.String,System.String)">
            <summary>
            Is given field formatted
            </summary>
            <param name="decoder"></param>
            <param name="columnName"></param>
            <returns>whether visible</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsRadix(System.String,System.String)">
            <summary>
            Given field's radix
            </summary>
            <param name="decoder"></param>
            <param name="columnName"></param>
            <returns>radix</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.FieldsFormatMask(System.String,System.String)">
            <summary>
            Given field's format mask
            </summary>
            <param name="decoder"></param>
            <param name="columnName"></param>
            <returns>format mask</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsFieldsVisible(System.String,System.String)">
            <summary>
            Is given field visible
            </summary>
            <param name="decoder"></param>
            <param name="columnName"></param>
            <returns>whether visible</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsFieldsByFieldVisible(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsFieldsDetail(System.String,System.String)">
            <summary>
            Is given field using detail view
            </summary>
            <param name="decoder"></param>
            <param name="name"></param>
            <returns>whether detail view</returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.IsFieldsByFieldDetail(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.LookupDictionary(System.String,System.String,Tek.Scope.Support.TableEntryType@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="tableName"></param>
            <param name="type"></param>
            <param name="lookupDict"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.LookupDictionary(System.String,System.String,Tek.Scope.Support.TableEntryType@,System.Collections.Generic.Dictionary{System.UInt64,System.UInt64}@)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="tableName"></param>
            <param name="type"></param>
            <param name="lookupDict"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Lookup(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="fromName"></param>
            <param name="from"></param>
            <param name="toName"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.Lookup(System.String,System.String,System.UInt64,System.String,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="decoder"></param>
            <param name="fromName"></param>
            <param name="from"></param>
            <param name="toName"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.ClearDecoder(System.String)">
            <summary>
            ClearDecoder Symbols
            </summary>
            <param name="decoderName"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.GetDecoderSoureFileName">
            <summary>
            Returns the source file for the decoder if it exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolSubstitution.LoadSymbolsFromString(System.String)">
            <summary>
            Loads symbol from a string. This is typically used when loading
            symbol files from a resource.
            </summary>
            <param name="s">String containing symbol information</param>
        </member>
        <member name="P:Tek.Scope.Support.SymbolSubstitution.SymbolPath">
            <summary>
            Returns directory for default symbol files
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.SymbolSubstitution.SymbolFileAssemblies">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolSubstitution.FormatterDelegate">
            <summary>
            Used to provide formatter lookup
            </summary>
            <param name="name"></param>
            <param name="radix"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.SymbolSubstitution.FormatterValidatorDelegate">
            <summary>
            Allows name of format to be validated
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.SymbolParser">
            <summary>
            Symbol Table file parser
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.StringToBool(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.StringToInt(System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.StringToULong(System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.StringToBits(System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Header(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Column(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.DisplayMode(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Split(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.TableHeader(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.TableEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.LookupTable(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapNormal(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapTable(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapInlineHeader(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapInline(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapInlineEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapValueHeader(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.MapValueEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Map(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Format(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Display(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Read(System.Collections.Generic.Dictionary{System.String,Tek.Scope.Support.DecoderTables},System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="decoderDict"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolParser.Read(System.Collections.Generic.Dictionary{System.String,Tek.Scope.Support.DecoderTables},System.String)">
            <summary>
            
            </summary>
            <param name="decoderDict"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.SymbolParser.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.Keywords.DECODER">
            <summary>
            Decoder
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.Keywords.VERSION">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolParser.TableMode">
            <summary>
            TableMode
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.TableMode.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.TableMode.Table">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolParser.MapMode">
            <summary>
            MapMode
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MapMode.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MapMode.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MapMode.Inline">
            <summary>
            Inline
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MapMode.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolParser.MainMode">
            <summary>
            MainMode
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.DisplayMode">
            <summary>
            Bus Dsiplay Mode
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.LookupTable">
            <summary>
            LookupTable
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.Map">
            <summary>
            Map
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.Display">
            <summary>
            Dipslay
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolParser.MainMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.InfoRecord">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InfoRecord.Line">
            <summary>
            line number within symbol file
            if 0 then applies to entire file
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InfoRecord.Character">
            <summary>
            character number within line
            if 0 then applies to entire line
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InfoRecord.IsError">
            <summary>
            error or warning
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InfoRecord.Text">
            <summary>
            warning or error text
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.SymbolChecker">
            <summary>
            Symbol Table file checker
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.SymbolChecker.Check(System.Collections.Generic.List{Tek.Scope.Support.InfoRecord}@,System.String)">
            <summary>
            
            </summary>
            <param name="infoRecords"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.SymbolChecker.Check(System.Collections.Generic.List{Tek.Scope.Support.InfoRecord}@,System.IO.StreamReader)">
            <summary>
            
            </summary>
            <param name="infoRecords"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.SymbolChecker.Section">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.DisplayMode">
            <summary>
            Bus Display Mode
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Map">
            <summary>
            Map
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Display">
            <summary>
            Display
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.Section.Between">
            <summary>
            In Between
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.TableSubSection.Table">
            <summary>
            table
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.TableSubSection.Between">
            <summary>
            between
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.MapSubSection.Inline">
            <summary>
            inline
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.MapSubSection.Value">
            <summary>
            value
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.SymbolChecker.MapSubSection.Between">
            <summary>
            between
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.OldSymbolParser">
            <exclude/>
             <summary>
             Symbol Table file parser
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.ParseError">
            <summary>
            Returns true if there was a parse error
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.FileError">
            <summary>
            Returns true if there was a file error
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.DisplayRadix">
            <summary>
            Return the display radix read from the symbol file
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.FileRadix">
            <summary>
            Return the file radix read from the symbol file
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.OldSymbolParser.SymbolDictionary">
            <summary>
            Symbol table dictionary
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.GenerateSymbolDictionary(System.String)">
            <summary>
            Load symbol definitions from an external file (See TLA Symbol File format specification)
            Check FileError() and ParseError() for errors.
            </summary>
            <param name="fileName">file name</param>
            <returns>symbol dictionary containing the symbol names and binary representations</returns>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.Matches(System.String,System.String)">
            <summary>
            Check if the pattern matches the template
            </summary>
            <param name="pattern">binary pattern</param>
            <param name="template">pattern template to match, can contain don't care symbols</param>
            <returns>True if the patterns match</returns>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.PatternToSymbol(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Match a binary pattern to a pattern from the symbol table
            </summary>
            <param name="pattern">binary pattern</param>
            <param name="dictionary">symbol dictionary</param>
            <returns>The corresponding symbol if it exists, otherwise an empty string</returns>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.PatternToSymbol(System.String)">
            <summary>
            Match a binary pattern to a pattern from the symbol table
            </summary>
            <param name="pattern">binary pattern</param>
            <returns>The corresponding symbol if it exists, otherwise an empty string</returns>
        </member>
        <member name="M:Tek.Scope.Support.OldSymbolParser.PatternToSymbol(System.Int64)">
            <summary>
            Match a binary pattern to a pattern from the symbol table
            </summary>
            <param name="pattern">integer form of binary pattern</param>
            <returns>The corresponding symbol if it exists, otherwise an empty string</returns>
        </member>
        <member name="T:Tek.Scope.Support.Checker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Checks PacketCollection for Validity
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IPacket)">
            <summary>
            Checks validity of Packet.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IField)">
            <summary>
            Checks Validity of Field
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.IsValid(Tek.Scope.Support.IBitsCollection)">
            <summary>
            
            </summary>
            <param name="bc"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IPacketCollection)">
            <summary>
            Validate PacketCollection
            </summary>
            <param name="pc"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IPacket)">
            <summary>
            Validates a Packet
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IField)">
            <summary>
            Validate Fields
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IDigitalEvents)">
            <summary>
            
            </summary>
            <param name="es"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IDigitalEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IBits)">
            <summary>
            
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IResultCollection)">
            <summary>
            
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Tek.Scope.Support.Checker.Validate(Tek.Scope.Support.IBitsCollection)">
            <summary>
            
            </summary>
            <param name="ibc"></param>
        </member>
        <member name="T:Tek.Scope.Support.Vertical`1">
            <summary>
              Native vertical definition.
            </summary>
            <typeparam name="T"> can be any value type </typeparam>
        </member>
        <member name="P:Tek.Scope.Support.Vertical`1.Offset">
            <summary>
              Vertical Offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vertical`1.Spacing">
            <summary>
              Vertical Spacing (usually referred to as YMult in our scope documentation)
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vertical`1.Position">
            <summary>
              Vertical position
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vertical`1.Units">
            <summary>
              The string value representing the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vertical`1.Histogram">
            <summary>
            </summary>
        </member>
        <member name="E:Tek.Scope.Support.Vertical`1.GetHistogram">
            <summary>
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.NormalizedVerticalEx">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVerticalEx.Position">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVerticalEx.Units">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVerticalEx.Histogram">
            <summary>
            </summary>
        </member>
        <member name="E:Tek.Scope.Support.NormalizedVerticalEx.GetHistogram">
            <summary>
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Horizontal`1">
            <summary>
              Native Horizontal Values
            </summary>
            <typeparam name="T"> can be any value type </typeparam>
        </member>
        <member name="M:Tek.Scope.Support.Horizontal`1.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.Horizontal`1.ValueToIndex(System.Double)">
            <summary>
              Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.Position">
            <summary>
              Vertical position
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.Units">
            <summary>
              Returns the units string.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.Spacing">
            <summary>
              The horizontal value between samples.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.PrechargeCount">
            <summary>
              The number of precharge points. Used as follows: Time = (Index - ZeroIndex) * Spacing + ZeroOffset.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.PostchargeCount">
            <summary>
              The number of postcharge points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.ZeroIndex">
            <summary>
              The index value (which could be fractional) where time zero occur. Used as follows: Time = (Index - ZeroIndex) * Spacing.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.IntegerZeroIndex">
            <summary>
              Returns the integer portions of ZeroIndex
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Horizontal`1.FractionalZeroIndex">
            <summary>
              Returns the Fractional portion of the ZeroIndex
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Vector`1">
            <summary>
              Native Vector Type.
            </summary>
            <typeparam name="T"> can be any value type that can be converted to a double </typeparam>
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector`1._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.#ctor(`0[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Constructor
            </summary>
            <param name="a"> </param>
            <param name="vSpacing"> </param>
            <param name="vOffset"> </param>
            <param name="hSpacing"> </param>
            <param name="hZeroIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Tek#Scope#Support#INormalizedVector#ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.ToArray">
            <summary>
              Raw Array. This is only available on 64bit OSes.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Commit">
            <summary>
              Tells the underlying class(es) that this set of changes is complete. This allows any housekeeping associated with a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.DisposeManaged">
            <summary>
              Called when managed items should be disposed.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.DisposeUnmanaged">
            <summary>
              Called when unmanaged items should be disposed.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.CalcStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector`1.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Type">
            <summary>
              Returns Vector Type. Usually this is VectorType.Sample
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Access">
            <summary>
              Controls how the data points are returned for PeakDetect, Envelope and MinMax data.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Tek#Scope#Support#INormalizedVector#Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Tek#Scope#Support#INormalizedVector#Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Tek#Scope#Support#INormalizedVector#Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Duration">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Focus">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.End">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.SourceName">
            <summary>
              Returns the name of the source for this vector. If this is a type in the DataStore, this should return the symbol name associated with the item. If it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector`1.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FastFrameVector8">
            <summary>
              FastFrameVector8 class
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector8._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.SByte*,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt64*,System.Double*,System.Double*,Tek.Scope.Support.SummaryFrameType)">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Add(System.Double)">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Remove(System.Double)">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
               cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
               name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.ValueToIndex(System.Double)">
            <summary>
              Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Commit">
            <summary>
              Tells the underlying class(es) that this set of changes is complete. This allows any housekeeping associated with a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.CalcBaseStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector8.CalcStDev">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Type">
            <summary>
              Returns vector type (always VectorType.Sample for Fastframe).
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Access">
            <summary>
              Usually controls the value returned for MinMax, PeakDetect and Envelope. However, this is not controlable for FastFrame.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Tek#Scope#Support#INormalizedVectorEx#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Duration">
            <summary>
              Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Focus">
            <summary>
              Returns the focus of this item. This value must be between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Begin">
            <summary>
              Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.End">
            <summary>
              Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.System#Collections#Generic#ICollection{System#Double}#IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.SourceName">
            <summary>
              Returns the name of the source for this vector. If this is a type in the DataStore, this should return the symbol name associated with the item. If it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.XIncr">
            <summary>
              Alias to Horizontal.Spacing.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.FrameCount">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.CurrentFrame">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.SummaryFrame">
            <summary>
              Summary frame type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.GlobalTime">
            <summary>
              Global time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.GMT">
            <summary>
              GMT time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.GMTFractSec">
            <summary>
              GMT Fractional Second
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.TTOffset">
            <summary>
              Time offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.ZeroIndex">
            <summary>
              Trigger index location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Units">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Spacing">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.PrechargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.PostchargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.IntegerZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.FractionalZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector8.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Vector8">
            <summary>
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Vector8._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector8._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector8._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector8._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector8._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector8._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.Vector8.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.SByte*,System.Int32)">
            <summary>
            </summary>
            <param name="vspacing"> </param>
            <param name="vposition"> </param>
            <param name="voffset"> </param>
            <param name="hspacing"> </param>
            <param name="zeroindex"> </param>
            <param name="ptr"> </param>
            <param name="reclen"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Tek#Scope#Support#IRange#Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Tek#Scope#Support#IRange#Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.GetAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Commit">
            <summary>
              Tells the underlying class(es) that this set of changes is complete. This allows any housekeeping associated with a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector8.CalcStats">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Access">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.SourceName">
            <summary>
              Returns the name of the source for this vector. If this is a type in the DataStore, this should return the symbol name associated with the item. If it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Duration">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Focus">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.End">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector8.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FastFrameVector16">
            <summary>
              FastFrameVector8 class
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector16._count">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector16._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector16._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector16._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVector16._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int16*,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt64*,System.Double*,System.Double*,Tek.Scope.Support.SummaryFrameType)">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Add(System.Double)">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Remove(System.Double)">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
               cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
               name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.ValueToIndex(System.Double)">
            <summary>
              Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Commit">
            <summary>
              Tells the underlying class(es) that this set of changes is complete. This allows any housekeeping associated with a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.ResetStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.CalcBaseStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVector16.CalcStDev">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Access">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Tek#Scope#Support#INormalizedVectorEx#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Duration">
            <summary>
              Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Focus">
            <summary>
              Returns the focus of this item. This value must be between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Begin">
            <summary>
              Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.End">
            <summary>
              Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.System#Collections#Generic#ICollection{System#Double}#IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.SourceName">
            <summary>
              Returns the name of the source for this vector. If this is a type in the DataStore, this should return the symbol name associated with the item. If it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.XIncr">
            <summary>
              Alias to Horizontal.Spacing.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.FrameCount">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.CurrentFrame">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.SummaryFrame">
            <summary>
              Summary frame type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.GlobalTime">
            <summary>
              Global time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.GMT">
            <summary>
              GMT time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.GMTFractSec">
            <summary>
              GMT Fractional Second
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.TTOffset">
            <summary>
              Time offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.ZeroIndex">
            <summary>
              Trigger index location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Units">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Spacing">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.PrechargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.PostchargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.IntegerZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.FractionalZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVector16.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.Vector16">
            <summary>
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.Vector16._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector16._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector16._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector16._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector16._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.Vector16._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.Vector16.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int16*,System.Int32)">
            <summary>
            </summary>
            <param name="vspacing"> </param>
            <param name="vposition"> </param>
            <param name="voffset"> </param>
            <param name="hspacing"> </param>
            <param name="zeroindex"> </param>
            <param name="ptr"> </param>
            <param name="reclen"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Tek#Scope#Support#IRange#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Commit">
            <summary>
              Tells the underlying class(es) that this set of changes is complete. This allows any housekeeping associated with a consistant state to be done.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.Vector16.CalcStats">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Access">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Tek#Scope#Support#INormalizedVectorEx#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.SourceName">
            <summary>
              Returns the name of the source for this vector. If this is a type in the DataStore, this should return the symbol name associated with the item. If it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Duration">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Focus">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.End">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.Vector16.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FastFrameVectorFloat">
            <summary>
              FastFrameVectorFloat class
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVectorFloat._count">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVectorFloat._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVectorFloat._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVectorFloat._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.FastFrameVectorFloat._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.#ctor(System.Double*,System.Double*,System.Single*,System.Int32*,System.Int32,System.Int32,System.Int32,System.UInt64*,System.Double*,System.Double*,Tek.Scope.Support.SummaryFrameType,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.GetCount">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.SetCount(System.Int32)">
            <summary>
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.GetAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.SetAt(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="index"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Add(System.Double)">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <param name="item"> The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns> true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Remove(System.Double)">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> true if <paramref name="item" /> was successfully removed from the <see
               cref="T:System.Collections.Generic.ICollection`1" /> ; otherwise, false. This method also returns false if <paramref
               name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> . </param>
            <exception cref="T:System.NotSupportedException">The
              <see cref="T:System.Collections.Generic.ICollection`1" />
              is read-only.</exception>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#ToArray">
            <summary>
            </summary>
            s
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#ToArray">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#Commit">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#Commit">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.ValueToIndex(System.Double)">
            <summary>
              Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.ResetStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.CalcBaseStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.FastFrameVectorFloat.CalcStDev">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.FrameCount">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.CurrentFrame">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.SummaryFrame">
            <summary>
              Summary frame type
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.GlobalTime">
            <summary>
              Global time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.GMT">
            <summary>
              GMT time for the current frame
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.GMTFractSec">
            <summary>
              GMT Fractional Second
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.TTOffset">
            <summary>
              Time offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.ZeroIndex">
            <summary>
              Trigger index location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.System#Collections#Generic#ICollection{System#Double}#IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns> true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false. </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Access">
            <summary>
              Fix me
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Horizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#Horizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#Horizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Duration">
            <summary>
              Returns the width of this item.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Focus">
            <summary>
              Returns the focus of this item. This value must be between Begin and End.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Begin">
            <summary>
              Returns the begin location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.End">
            <summary>
              Returns the end location.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVectorEx#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> .
            </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> . </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Item(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#Item(System.Int64)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#Item(System.Int64)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#INormalizedVector#SourceName">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Tek#Scope#Support#IVector{System#Single}#SourceName">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Units">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Spacing">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.PrechargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.PostchargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.IntegerZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.FractionalZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.FastFrameVectorFloat.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.VectorFloat">
            <summary>
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._count">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.VectorFloat._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.#ctor(System.Double*,System.Double*,System.Single*,System.Int32*,System.Boolean)">
            <summary>
            </summary>
            <param name="hspacing"> </param>
            <param name="zeroindex"> </param>
            <param name="ptr"> </param>
            <param name="reclen"> </param>
            <param name="bReadOnly"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVectorEx#Contains(System.Double)">
            <summary>
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.CopyTo(System.Double[],System.Int32)">
            <summary>
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.GetReadOnly">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.SetReadOnly(System.Boolean)">
            <summary>
            </summary>
            <param name="b"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.GetCount">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.SetCount(System.Int64)">
            <summary>
            </summary>
            <param name="value"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.GetAt(System.Int64)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.SetAt(System.Int64,System.Double)">
            <summary>
            </summary>
            <param name="index"> </param>
            <param name="value"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.DoCommit">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#ToArray">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#ToArray">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#Commit">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#Commit">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Dispose">
            <summary>
              Dispose method. It is highly recommended that this method be called when done using instances of this class.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.Finalize">
            <summary>
              Finalize.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.ValueToIndex(System.Double)">
            <summary>
              Converst a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.CalcBaseStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.VectorFloat.CalcStDev">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Access">
            <summary>
              Fix me
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#Horizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#Horizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Duration">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Focus">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.End">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVectorEx#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.System#Collections#Generic#ICollection{System#Double}#IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#Item(System.Int64)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#Item(System.Int64)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#INormalizedVector#SourceName">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Tek#Scope#Support#IVector{System#Single}#SourceName">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Units">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Spacing">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.PrechargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.PostchargeCount">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.ZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.IntegerZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.FractionalZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.VectorFloat.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.ZeroIndexChangedDelegate">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.SpacingChangedDelegate">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.UnitChangedDelegate">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.SetZeroIndexDelegate">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.GetZeroIndexDelegate">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.NormalizedHorizontal">
            <summary>
              The Normalized Vector Horizontal interface
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal.GetZeroIndex">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal.SetZeroIndex">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal.SpacingChanged">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal.UnitChanged">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal.ZeroIndexChanged">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal._unit">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal._xincr">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedHorizontal._zeroIndex">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.NormalizedHorizontal.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedHorizontal.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedHorizontal.ValueToIndex(System.Double)">
            <summary>
              Converts a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.Spacing">
            <summary>
              The horizontal value between samples.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.PrechargeCount">
            <summary>
              The number of precharge points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.PostchargeCount">
            <summary>
              The number of postcharge points
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.ZeroIndex">
            <summary>
              The index that represents zero time.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.IntegerZeroIndex">
            <summary>
              The time offset for the actual trigger.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.FractionalZeroIndex">
            <exclude />
        </member>
        <member name="P:Tek.Scope.Support.NormalizedHorizontal.Units">
            <summary>
              Returns the units string.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.NormalizedVertical">
            <summary>
              The vertical information for the vertical section.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVertical.UnitChanged">
            <summary>
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVertical._unit">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVertical.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVertical.Offset">
            <summary>
              Vertical Offset
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVertical.Increment">
            <summary>
              Vertical Increment
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVertical.Units">
            <summary>
              The string value representing the vertical units.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVertical.Position">
            <summary>
              Vertical position
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.NormalizedSubVector">
            <summary>
              Allows a subsection of a INormalizedVector to be represented as an entire waveform.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.NormalizedSubVector._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedSubVector._start">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedSubVector._vector">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedSubVector.horiz">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedSubVector.vert">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.Finalize">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.#ctor(Tek.Scope.Support.INormalizedVector,System.Int32,System.Int32)">
            <summary>
              Constructor
            </summary>
            <param name="vector"> </param>
            <param name="start"> </param>
            <param name="end"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.#ctor(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.IRange)">
            <summary>
              Constructor
            </summary>
            <param name="vector"> </param>
            <param name="range"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.ToArray">
            <summary>
              Returns Normalized values as an array of doubles
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedSubVector.Commit">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedSubVector.SourceName">
            <summary>
              Returns the name of the source file associated with this waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedSubVector.Vertical">
            <summary>
              The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedSubVector.Horizontal">
            <summary>
              The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedSubVector.Count">
            <summary>
              The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedSubVector.Item(System.Int64)">
            <summary>
              The normalized data element at the specified location.
            </summary>
            <param name="index"> the index in the array for that element </param>
            <returns> a double value in vertical units </returns>
        </member>
        <member name="T:Tek.Scope.Support.NormalizedVectorExBase">
            <summary>
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._begin">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._count">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._end">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._max">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._mean">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._min">
            <exclude />
        </member>
        <member name="F:Tek.Scope.Support.NormalizedVectorExBase._stddev">
            <exclude />
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.GetHistogram">
            <summary>
              Used to calculate Histogram if requested
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.CalculateHistogram">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.GetCount">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.SetCount(System.Int32)">
            <summary>
            </summary>
            <param name="count"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.GetAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.SetAt(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="index"> </param>
            <param name="v"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.DisposeManaged">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.DisposeUnmanaged">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Contains(System.Double)">
            <summary>
              Returns true if v is in range, false otherwise.
            </summary>
            <param name="v"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.IntersectArea(Tek.Scope.Support.IRange)">
            <summary>
            Returns the intersection Area
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Intersect(Tek.Scope.Support.IRange)">
            <summary>
            Returns 0 if v intersects this range, -1 if it's before and
            1 if it's after.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.SetArray(System.Double[])">
            <summary>
            </summary>
            <param name="array"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Clear">
            <summary>
              Clears Vector
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.CopyTo(System.Double[],System.Int32)">
            <summary>
              CopyTo
            </summary>
            <param name="array"> </param>
            <param name="arrayIndex"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.ToArray">
            <summary>
              Convert contents to an array.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.Commit">
            <summary>
              Notifies the object that all changes have been made.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.CalcBaseStats">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.CalcStDev">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.IndexToValue(System.Double)">
            <summary>
              Converts an index into a horizontal value (usually time).
            </summary>
            <param name="index"> an index into the data array. Non-integer values will use linear interpolation to return a value. </param>
            <returns> A double in the vertical units (usually volts) </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVectorExBase.ValueToIndex(System.Double)">
            <summary>
              Converts a horizontal value (usually time) into a array index.
            </summary>
            <param name="hv"> Horizontal value (usually time) </param>
            <returns> Array index </returns>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Type">
            <summary>
            Type of waveform.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Access">
            <summary>
            Access of MinMax/Envelope/Peak2Peak waveforms.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Vertical">
            <summary>
              Vertical Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Tek#Scope#Support#INormalizedVectorEx#Vertical">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Horizontal">
            <summary>
              Horizontal Property
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Count">
            <summary>
              Number of elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.IsReadOnly">
            <summary>
              Read Only flag
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Tek#Scope#Support#INormalizedVector#Count">
            <summary>
              Number of Elements
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Item(System.Int64)">
            <summary>
              Indexer
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.SourceName">
            <summary>
              Source Name
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Tek#Scope#Support#INormalizedVectorEx#Count">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Duration">
            <summary>
              Duration of the waveform
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Focus">
            <summary>
              Focus location
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Begin">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.End">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Mean">
            <summary>
              Returns the average of the Values.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Minimum">
            <summary>
              Return the minimum value
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Maximum">
            <summary>
              Returns the minimum value.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.StandardDeviation">
            <summary>
              Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.PeakToPeak">
            <summary>
              Peak2Peak measurement
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Units">
            <summary>
              Horizontal Units
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.Spacing">
            <summary>
              Horizontal Spacing
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.PrechargeCount">
            <summary>
              Horizontal Precharge Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.PostchargeCount">
            <summary>
            Horizontal Postcharge Count
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.ZeroIndex">
            <summary>
              Horizontal ZeroIndex
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.IntegerZeroIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.NormalizedVectorExBase.FractionalZeroIndex">
            <exclude />
        </member>
        <member name="T:Tek.Scope.Support.NormalizedVector">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.#ctor(Tek.Scope.Support.INormalizedVector)">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.#ctor(System.Double[])">
            <summary>
              Constructor
            </summary>
            <param name="values"> Data values. </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.DisposeManaged">
            <summary>
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.GetCount">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.SetCount(System.Int32)">
            <summary>
            </summary>
            <param name="count"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.GetAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.SetAt(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="index"> </param>
            <param name="v"> </param>
        </member>
        <member name="M:Tek.Scope.Support.NormalizedVector.ToString">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Tek.Scope.Support.OldNormalizedVectorWrapper">
            <summary>
              This class is used to pass older INormalizedVector interface instances as the newer INormalizedVectorEx.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.#ctor(Tek.Scope.Support.INormalizedVector)">
            <summary>
            </summary>
            <param name="v"> </param>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.Remove(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.GetCount">
            <summary>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.SetCount(System.Int32)">
            <summary>
            </summary>
            <param name="count"> </param>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.Add(System.Double)">
            <summary>
            </summary>
            <param name="item"> </param>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.GetAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"> </param>
            <returns> </returns>
        </member>
        <member name="M:Tek.Scope.Support.OldNormalizedVectorWrapper.SetAt(System.Int32,System.Double)">
            <summary>
            </summary>
            <param name="index"> </param>
            <param name="v"> </param>
        </member>
        <member name="T:Tek.Scope.Support.WaveformGenerators">
            <exclude/>
             <summary>
             Used to generate a realistic waveforms for testing
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.BitStream(Tek.Scope.Support.INormalizedVector@,System.Double,Tek.Scope.Support.IBits,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Given an input pattern, an analog waveform is returned.
            </summary>
            <param name="v"></param>
            <param name="bitrate"></param>
            <param name="pattern"></param>
            <param name="duration"></param>
            <param name="samplePerSecond"></param>
            <param name="amplitude"></param>
            <param name="offset"></param>
            <param name="preemphasis"></param>
            <param name="noise"></param>
            <param name="ssc"></param>
            <param name="randomjitter"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.Sinewave(Tek.Scope.Support.INormalizedVector@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int64)">
            <summary>
            Generates a Sinewave waveform
            </summary>
            <param name="v"></param>
            <param name="frequency">The Frequency</param>
            <param name="cycles">The total number of periods in the waveform</param>
            <param name="amplitude">The amplitude of the waveform in volts</param>
            <param name="offset">The offset in volts</param>
            <param name="noise">The noise as a percent. For example:0.03 is 3%</param>
            <param name="phase">The phase in degrees</param>
            <param name="count">The total number of sample points</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.SinewaveCycles(Tek.Scope.Support.INormalizedVector@,System.Double,System.Double,System.Double,System.Double,System.Int64)">
            <summary>
            Generates a Sinewave waveform.
            </summary>
            <param name="v"></param>
            <param name="frequency">The frequency</param>
            <param name="cycles">The total number of periods in the waveform</param>
            <param name="amplitude">The amplitued of the waveform in volts</param>
            <param name="noise">The noise as a percent. For example:0.03 is 3%</param>
            <param name="count">The total number of sample points</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.Sinewave(Tek.Scope.Support.INormalizedVector@,System.Double,System.Double,System.Double,System.Double,System.Int64)">
            <summary>
            Generates a Sinewave waveform.
            </summary>
            <param name="v"></param>
            <param name="frequency">The frequency</param>
            <param name="hScale">time/div</param>
            <param name="amplitude">The amplitued of the waveform in volts</param>
            <param name="noise">The noise as a percent. For example:0.03 is 3%</param>
            <param name="count">The total number of sample points</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.Sinewave(System.Double,System.Double,System.Double,System.Double,System.Int64)">
            <summary>
            Generates a Sinewave waveform.
            </summary>
            <param name="frequency">The frequency</param>
            <param name="hScale">time/div</param>
            <param name="amplitude">The amplitued of the waveform in volts</param>
            <param name="noise">The noise as a percent. For example:0.03 is 3%</param>
            <param name="count">The total number of sample points</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.Sinewave(Tek.Scope.Support.INormalizedVector@)">
            <summary>
            Creates a default 1KHz waveform.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformGenerators.Sinewave">
            <summary>
            Quick Sinewave
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.WaveformDBDirection">
            <summary>
            This class represents an IWaveformDBDirction
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._spacing">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._offset">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._units">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._count">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._scale">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._position">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._wfmdb">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBDirection._isVertical">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.#ctor">
            <summary>
            Default constructor is not allowed
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.#ctor(Tek.Scope.Support.WaveformDB,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="isVertical"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.IndexToValue(System.Double)">
            <summary>
            Converts an index into dimension value.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.ValueToIndex(System.Double)">
            <summary>
            COnverts a dimension value to an index.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.Histogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBDirection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Count">
            <summary>
            Gets/Sets the count for this dimension.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Spacing">
            <summary>
            Gets/Sets the distance between indexes.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Offset">
            <summary>
            Gets/Sets the index where value is equal to zero.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Units">
            <summary>
            Sets/Gets the string that represents the units for this dimension.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Scale">
            <summary>
            Gets/Sets the scale of the Axis
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBDirection.Position">
            <summary>
            Gets/Sets the position of the Axis
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.WaveformDB">
            <summary>
            This class holds a Waveform Database.
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDB._sourcename">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDB._vert">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDB._horiz">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDB._data">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDB._writecount">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="vcount">Vertical Count</param>
            <param name="hcount">Horizontal Count</param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.#ctor(System.UInt64[],System.Boolean)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ChangeHorizontal(System.Int64)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ChangeVertical(System.Int64)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.VerticalHistogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Vertical Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.HorizontalHistogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Horizontal Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.Round125(System.Double)">
            <summary>
            This function rounds up to a 1, 2, 5 sequence used in instruments
            </summary>
            <param name="scale">Scale</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.DetermineVerticalScale(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Suggests a Scale based on the waveforms Min/Max values.
            </summary>
            <param name="wfm"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.IFastFrameEx)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="vScale"></param>
            <param name="clearFlag"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.Diff(Tek.Scope.Support.IWaveformDB,Tek.Scope.Support.IWaveformDB)">
            <summary>
            Returns a summary of the difference between waveform db's
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDB.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.Vertical">
            <summary>
            Returns Vertical Dimension Info
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.Horizontal">
            <summary>
            Returns Horizontal Dimension Info
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.Item(System.Int64,System.Int64)">
            <summary>
            Gets/Sets a specific DPO point.
            </summary>
            <param name="vIndex">Vertical Index</param>
            <param name="hIndex">Horizontal Index</param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.SourceName">
            <summary>
            The name of the source
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.WriteCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.TestPattern">
            <summary>
            Generates a test pattern to be used for testing and
            validation.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDB.TotalHits">
            <summary>
            Returns total number of hits
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.HWWaveformDBDirection">
            <summary>
            This class represents an IWaveformDBDirection
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._spacing">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._offset">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._units">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._count">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._scale">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._position">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._wfmdb">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.HWWaveformDBDirection._isVertical">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.#ctor">
            <summary>
            Default constructor is not allowed
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.#ctor(Tek.Scope.Support.WaveformDBPtr,System.Boolean,System.Int64)">
            <summary>
            /
            </summary>
            <param name="wfmdb"></param>
            <param name="isVertical"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.IndexToValue(System.Double)">
            <summary>
            Converts an index into dimension value.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.ValueToIndex(System.Double)">
            <summary>
            COnverts a dimension value to an index.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.Histogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.HWWaveformDBDirection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Count">
            <summary>
            Gets/Sets the count for this dimension.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Spacing">
            <summary>
            Gets/Sets the distance between indexes.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Offset">
            <summary>
            Gets/Sets the index where value is equal to zero.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Units">
            <summary>
            Sets/Gets the string that represents the units for this dimension.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Scale">
            <summary>
            Gets/Sets the scale of the Axis
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.HWWaveformDBDirection.Position">
            <summary>
            Gets/Sets the position of the Axis
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.WaveformDBPtr">
            <summary>
            This class holds a Waveform Database ptr
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBPtr._sourcename">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBPtr._vert">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBPtr._horiz">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBPtr._data">
            <exclude/>
        </member>
        <member name="F:Tek.Scope.Support.WaveformDBPtr._writecount">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.#ctor(System.UInt64*)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.#ctor(System.UInt64[],System.Boolean)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.VerticalHistogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Vertical Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.HorizontalHistogram(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the Horizontal Histogram
            </summary>
            <param name="left">Left most horizontal location</param>
            <param name="top">Top most vertical location</param>
            <param name="right">Right most horizontal location</param>
            <param name="bottom">Bottom most vertical location</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.Round125(System.Double)">
            <summary>
            This function rounds up to a 1, 2, 5 sequence used in instruments
            </summary>
            <param name="scale">Scale</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.DetermineVerticalScale(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Suggests a Scale based on the waveforms Min/Max values.
            </summary>
            <param name="wfm"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.IFastFrameEx)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.ToWaveformDB(Tek.Scope.Support.IWaveformDB@,Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="wfm"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="vScale"></param>
            <param name="clearFlag"></param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.Diff(Tek.Scope.Support.IWaveformDB,Tek.Scope.Support.IWaveformDB)">
            <summary>
            Returns a summary of the difference between waveform db's
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformDBPtr.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.Vertical">
            <summary>
            Returns Vertical Dimension Info
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.Horizontal">
            <summary>
            Returns Horizontal Dimension Info
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.Item(System.Int64,System.Int64)">
            <summary>
            Gets/Sets a specific DPO point.
            </summary>
            <param name="vIndex">Vertical Index</param>
            <param name="hIndex">Horizontal Index</param>
            <remarks>Data in underlying pointer is always column order</remarks>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.SourceName">
            <summary>
            The name of the source
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.WriteCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.TestPattern">
            <summary>
            Generates a test pattern to be used for testing and
            validation.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.WaveformDBPtr.TotalHits">
            <summary>
            Returns total number of hits
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.FileInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.FFrameInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.UserView">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.ExpFormatType">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.ExpStorateType">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.ExplicitDim">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.ImplicitDim">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.BaseInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.WfmSetType">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.WfmDataType">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.DisplayFormat">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.ReferenceFileData">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.PerFrameInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.StateInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.CurveInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.WfmHeaderInfo">
            <exclude/>
        </member>
        <member name="T:Tek.Scope.Support.InPlaceFFReader">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Open(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadUInt16(System.IO.BinaryReader,System.UInt16@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadInt16(System.IO.BinaryReader,System.Int16@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadChar(System.IO.BinaryReader,System.Char@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadInt32(System.IO.BinaryReader,System.Int32@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadUInt32(System.IO.BinaryReader,System.UInt32@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadInt64(System.IO.BinaryReader,System.Int64@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadUInt64(System.IO.BinaryReader,System.UInt64@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadFloat(System.IO.BinaryReader,System.Single@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadDouble(System.IO.BinaryReader,System.Double@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Length(System.Char*)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Equal(System.Char*,System.String)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadFileHeader(System.IO.BinaryReader,Tek.Scope.Support.FileInfo@,System.Int32@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadReferenceFileData(System.IO.BinaryReader,Tek.Scope.Support.ReferenceFileData@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadUserView(System.IO.BinaryReader,Tek.Scope.Support.UserView@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadExplicitDim(System.IO.BinaryReader,Tek.Scope.Support.ExplicitDim@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadImplicitDim(System.IO.BinaryReader,Tek.Scope.Support.ImplicitDim@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadBaseInfo(System.IO.BinaryReader,Tek.Scope.Support.BaseInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadPerFrameInfo(System.IO.BinaryReader,Tek.Scope.Support.PerFrameInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadCurveInfo(System.IO.BinaryReader,Tek.Scope.Support.CurveInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadWfmHeader(System.IO.BinaryReader,Tek.Scope.Support.WfmHeaderInfo@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ReadFastFrameInfo(System.IO.BinaryReader,Tek.Scope.Support.FFrameInfo@,System.UInt32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.FillBuffer(System.Int64)">
            <summary>
            Fill cache.
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ToArray">
            <summary>
            Returns Normalized values as an array of doubles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.UpdateFrameCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceFFReader.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.Item(System.Int64)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.FrameCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.CurrentFrame">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.SummaryFrame">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.GlobalTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.GMT">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.GMTFractSec">
            <summary>
            
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceFFReader.TTOffset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.InPlaceWfmReader">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Create(System.String)">
            <summary>
            This is a class factory for InPlaceWfmReader. It is a singleton,
            meaning it only allows one InPlaceWfmReader instance to be connected 
            to a specific file. This is because subsequent opens fail. If the same
            file name is referred to a second time, then the original InPlaceWfmReader
            is returned (wrapped so that Disposes won't dispose the underlying InPlaceWfmReader).
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.#ctor(System.String)">
            <summary>
            Read file an cache portions if needed.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.GetHSize(Tek.Scope.Support.FileInfo,Tek.Scope.Support.WfmHeaderInfo)">
            <summary>
            Calculate Horizontal Record Length
            </summary>
            <param name="fileInfo"></param>
            <param name="wfmInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.FillBuffer(System.Int64)">
            <summary>
            Fill cache.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.ToArray">
            <summary>
            Returns Normalized values as an array of doubles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.Commit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.InPlaceWfmReader.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceWfmReader.Vertical">
            <summary>
            The vertical section.
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceWfmReader.Horizontal">
            <summary>
            The horizontal section
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceWfmReader.Count">
            <summary>
            The number of elements in the array
            </summary>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceWfmReader.Item(System.Int64)">
            <summary>
            The normalized data element at the specified location.
            </summary>
            <param name="index">the index in the array for that element</param>
            <returns>a double value in vertical units</returns>
        </member>
        <member name="P:Tek.Scope.Support.InPlaceWfmReader.SourceName">
            <summary>
            Returns the name of the source for this vector. If this is a type in the
            DataStore, this should return the symbol name associated with the item. If
            it's an in-memory vector then an empty string may be returned.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.WfmReader">
            <exclude/>
             <summary>
             Reads Tektronix Wfm Files
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadUInt16(System.IO.BinaryReader,System.UInt16@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadInt16(System.IO.BinaryReader,System.Int16@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadChar(System.IO.BinaryReader,System.Char@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadInt32(System.IO.BinaryReader,System.Int32@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadUInt32(System.IO.BinaryReader,System.UInt32@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadInt64(System.IO.BinaryReader,System.Int64@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadUInt64(System.IO.BinaryReader,System.UInt64@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFloat(System.IO.BinaryReader,System.Single@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadDouble(System.IO.BinaryReader,System.Double@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Length(System.Char*)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Equal(System.Char*,System.String)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFileHeader(System.IO.BinaryReader,Tek.Scope.Support.FileInfo@,System.Int32@,System.Boolean@)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadReferenceFileData(System.IO.BinaryReader,Tek.Scope.Support.ReferenceFileData@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadUserView(System.IO.BinaryReader,Tek.Scope.Support.UserView@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadExplicitDim(System.IO.BinaryReader,Tek.Scope.Support.ExplicitDim@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadImplicitDim(System.IO.BinaryReader,Tek.Scope.Support.ImplicitDim@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadBaseInfo(System.IO.BinaryReader,Tek.Scope.Support.BaseInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadPerFrameInfo(System.IO.BinaryReader,Tek.Scope.Support.PerFrameInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadCurveInfo(System.IO.BinaryReader,Tek.Scope.Support.CurveInfo@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadWfmHeader(System.IO.BinaryReader,Tek.Scope.Support.WfmHeaderInfo@,System.Int32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFastFrameInfo(System.IO.BinaryReader,Tek.Scope.Support.FFrameInfo@,System.UInt32,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.GetCurveData(Tek.Scope.Support.INormalizedVectorEx@,System.IO.BinaryReader,Tek.Scope.Support.FileInfo,Tek.Scope.Support.WfmHeaderInfo,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.GetFastFrameCurveData(Tek.Scope.Support.IFastFrame@,System.IO.BinaryReader,Tek.Scope.Support.FileInfo,Tek.Scope.Support.WfmHeaderInfo,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.GetFastFrameCurveData(Tek.Scope.Support.IFastFrameEx@,System.IO.BinaryReader,Tek.Scope.Support.FileInfo,Tek.Scope.Support.WfmHeaderInfo,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.GetPartialCurveData(Tek.Scope.Support.INormalizedVector@,System.IO.BinaryReader,Tek.Scope.Support.FileInfo,Tek.Scope.Support.WfmHeaderInfo,System.Boolean,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.CalculateChecksum(System.Int64,System.Int64,System.Int64,System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="dataStart"></param>
            <param name="dataEnd"></param>
            <param name="checksumStart"></param>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ValidateCheckSum(Tek.Scope.Support.FileInfo,System.IO.BinaryReader,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileInfo"></param>
            <param name="file"></param>
            <param name="bSwapFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidVectorFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidVectorStream(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidFastFrameFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidWfmDBFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidDigitalFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.IsValidFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadNative(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadNative(System.IO.FileStream)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadWfmDB(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Read(Tek.Scope.Support.INormalizedVectorEx,System.IO.Stream,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an INormalizedVector interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="sourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Read(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Read(Tek.Scope.Support.IDigitalEvents,System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="file"></param>
            <param name="sourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFastFrame(Tek.Scope.Support.IFastFrame,System.IO.Stream,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an IFastFrame interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="sourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFastFrame(Tek.Scope.Support.IFastFrameEx,System.IO.Stream,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an IFastFrame interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="sourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadDuration(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadDuration(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadPartial(Tek.Scope.Support.INormalizedVector,System.IO.Stream,System.String,System.Int32)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an INormalizedVector interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="sourcename"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Read(Tek.Scope.Support.INormalizedVectorEx,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an INormalizedVector interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v">Waveform to fill in..</param>
            <param name="filename">The name of the file to open.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFastFrame(Tek.Scope.Support.IFastFrame,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an IFastFrame interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v">Waveform to fill in..</param>
            <param name="filename">The name of the file to open.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadFastFrame(Tek.Scope.Support.IFastFrameEx,System.String)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an IFastFrame interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v">Waveform to fill in..</param>
            <param name="filename">The name of the file to open.</param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.ReadPartial(Tek.Scope.Support.INormalizedVector,System.String,System.Int32)">
            <summary>
            Reads a Tektronix Waveform (wfm) file into an INormalizedVector interface. A IDataWrapper interface is returned
            for compatibility with the data store.
            </summary>
            <param name="v">Waveform to fill in..</param>
            <param name="filename">The name of the file to open.</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.CharArrayToString(System.Char*)">
            <summary>
            Hacky way to turn char* into a string. Need to replace this. BOGUS
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmReader.Diff(System.String,System.String)">
            <summary>
            Shows the difference between two wfm files.
            </summary>
            <param name="filename1"></param>
            <param name="filename2"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.WfmWriter">
            <summary>
            Writes a Tektronix Wfm File
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.MinMax(Tek.Scope.Support.INormalizedVector,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.MinMax(Tek.Scope.Support.IWaveformDB,System.UInt64@,System.UInt64@)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.INormalizedVector,System.IO.Stream)">
            <summary>
            Write a INormalizedVector to a wfm file. Please note this is 
            not a general purpose writer. It only emits wfm files with float
            values regardless of the native type of the instance passed.
            </summary>
            <param name="v">INormalized Vector Instance</param>
            <param name="file">The name of the file</param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IFastFrame,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="file"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IFastFrame,System.String)">
            <summary>
            
            </summary>
            <param name="ff"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IDigitalEvents,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="de"></param>
            <param name="file"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IWaveformDB,System.String)">
            <summary>
            
            </summary>
            <param name="wfmdb"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.WfmWriter.Write(Tek.Scope.Support.IWaveformDB,System.IO.FileStream)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="file"></param>
        </member>
        <member name="T:Tek.Scope.Support.DigitalWriter">
            <summary>
            Writes Digital Data
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteVSPLCSV(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteVSPLCSV(Tek.Scope.Support.IDigitalEvents,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="tw"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteVSPLCVT(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteVSPLCVT(Tek.Scope.Support.IDigitalEvents,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="tw"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WritePSPLCVT(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WritePSPLCSV(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WritePSPLCSV(Tek.Scope.Support.IDigitalEvents,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="tw"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WritePSPLCVT(Tek.Scope.Support.IDigitalEvents,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="tw"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteAWGPAT(Tek.Scope.Support.IDigitalEvents,System.String)">
            <summary>
            See http://w-cmurdock-nix/wiki/PAT_File for format spec
            </summary>
            <param name="events"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.Deswizzle(System.UInt32)">
            <summary>
            To D13-D1 order
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalWriter.WriteAWGPAT(Tek.Scope.Support.IDigitalEvents,System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="events"></param>
            <param name="tw"></param>
        </member>
        <member name="T:Tek.Scope.Support.TekCSVType">
            <summary>
            Enum for type of CSV file
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.VSPL2K">
            <summary>
            2K style of CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.VSPL4K">
            <summary>
            4K style of CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.PSPL">
            <summary>
            PSPL style of CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.TimeValue">
            <summary>
            Time Value CSV
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.PSPLDPO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.VSPL4KDigital">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.PSPLDigital">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.TekCSVType.Unknown">
            <summary>
            Not a know CSV file.
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.DigitalReader">
            <summary>
            Read 4k digital files
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.IsValidFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.IsValidDigitalFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.IsValidWfmDBFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Type(System.String)">
            <summary>
            Determine the style of the CSV file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Read(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Read(Tek.Scope.Support.IDigitalEvents@,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.ReadPSPL(Tek.Scope.Support.IDigitalEvents@,System.IO.StreamReader)">
            <summary>
            Read CSV files and returns contents as a IDigital
            </summary>
            <param name="events"></param>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.ParseField(System.String,Tek.Scope.Support.BitValue@)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Read4K(Tek.Scope.Support.IDigitalEvents@,System.IO.StreamReader)">
            <summary>
            Read CSV files and returns contents as a IDigital
            </summary>
            <param name="events"></param>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Read4K(System.IO.StreamReader)">
            <summary>
            Read CSV files and returns contents as a IDigital
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.DigitalReader.Read4K(System.String)">
            <summary>
            Read CSV files and returns contents as a IDigital
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.TRCReader">
            <summary>
            Lecroy Waveform Reader (Experimental, Not fully tested)
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.ReadBinarySize(System.IO.BinaryReader,System.Int32@)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.IsValidFile(System.String)">
            <summary>
            Check for valid file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.Read(System.String)">
            <summary>
            Read Waveform using filename
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.Read(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            Read waveform using filename
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.TRCReader.Read(Tek.Scope.Support.INormalizedVector,System.IO.Stream,System.String)">
            <summary>
            Read waveform using Stream
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.BinReader">
            <summary>
            Agilent Waveform Reader 
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.BinReader.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BinReader.IsValidFile(System.String)">
            <summary>
            Check for valid file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BinReader.Read(System.String)">
            <summary>
            Read Waveform using filename
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BinReader.Read(Tek.Scope.Support.INormalizedVector,System.String)">
            <summary>
            Read waveform using filename
            </summary>
            <param name="v"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.BinReader.Read(Tek.Scope.Support.INormalizedVector,System.IO.Stream,System.String)">
            <summary>
            Read waveform using Stream
            </summary>
            <param name="v"></param>
            <param name="file"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.EdgeInfo">
            <exclude/>
             <summary>
             
             </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeInfo.Time">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeInfo.IsRise">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgeInfo.CompareTo(Tek.Scope.Support.EdgeInfo)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Tek.Scope.Support.EdgeInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tek.Scope.Support.EdgeInfoMultiState">
            <exclude/>
             <summary>
             
             </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeInfoMultiState.Time">
            <summary>
            
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.EdgeInfoMultiState.state">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tek.Scope.Support.EdgeInfoMultiState.CompareTo(Tek.Scope.Support.EdgeInfoMultiState)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Tek.Scope.Support.WaveformMath">
            <exclude/>
             <summary>
             A set of useful functions for analog waveforms
             </summary>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Interpolate(System.Double,System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.VerticalHistogram(Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double@,System.Double@)">
            <summary>
            Calculates a vertical histogram for the range specified on the vector.
            </summary>
            <param name="v">Vector</param>
            <param name="begin">Begin index (not time)</param>
            <param name="end">End index (not time)</param>
            <param name="min">min vertical value</param>
            <param name="max">Max vertical value</param>
            <param name="binCount">The number of bins in the histogram</param>
            <param name="histIncr">The returned time increment between each bin.</param>
            <param name="histStart">The returned value for index 0 of the histogram.</param>
            <returns>An array containing the histogram. Each index contains the hit count for the time range from histStart+histIncr*index to histStart+histIncr*(index+1).</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.TopBottom(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.IRange,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the top/bottom values using a histogram and calculaes min/max. 
            </summary>
            <param name="v">Analog waveform</param>
            <param name="context">Range of time this request is for.</param>
            <param name="top">calculated top</param>
            <param name="bottom">calculatd bottom</param>
            <param name="min">calculated min</param>
            <param name="max">calculate max</param>
            <returns>true if action is successful, false otherwise</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.TopBottom(Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns Min/Max and Top/Bottom
            </summary>
            <param name="v">Analog waveform</param>
            <param name="begin">begin time of range</param>
            <param name="end">end time of range</param>
            <param name="top">calculated top</param>
            <param name="bottom">calculatd bottom</param>
            <param name="min">calculated min</param>
            <param name="max">calculate max</param>
            <returns>true if action is successful, false otherwise</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.PeakToPeak(Tek.Scope.Support.INormalizedVector)">
            <summary>
            Returns Peak to Peak value for analog waveform
            </summary>
            <param name="v">analog waveform</param>
            <returns>peak to peak value</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.MinMax(Tek.Scope.Support.INormalizedVector,System.Double@,System.Double@)">
            <summary>
            Calcluates Min/Max
            </summary>
            <param name="v">Analog Waveform</param>
            <param name="min">calculated min</param>
            <param name="max">calculated max</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.MinMax(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.IRange,System.Double@,System.Double@)">
            <summary>
            Calculates Min/Max over a range.
            </summary>
            <param name="v">analog waveform</param>
            <param name="context">time range</param>
            <param name="min">calculated min</param>
            <param name="max">calculated max</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.MinMax(Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Fills in the min/max values for the specified index range in waveform v.
            </summary>
            <param name="v">Waveform</param>
            <param name="begin">Begin Index</param>
            <param name="end">End Index</param>
            <param name="min">Minimum vertical value found in the specified index range.</param>
            <param name="max">Maximum vertical value found in the specified index range.</param>
            <returns>Return true of the range is valid, false otherwise.</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.FindActive(Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Double)">
            <summary>
            Find range(s) where signal is above or below limits
            
            Used for checking where signals get out of electrical idle
            </summary>
            <param name="v">Analog Waveform</param>
            <param name="threshold">threshold</param>
            <param name="hysteresis">hysteresis</param>
            <param name="time">minimum idle time</param>
            <returns>list of active ranges</returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Resample(Tek.Scope.Support.INormalizedVector@,Tek.Scope.Support.INormalizedVector,System.Double)">
            <summary>
            Changes the sample rate for the input vector.
            </summary>
            <param name="output">analog file</param>
            <param name="input">analog file</param>
            <param name="sampleRate">new sample rate</param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Resample(Tek.Scope.Support.INormalizedVector,System.Double)">
            <summary>
            Changes teh sample rate for the input wveform.
            </summary>
            <param name="v"></param>
            <param name="sampleRate"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.EdgeReferences(Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.ISettings,Tek.Scope.Support.IRange,System.Double@,System.Double@,System.Double@,System.Double@)">
            <exclude/>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.EdgeWidth(Tek.Scope.Support.ISettings,Tek.Scope.Support.IRange,Tek.Scope.Support.INormalizedVector,Tek.Scope.Support.WaveformMath.EdgeDirection)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="context"></param>
            <param name="v"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.ISettings,Tek.Scope.Support.IRange,Tek.Scope.Support.INormalizedVectorEx)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="context"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.ISettings,Tek.Scope.Support.IRange,Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="context"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.IPin)">
            <summary>
            
            </summary>
            <param name="pin"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="threshhold"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.DEEdges(Tek.Scope.Support.INormalizedVector,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="threashhold"></param>
            <param name="hystersis"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="threshold"></param>
            <param name="hysteresis"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            This function returns an array of edges for multiple thresholds.
            One hysteresis value is applied to all thresholds
            Thresholds MUST be in ascending order or output is undefined.
            If the delta between thresholds is less than the hysteresis the output is undefined.
            States returned are zero based with the lowest vertical state being zero
            
            </summary>
            <param name="v"></param>
            <param name="thresholds"></param>
            <param name="hystersis"></param>
            <returns></returns>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Func{System.Boolean,System.Double,System.Boolean})">
            <summary>
            Calls func whenever a new edge is found. 
            </summary>
            <param name="v">The analog waveform to scan for edges</param>
            <param name="func">The delegate to call. The input arguments are bool, double passing true if is a rise followed by the time. Return true to continue recieving edges, false otherwise.</param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Double,System.Func{System.Boolean,System.Double,System.Boolean})">
            <summary>
            Calls func whenever a new edge is found. 
            </summary>
            <param name="v">The analog waveform to scan for edges</param>
            <param name="threshhold">The threshhod used to find edges</param>
            <param name="func">The delegate to call. The input arguments are bool, double passing true if is a rise followed by the time. Return true to continue recieving edges, false otherwise.</param>
        </member>
        <member name="M:Tek.Scope.Support.WaveformMath.Edges(Tek.Scope.Support.INormalizedVector,System.Double,System.Double,System.Func{System.Boolean,System.Double,System.Boolean})">
            <summary>
            Calls func whenever a new edge is found. 
            </summary>
            <param name="v">The analog waveform to scan for edges</param>
            <param name="threashhold">The threshhod used to find edges</param>
            <param name="hystersis">The hystersis used to qualify edges.</param>
            <param name="func">The delegate to call. The input arguments are bool, double passing true if is a rise followed by the time. Return true to continue recieving edges, false otherwise.</param>
        </member>
        <member name="T:Tek.Scope.Support.WaveformMath.ActiveDirection">
            <summary>
            Indicates the Direction
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.ActiveDirection.Rising">
            <summary>
            The signal is rising
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.ActiveDirection.Falling">
            <summary>
            The signal is falling
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.ActiveDirection.High">
            <summary>
            The signal is high
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.ActiveDirection.Low">
            <summary>
            The signal is low
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.ActiveDirection.Idle">
            <summary>
            The signal is Idle
            </summary>
        </member>
        <member name="T:Tek.Scope.Support.WaveformMath.EdgeDirection">
            <summary>
            The direction going up or down
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.EdgeDirection.Rising">
            <summary>
            Going up
            </summary>
        </member>
        <member name="F:Tek.Scope.Support.WaveformMath.EdgeDirection.Falling">
            <summary>
            Going down
            </summary>
        </member>
    </members>
</doc>
